uses <sys\exceptions>

func b2s(boolean_value):
  if boolean_value == true:
    return "true"
  else:
    return "false"
  end
end

func if(boolean_value, value_on_true, value_on_false):
  if boolean_value:
    return value_on_true
  else:
    return value_on_false
  end
end

func max([args]):
  if len(args) > 0:
    r ?= args[0]
    for x in args:
      r = if(x > r, x, r)
    end
    return r
  else:
    return null
  end
end

func min([args]):
  if len(args) > 0:
    r ?= args[0]
    for x in args:
      r = if(x < r, x, r)
    end
    return r
  else:
    return null
  end
end

proc Ord(char):
  push char
  chord
end

proc _Chr(wrd):
  push wrd
  ordch
end

func Chr([chars]):
  r ?= ""
  for(i ?= 0; i < len(chars); i++):
    r += _Chr(chars[i])
  end
  return r
end

// Arrays

proc Fill(array_ref, value):
  l ?= len(array_ref)
  for(i ?= 0; i < l; i++):
    array_ref[i] ?= copy(value)
  end
end

proc Append(array_ref, value):
  l ?= len(array_ref)
  SetLen(array_ref, l + 1)
  array_ref[l] ?= value
end

proc AppendFirst(array_ref, value):
  l ?= len(array_ref)
  SetLen(array_ref, l + 1)

  for(i ?= l - 1; i >= 0; i--):
    array_ref[i + 1] ?= array_ref[i]
  end

  array_ref[0] ?= value
end

// Multi inc/dec

proc inc([args]):
  l ?= len(args)
  switch l:
    case 0:
      raise new Exception("inc() -> 0 arguments received!")
    end

    case 1:
      args[0]++
    end

    else:
      l--
      for (i ?= 0; i < l; i++):
        args[i] += args[l]
      end
  end
end

proc dec([args]):
  l ?= len(args)
  switch l:
    case 0:
      raise new Exception("dec() -> 0 arguments received!")
    end

    case 1:
      args[0]--
    end

    else:
      l--
      for (i ?= 0; i < l; i++):
        args[i] -= args[l]
      end
  end
end
