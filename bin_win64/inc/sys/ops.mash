enum Types    [TypeNull,
               TypeWord,
               TypeInt,
               TypeReal,
               TypeStr,
               TypeArray,
               TypeClass,
               TypeRef]

var TypeDigits  = [TypeWord,
                   TypeInt,
                   TypeReal]

var TypeIndexed = [TypeStr,
                   TypeArray]

word TypePtr 255

proc TypeOf(object_pointer):
  push object_pointer
  typeof
end

func new(object_pointer):
  v ?= new
  v = object_pointer
  return v
end

proc __copyObject(object_pointer):
  push object_pointer
  copy
  swp
  pop
end

func __copyArr(object_pointer):
  l ?= len(object_pointer)
  r ?= new[l]

  for(i ?= 0; i < l; i++):
    safe t ?= copy(object_pointer[i])
    r[i] ?= t
  end

  return r
end

func copy(object_pointer):
  if typeof(object_pointer) == typeArray:
    return __copyArr(object_pointer)
  else:
    return __copyObject(object_pointer)
  end
end

proc SizeOf(object_pointer):
  push object_pointer
  sizeof
end

proc Len(array_pointer):
  push array_pointer
  alen
end

proc SetLen(array_pointer, new_length):
  push array_pointer
  push new_length
  salen
  pop
end

func _op_range(value_from, value_to):
  if value_from > value_to:
    r ?= new[value_from - value_to + 1]
    for(i ?= copy(value_from); i >= value_to; i--):
      r[value_from - i] ?= copy(i)
    end
  else:
    r ?= new[value_to - value_from + 1]
    for(i ?= copy(value_from); i <= value_to; i++):
      r[i - value_from] ?= copy(i)
    end
  end
  return r
end

proc gc():
  stkdrop
  gc
end

func _op_in(v, array):
  i ?= 0
  ln ?= len(array)
  while i < ln:
    if array[i] == v:
      return true
    end
    i++
  end
  return false
end

func ptr(a):
  return @a
end

func rel(a):
  return ?a
end

func __PopRest(args_count):
  t ?= 0
  args ?= new[args_count]
  while t < args_count:
    peek args[t]
    t++
  end
  return args
end

proc vcall(method_pointer):
  argcount--
  call method_pointer
end

proc ExitThread():
  threxit
end
