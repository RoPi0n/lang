// Abstract exceptions

str ERaisedException  "ERaisedException"
str EInvalidVMOp      "EInvalidSVMOperation"
str EInvalidTypeCast  "EInvalidSVMTypeCast"
str EAbstractError    "EAbstractError"
str EUnknownException "EUnknownException"

var EAbstractException = [
       ERaisedException,
       EInvalidVMOp,
       EInvalidTypeCast,
       EAbstractError,
       EUnknownException]

// Common exceptions

str EIntError         "EInterror"
str EDivByZero        "EDivByZero"
str ERangeError       "ERangeError"
str EIntOverflow      "EIntOverflow"

str EMathError        "EMathError"
str EInvalidOp        "EInvalidOp"
str EZeroDivide       "EZeroDivide"
str EOverflow         "EOverflow"
str EUnderflow        "EUnderflow"

var EMathException = [EIntError,
                      EDivByZero,
                      ERangeError,
                      EIntOverflow,

                      EMathError,
                      EInvalidOp,
                      EZeroDivide,
                      EOverflow,
                      EUnderflow]

// Critical exceptions

str EAccessViolation "EAccessViolation"
str EOSError         "EOSError"
str ENoThreadSupport "ENoThreadSupport"

var ECriticalException = [EAccessViolation,
                          EOSError,
                          ENoThreadSupport]

// Exception catching

class Exception:
  var ClassName, Message
  proc Create
end

proc Exception::Create(Message):
  $ClassName ?= ERaisedException
  $Message ?= Message
end

func __MakeException(classname, message):
  if classname == ERaisedException:
    return message
  else:
    E ?= new Exception
    E -> ClassName ?= classname
    E -> Message ?= message
    return E
  end
end

var EUnknown = __MakeException(EUnknownException, "Unknown raised exception.")
