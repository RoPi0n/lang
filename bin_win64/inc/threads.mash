// Mash lang threads unit
// Code version: 1.0

uses <bf>
uses <classes\vector>

// common methods

proc thr_create(method, arg):
  push arg
  push method
  cthr
end

proc thr_async(method, arg):
  push arg
  push method
  cthr
  rthr
end

proc thr_resume(thr):
  push thr
  rthr
end

proc thr_suspend(thr):
  push thr
  sthr
end

proc thr_terminate(thr):
  push thr
  tthr
end

enum ThreadPriority [tpIdle, tpLowest, tpLower, tpNormal,
                     tpHigher, tpHighest, tpTimeCritical]

proc thr_setpriority(thr, priority):
  push priority
  push thr
  thsp
end

proc thr_kill(thr):
  thr_suspend(thr)
  thr_terminate(thr)
end

////////////////////////////////////////////////////////////////////////////////
// Thread controller class
////////////////////////////////////////////////////////////////////////////////

class TThread:
  protected:
    var ThreadContext

  public:
    var Resumed, Terminated
    proc Create

    proc Execute //for overriding
    proc Suspend, Resume, Terminate, WaitFor, ReJoin, SetPriority //Control proc's
end

proc TThread::Execute():
  // method for overriding
end

proc TThread_Join(CurrentThreadContext, ThreadClass):
  ThreadClass->Execute()
  ThreadClass->Terminate()
end

proc TThread::Create(Resumed):
  $Resumed ?= false
  $Terminated ?= false
  $ThreadContext ?= thr_create(TThread_Join, $)
  if Resumed:
    $Resume()
  end
end

proc TThread::Free():
  if ~$Terminated:
    $Terminate()
  end
end

proc TThread::ReJoin(Resumed):
  $ThreadContext ?= thread(TThread_Join, $)
  if Resumed:
    $Resume()
  end
end

proc TThread::Suspend():
  thr_suspend($ThreadContext)
  $Resumed = false
end

proc TThread::Resume():
  thr_resume($ThreadContext)
  $Resumed = true
end

proc TThread::SetPriority(priority):
  thr_setpriority($ThreadContext, priority)
end

proc TThread::Terminate():
  $Resumed = false
  $Terminated = true
  thr_terminate($ThreadContext)
end

proc TThread::WaitFor():
  while ~$Terminated:
    Sleep(1)
    gc()
  end
end

////////////////////////////////////////////////////////////////////////////////
//  Async
////////////////////////////////////////////////////////////////////////////////

class TAsyncCallThread(TThread):
  var Method, Args
  proc Create, Execute
end

proc TAsyncCallThread::Create(Method, Args):
  $Method ?= Method
  $Args ?= Args
  TThread::Create$(true)
end

proc TAsyncCallThread::Execute():
  while $Args->Size() > 0:
    $Args -> pop_back()
  end
  call $Method
end

func Async(method, [args]):
  args_vect ?= new vector()
  for arg in args:
    args_vect -> push_back(arg)
  end
  return new TAsyncCallThread(method, args_vect)
end

////////////////////////////////////////////////////////////////////////////////
//  QuickThread
////////////////////////////////////////////////////////////////////////////////

class TQThreadCallThread(TThread):
  var Method, Args
  proc Create, Execute
end

proc TQThreadCallThread::Create(Method, Args):
  $Method ?= Method
  $Args ?= Args
  TThread::Create$(false)
end

proc TQThreadCallThread::Execute():
  while $Args->Size() > 0:
    $Args -> pop_back()
  end
  call $Method
end

func Thread(method, [args]):
  args_vect ?= new vector()
  for arg in args:
    args_vect -> push_back(arg)
  end
  return new TQThreadCallThread(method, args_vect)
end
