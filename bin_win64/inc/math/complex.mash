/*
 * Mash math for complex numbers unit
 */

uses <math\base>

// Complex number class

class Complex:
  public:
    var Re, Im

    proc Create, Set

    func ToString, Clone, CompareTo

    // Math features
    func Module, Angle, Conjugate
end

// Features implementation

proc Complex::Create(Re, Im):
  $Re ?= Re
  $Im ?= Im
end

proc Complex::Set(Re, Im):
  $Re = Re
  $Im = Im
end

func Complex::ToString():
  return if($Re <> 0, "" + $Re, "") +

         if($Im <> 0,
            if($Im > 0, if($Re <> 0, "+", ""), "") +
            if(Abs($Im) == 1, if($Im > 0, "i", "-i"), "" + $Im + "i"),
            "") +

         if(($Re == 0) & ($Im == 0), "0", "")
end

func Complex::Clone():
  return new Complex($Re, $Im)
end

func Complex::CompareTo(z):
  return ($Re == z -> Re) & ($Im == z -> Im)
end

// Math features

func Complex::Module():
  return Sqrt($Re * $Re + $Im * $Im)
end

func Complex::Angle():
  if $Re == 0:
    return if($Im > 0,
              m_pi / 2,
              - m_pi / 2)
  else:
    FiVal ?= ArcTg($Im / $Re)
    return if( $Re > 0,
               FiVal,
               if($Im >= 0,
                  FiVal + m_pi,
                  FiVal - m_pi) )
  end
end

func Complex::Conjugate():
  return new Complex($Re, -$Im)
end

// Base function's with complex numbers

func cm.unite([args]):
  switch len(args):
    case 0:
      return new Complex(0, 0)
    end

    case 1:
      return new Complex(args[0], 0)
    end

    case 2:
      return new Complex(args[0], args[1])
    end

    else:
      raise new Exception("CMath.Unite: Invalid args.")
  end
end

func cm.uniteIm(Im):
  return new Complex(0, Im)
end

func cm.uniteViaExp(module, angle):
  return new Complex(module * cos(angle), module * sin(angle))
end

// Basic operations

func cm.add(z1, z2):
  return new Complex( z1 -> Re + z2 -> Re,
                      z1 -> Im + z2 -> Im )
end

func cm.sub(z1, z2):
  return new Complex( z1 -> Re - z2 -> Re,
                      z1 -> Im - z2 -> Im )
end

func cm.mul(z1, z2):
  return new Complex( z1 -> Re * z2 -> Re - z1 -> Im * z2 -> Im,
                      z1 -> Re * z2 -> Im + z2 -> Re * z1 -> Im )
end

func cm.div(z1, z2):
  Top ?= cm.mul(z1, z2 -> Conjugate())
  Bottom ?= cm.mul(z2, z2 -> Conjugate())
  return new Complex( Top -> Re / Bottom -> Re,
                      Top -> Im / Bottom -> Re )
end

func cm.power(z, n):
  pN ?= Power(z -> Module(), n)
  fN ?= z -> Angle() * n
  return new Complex( pN * Cos(fN),
                      pN * Sin(fN) )
end

// Extended functions

func cm.ln(z):
  return new Complex( Log(z -> Module()), z -> Angle() )
end

func cm.logN(z, n):
  return new Complex( LogN(n, z -> Module()), z -> Angle() * LogN(n, m_e))
end

// Hyperbolic functions

func cm.sin(z):
  return new Complex( sin(z -> Re) * cosh(z -> Im),
                      cos(z -> Re) * sinh(z -> Im) )
end

func cm.cos(z):
  return new Complex( cos(z -> Re) * cosh(z -> Im),
                      sin(z -> Re) * sinh(z -> Im) )
end

func cm.tg(z):
 /*
  *  https://proofwiki.org/wiki/Tangent_of_Complex_Number
  *  Formulation #3 implementation
  */

  k ?= cos(2 * z -> Re) + cosh(2 * z -> Im)
  return new Complex( sin(2 * z -> Re) / k,
                      sinh(2 * z -> Im) / k )
end

func cm.ctg(z):
 /*
  *  https://proofwiki.org/wiki/Cotangent_of_Complex_Number
  *  Formulation #3 implementation
  */

  Re ?= -ctg(z -> Re) -
         ctg(z -> Re) * Power(ctgh(z -> Im), 2)

  Re /= Power(ctg(z -> Re), 2) +
        Power(ctgh(z -> Im), 2)

  Im ?= Power(ctg(z -> Re), 2) * ctgh(z -> Im) -
        ctgh(z -> Im)

  Im /= Power(ctg(z -> Re), 2) +
        Power(ctgh(z -> Im), 2)

  return new Complex(Re, Im)
end

func cm.sec(z):
 /*
  *  https://proofwiki.org/wiki/Secant_of_Complex_Number
  *  Finally formula implementation
  */

  k ?= Power(cos(z -> Re), 2) * Power(cosh(z -> Im), 2)
  k += Power(sin(z -> Re), 2) * Power(sinh(z -> Im), 2)

  return new Complex( cos(z -> Re) * cosh(z -> Im) / k,
                      sin(z -> Re) * sinh(z -> Im) / k )
end

func cm.cosec(z):
 /*
  *  https://proofwiki.org/wiki/Cosecant_of_Complex_Number
  *  I'm just leave it here...
  */

  k ?= Power(sin(z -> Re), 2) * Power(cosh(z -> Im), 2)
  k += Power(cos(z -> Re), 2) * Power(sinh(z -> Im), 2)

  return new Complex( sin(z -> Re) * cosh(z -> Im) / k,
                      -cos(z -> Re) * sinh(z -> Im) / k)
end
