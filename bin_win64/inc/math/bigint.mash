/*
 *  Mash big integer's implementation
 */

uses <math\base>
uses <strings>

enum BigIntSign [biSignMinus, biSignPlus]

class BigInt:
  public:
    var sign,
        digits

    proc Create,
         Set

    func CountDigits,
         ToString,
         Clone,
         IsNegative,

    // Comparsion
         IsEqual,
         IsBigger,
         IsSmaller,
         IsZero

    // Arithmetical operations
    proc Add,
         Increment,
         Mul,
         Sub,
         Div

  private:
    proc FormatDigits,
         ForSubFormatDigits,
         PushZero
end

proc BigInt::Create(value):
  $sign ?= biSignPlus
  $Set(value)
end

proc BigInt::Set(value):
  $digits ?= []

  k ?= 0
  if len(value) > 0:
    if value[0] in ["-", "+"]:
      $sign = if(value[0] == "-", biSignMinus, biSignPlus)
      k++
    end

    for(i ?= len(value) - 1; i >= k; i--):
      if value[i] in "0123456789":
        Append($digits, copy(s2i(value[i])))
      else:
        raise new Exception("BigInt::Set -> Given string is not a digit!")
      end
    end
  else:
    Append($digits, 0)
  end
end

func BigInt::CountDigits():
  return len($digits)
end

func BigInt::ToString():
  r ?= if($sign == biSignMinus, "-", "")

  for(i ?= len($digits) - 1; i >= 0; i--):
    r += $digits[i]
  end

  return r
end

func BigInt::Clone():
  r ?= new BigInt("")
  r -> sign ?= copy($sign)
  r -> digits ?= copy($digits)
  return r
end

func BigInt::IsNegative():
  return $sign == biSignMinus
end

func BigInt::IsEqual(x):
  if ($sign == x -> sign) & ($CountDigits() == x -> CountDigits()):
    r ?= true
    l ?= $CountDigits()
    for(i ?= 0; i < l; i++):
      r &= $digits[i] == x -> digits[i]
    end

    return r
  else:
    return false
  end
end

func BigInt::IsBigger(x):
  if $CountDigits() == x -> CountDigits():
    for(i ?= $CountDigits() - 1; i >= 0; i--):
      t ?= $digits[i] - x -> digits[i]
      if t > 0:
        return true
      else:
        if t < 0:
          return false
        end
      end

      if i == 0:
        return false
      end
    end
  else:
    return $CountDigits() > x -> CountDigits()
  end
end

func BigInt::IsSmaller(x):
  if $CountDigits() == x -> CountDigits():
    for(i ?= $CountDigits() - 1; i >= 0; i--):
      t ?= $digits[i] - x -> digits[i]
      if t < 0:
        return true
      else:
        if t > 0:
          return false
        end
      end

      if i == 0:
        return false
      end
    end
  else:
    return $CountDigits() < x -> CountDigits()
  end
end

func BigInt::IsZero():
  return ($CountDigits() == 1) & ($digits[0] == 0)
end

/*
 * Common private methods
 */

proc BigInt::FormatDigits():
  l ?= $CountDigits()
  j ?= 0
  for(i ?= 0; i < l; i++):
    j = $digits[i]

    if j > 9:
      $digits[i] = j % 10
      j \= 10
      if (i + 1 < l) & (j > 0):
        $digits[i + 1] += j
      else:
        Append($digits, j)
      end
    end
  end
end

proc BigInt::ForSubFormatDigits():
  l ?= $CountDigits()
  j ?= 0
  for(i ?= 0; i < l; i++):
    j = $digits[i]

    if j < 0:
        $digits[i + 1]--
        $digits[i] = j + 10
    end
  end

  l ?= $CountDigits()
  while l > 1:
    if $digits[l - 1] == 0:
      l--
      SetLen($digits, l)
    else:
      break
    end
  end
end

proc BigInt::PushZero():
  AppendFirst($digits, 0)
end

/*
 * Arithmetical operations
 */

proc BigInt::Add(x):
  while $CountDigits() < x -> CountDigits():
    Append($digits, 0)
  end

  l1 ?= $CountDigits()
  l2 ?= x -> CountDigits()

  for(i ?= 0; (i < l1) & (i < l2); i++):
    $digits[i] += x -> digits[i]
  end

  gc()

  $FormatDigits()
end

proc BigInt::Increment():
  $digits[0]++
  $FormatDigits()
end

proc BigInt::Mul(x):
  orig ?= $Clone()
  $Set("0")

  lx ?= x -> CountDigits()

  for(i ?= 0; i < lx; i++):
    UnoPart ?= orig -> Clone()
    j ?= copy(i)
    while j > 0:
      UnoPart -> PushZero()
      j--
    end

    lu ?= UnoPart -> CountDigits()
    d  ?= x -> digits[i]
    for(j ?= 0; j < lu; j++):
      UnoPart -> digits[j] *= d
    end

    gc()

    $Add(UnoPart)
  end
end

proc BigInt::Sub(x):
  l ?= $CountDigits()
  lx ?= x -> CountDigits()
  for(i ?= 0; (i < l) & (i < lx); i++):
    $digits[i] -= x -> digits[i]
  end

  $ForSubFormatDigits()
end

// Division

proc BigInt::Div(x):
  orig ?= $Clone()
  $Set("0")
end

// Additional methods

func big.factorial(n):
  if n < 0:
    raise new Exception("big.factorial(n) -> n must be bigger than 0.")
  end

  r ?= new BigInt("1")
  b ?= new BigInt("0")
  for(i ?= 2; i <= n; i++):
    b -> Set(i2s(i))
    r -> Mul(b)
  end

  return r
end
