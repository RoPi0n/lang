uses <math\base>
uses <math\complex>
uses <calls>
uses <graph>

enum Math.PlotType [ Math.Plot.Decart,
                     Math.Plot.Polar ]

int Math.Plot.DefScale -1

class Math.Plot:
  private:
    var MaxX, MaxY, StepsX,
        X0, Y0, DrawingInProcess

    proc DrawDecart,
         DrawPolar

    func OffsetX,
         OffsetY

  public:
    var scType, scScale

    proc Create

    proc Next,
         Function,
         Draw,
         Dot,
         Finish

  protected:
    proc NextPoint,
         NextPolar,
         BreakSpline
end

/*
 *  Math.Plot initialization:
 */

proc Math.Plot::DrawDecart():
  steps ?= $MaxX \ $scScale \ 2

  Graph.MoveTo($x0, 0)
  Graph.LineTo($x0, $MaxY)

  Graph.MoveTo(0, $y0)
  Graph.LineTo($MaxX, $y0)

  for(i ?= -steps; i < steps; i++):
    x ?= $x0 + $scScale * i
    Graph.MoveTo(x, $y0)
    Graph.LineTo(x, $y0 + 5)
    Graph.LineTo(x, $y0 - 5)

    y ?= $y0 + $scScale * i
    Graph.MoveTo($x0, y)
    Graph.LineTo($x0 + 5, y)
    Graph.LineTo($x0 - 5, y)
  end

  Graph.SetColor(Graph.Blue)

  Graph.MoveTo($x0 + 10, $y0 - $scScale)
  Graph.OutText(i2s(1))

  Graph.MoveTo($x0 + 10, $y0 + $scScale)
  Graph.OutText(i2s(-1))

  Graph.MoveTo($x0 + $scScale, $y0 + 10)
  Graph.OutText(i2s(1))

  Graph.MoveTo($x0 - $scScale, $y0 + 10)
  Graph.OutText(i2s(-1))

  Graph.MoveTo($x0 + 10, $y0 + 10)
  Graph.OutText(i2s(0))

  Graph.SetColor(Graph.Black)
end

proc Math.Plot::DrawPolar():
  steps ?= $MaxX \ $scScale \ 2

  Graph.MoveTo($x0, 0)
  Graph.LineTo($x0, $MaxY)

  Graph.MoveTo(0, $y0)
  Graph.LineTo($MaxX, $y0)

  Graph.SetColor(Graph.LightGray)
  for(i ?= 1; i < (steps + 4); i++):
    Graph.Ellipse($x0, $y0, 0, 360, $scScale * i, $scScale * i)
  end

  Graph.MoveTo($x0 - 2000, $y0 + 2000)
  Graph.LineTo($x0 + 2000, $y0 - 2000)

  Graph.MoveTo($x0 + 2000, $y0 + 2000)
  Graph.LineTo($x0 - 2000, $y0 - 2000)

  Graph.SetColor(Graph.Blue)

  Graph.MoveTo($x0 + 10, $y0 - $scScale)
  Graph.OutText(i2s(1))

  Graph.MoveTo($x0 + 10, $y0 + $scScale)
  Graph.OutText(i2s(-1))

  Graph.MoveTo($x0 + $scScale, $y0 + 10)
  Graph.OutText(i2s(1))

  Graph.MoveTo($x0 - $scScale, $y0 + 10)
  Graph.OutText(i2s(-1))

  Graph.MoveTo($x0 + 10, $y0 + 10)
  Graph.OutText(i2s(0))

  Graph.SetColor(Graph.Black)
end

proc Math.Plot::Create(scType, scScale):
  $scType ?= scType
  $scScale ?= if(scScale == Math.Plot.DefScale, 100, scScale)
  $DrawingInProcess ?= false

  Graph.Init()
  $MaxX ?= Graph.GetMaxX()
  $MaxY ?= Graph.GetMaxY()

  $stepsX ?= $MaxX \ $scScale \ 2 + 1

  $x0 ?= $MaxX \ 2
  $y0 ?= $MaxY \ 2

  switch $scType:
    case Math.Plot.Decart:
      $DrawDecart()
    end

    case Math.Plot.Polar:
      $DrawPolar()
    end

    else:
      raise new Exception("Math.Plot::Create() -> Invalid plot type!")
  end
end

/*
 *  X & Y coords offsets
 */

func Math.Plot::OffsetX(x):
  return $x0 + Trunc(x * $scScale)
end

func Math.Plot::OffsetY(y):
  return $y0 - Trunc(y * $scScale)
end

/*
 *  Drawing splains point by point
 */

proc Math.Plot::NextPoint(x, y):
  pX ?= $OffsetX(x)
  pY ?= $OffsetY(y)

  if $DrawingInProcess:
    Graph.LineTo(pX, pY)
  else:
    Graph.MoveTo(pX, pY)
    $DrawingInProcess = true
  end
end

proc Math.Plot::NextPolar(length, angle):
  vect ?= cm.uniteViaExp(length, angle)
  $NextPoint(vect -> Re, vect -> Im)
end

proc Math.Plot::BreakSpline():
  if $DrawingInProcess:
    $DrawingInProcess = false
    Graph.Ellipse(Graph.GetX(), Graph.GetY(), 0, 360, 4, 4)
  end
end

proc Math.Plot::Finish():
  $DrawingInProcess = false
end

proc Math.Plot::Next(i, res):
  switch $scType:
    case Math.Plot.Decart:
      $NextPoint(i, res)
    end

    case Math.Plot.Polar:
      $NextPolar(res, i)
    end

    else:
      raise new Exception("Math.Plot::Next() -> Invalid plot type!")
  end
end

proc Math.Plot::Dot(i, res):
  switch $scType:
    case Math.Plot.Decart:
      Graph.FillEllipse($OffsetX(i), $OffsetY(res), 2, 2)
    end

    case Math.Plot.Polar:
      cn ?= cm.uniteViaExp(i, res)
      Graph.FillEllipse($OffsetX(cn -> Re), $OffsetY(cn -> Im), 2, 2)
    end

    else:
      raise new Exception("Math.Plot::Next() -> Invalid plot type!")
  end
end

proc Math.Plot::Function(f, from, to, step):
  Function ?= new Method(f)

  first ?= true
  for(i ?= copy(from); i < to; i += step):
    try:
      r ?= Function -> call(i)
      if r == null:
        $BreakSpline()
      else:
        if $DrawingInProcess | first:
          first = false
          $Next(i, r)
        else:
          if ~first:
            $Next(i, r)
            Graph.Ellipse(Graph.GetX(), Graph.GetY(), 0, 360, 4, 4)
          end
        end
      end
    catch E: // Catching math exception
      $BreakSpline()
    end

    gc
  end

  $DrawingInProcess ?= false
end

proc Math.Plot::Draw(f):
  switch $scType:
    case Math.Plot.Decart:
      $Function(f, -$stepsX, $stepsX, 0.01)
    end

    case Math.Plot.Polar:
      $Function(f, 0, 90, 0.01)
    end

    else:
      raise new Exception("Math.Plot::Draw() - Invalid plot type!")
  end
end
