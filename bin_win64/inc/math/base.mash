// externals

import Sin    "lmath.lib" "SIN"
import Cos    "lmath.lib" "COS"
import Tg     "lmath.lib" "TG"
import Ctg    "lmath.lib" "CTG"
import ArcSin "lmath.lib" "ARCSIN"
import ArcCos "lmath.lib" "ARCCOS"
import ArcTg  "lmath.lib" "ARCTG"
import Log10  "lmath.lib" "LOG10"
import Log2   "lmath.lib" "LOG2"
import LogN   "lmath.lib" "LOGN"
import LNXP1  "lmath.lib" "LNXP1"
import Exp    "lmath.lib" "EXP"

// constants

real m_pi          3.14159265358979
real m_e           2.71828182845904

// some methods

func trunc(a):
  return a \ 1
end

func frac(a):
  return a - a \ 1
end

func round(a):
  return trunc(a + 0.5)
end

func ceil(a):
  return trunc(a + 0.9999)
end

func abs(a):
  if a > 0:
    return a
  else:
    return -a
  end
end

func Log(a):
  return LogN(m_e, a)
end

func Power(a, n):
  if n == 0:
    return 1
  else:
    if a == 0:
      return 0
    else:
      return Exp(Log(a) * n)
    end
  end
end

func IntPower(a, n):
  return Round(Power(a, n))
end

func Sqrt(a):
  if a >= 0:
    return Power(a, 0.5)
  else:
    return null
  end
end

func Factorial(a):
  r ?= 1

  for(i ?= 0; i < a; i++):
    r *= i + 1
  end

  return r
end

func hypot(w, h):
  return sqrt(w*w + h*h)
end

func radians(a):
  return a * (180 / m_pi)
end

func degrees(a):
  return a * (m_pi / 180)
end

// Hyperbolic functions

func sinh(a):
  return (Power(m_e, a) - Power(m_e, -a)) / 2
end

func cosh(a):
  return (Power(m_e, a) + Power(m_e, -a)) / 2
end

func cosech(a):
  return 1 / sinh(a)
end

func sech(a):
  return 1 / cosh(a)
end

func tgh(a):
  return sinh(a) / cosh(a)
end

func ctgh(a):
  return 1 / tgh(a)
end

func arcsinh(a):
  return Log(a + sqrt(a*a + 1))
end

func arccosh(a):
  return Log(a + sqrt(a*a - 1))
end

func arctgh(a):
  return Log( (1 + a) / (1 - a) ) / 2
end

func arcctgh(a):
  return Log( (a + 1) / (a - 1) ) / 2
end
