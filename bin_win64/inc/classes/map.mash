////////////////////////////////////////////////////////////////////////////////
//  Map
////////////////////////////////////////////////////////////////////////////////

uses <classes\list>
uses <classes\types>

class Map(class):
  protected:
    var Objects, Keys

  public:
    proc Create

    proc Add, Delete, DeleteAt, Clear
    func Get, At, KeyAt, IndexOf, KeyIndexOf, Size
end

proc Map::Create():
  $Objects ?= new list()
  $Keys ?= new list()
end


proc Map::Add(Obj, Key):
  $Objects -> Insert(Obj, $Keys -> NextIns(Key))
end

proc Map::Delete(Key):
  Indx ?= $Keys -> Find(Key)
  $Keys -> Delete(Indx)
  $Objects -> Delete(Indx)
end

proc Map::DeleteAt(Index):
  $Keys -> Delete(Index)
  $Objects -> Delete(Index)
end

proc Map::Clear():
  $Keys -> Clear()
  $Objects -> Clear()
end


func Map::Get(Key):
  return $Objects -> Items[$Keys -> Find(Key)]
end

func Map::At(Index):
  return $Objects -> Items[Index]
end

func Map::KeyAt(Index):
  return $Keys -> Items[Index]
end

func Map::IndexOf(Obj):
  return $Objects -> IndexOf(Obj)
end

func Map::KeyIndexOf(Key):
  return $Keys -> Find(Key)
end

func Map::Size():
  return copy($Keys -> Size)
end

////////////////////////////////////////////////////////////////////////////////
//  HashMap
////////////////////////////////////////////////////////////////////////////////

class HashMap(Map):
  public:
    proc Add
    func IndexOf
end

proc HashMap::Add(obj):
  Map::Add$(obj, obj -> GetHash())
end

func HashMap::IndexOf(obj):
  return $KeyIndexOf(obj -> GetHash())
end

////////////////////////////////////////////////////////////////////////////////
//  StringMap
////////////////////////////////////////////////////////////////////////////////

class StringMap(Map):
  public:
    proc Add
    func IndexOf
end

func GetStrHash(s):
  l ?= len(s)
  r ?= copy(l)
  for(i ?= 1; i <= l; i++):
    r = (r * i + l) ^ s[i]
  end
  return r
end

proc StringMap::Add(s):
  Map::Add$(s, GetStrHash(s))
end

func StringMap::IndexOf(s):
  return $KeyIndexOf(GetStrHash(s))
end
