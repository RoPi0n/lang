////////////////////////////////////////////////////////////////////////////////
// List
////////////////////////////////////////////////////////////////////////////////

uses <algs>
uses <sync>
uses <classes\types>

class List(class):
  protected:
    var Items

  public:
    var Size

    proc Create

    proc Add,
         Insert,
         Delete,
         Clear,
         ForEach

    func Get,
         IndexOf

    proc Sort

    func NextIns,
         Find
end


proc List::Create():
  $Items ?= new[0]
  $Size ?= 0
end


proc List::Add(Obj):
  SetLen($Items, $Size + 1)
  $Items[$Size] ?= Obj
  $Size++
end


proc List::Insert(Obj, Index):
  if ($Size < Index) | (Index < 0):
    raise "List index (" + Index + ") out of bounds."
  else:
    $Size++
    SetLen($Items, $Size)
    for(i ?= $Size - 1; i > Index; i--):
      $Items[i] ?= $Items[i - 1]
    end
    $Items[Index] ?= Obj
  end
end


proc List::Delete(Index):
  if ($Size <= Index) | (Index < 0):
    raise "List index (" + Index + ") out of bounds."
  else:
    $Size--
    for(; Index < $Size; Index++):
      $Items[Index] ?= $Items[Index + 1]
    end
    SetLen($Items, $Size)
  end
end


proc List::Clear():
  SetLen($Items, 0)
  $Size = 0
end


proc List::ForEach(method):
  i ?= 0
  while i < $Size:
    vcall(method, $Items[i])
    i++
  end
end


func List::Get(Index):
  return $Items[Index]
end


func List::IndexOf(Obj):
  if typeof(Obj) in [TypeArray, TypeClass]:
    p ?= @Obj
    for(i ?= 0; i < $Size; i++):
      if p == @$Items[i]:
        return i
      end
    end
  else:
    for(i ?= 0; i < $Size; i++):
      if Obj == $Items[i]:
        return i
      end
    end
  end
end

proc List::Sort():
  RadixSort($Items)
end

func List::NextIns(Obj):
  Indx ?= BinNext($Items, Obj)
  $Insert(Obj, Indx)
  return Indx
end

func List::Find(Obj):
  return BinSearch($Items, Obj)
end

////////////////////////////////////////////////////////////////////////////////
// ThreadList
////////////////////////////////////////////////////////////////////////////////

class ThreadList(List):
  private:
    var Locker

  protected:
    var Items, Size

  public:
    proc Create, Free

    proc Add, Insert, Delete, Clear, ForEach
    func Get, IndexOf

    proc Sort
    func NextIns, Find
end

proc ThreadList::Create():
  List::Create$()
  $Locker ?= new CriticalSection()
end

proc ThreadList::Free():
  $Locker->Free()
end

proc ThreadList::Add(Obj):
  $Locker->Enter()
  List::Add$(Obj)
  $Locker->Leave()
end


proc ThreadList::Insert(Obj, Index):
  $Locker->Enter()
  List::Insert$(Obj, Index)
  $Locker->Leave()
end


proc ThreadList::Delete(Index):
  $Locker->Enter()
  List::Delete$(Index)
  $Locker->Leave()
end


proc ThreadList::Clear():
  $Locker->Enter()
  List::Clear$()
  $Locker->Leave()
end


proc ThreadList::ForEach(method):
  $Locker->Enter()
  List::ForEach$(method)
  $Locker->Leave()
end


func ThreadList::Get(Index):
  $Locker->Enter()
  r ?= List::Get$(Index)
  $Locker->Leave()
  return r
end


func ThreadList::IndexOf(Obj):
  $Locker->Enter()
  r ?= List::IndexOf$(Obj)
  $Locker->Leave()
  return r
end

proc ThreadList::Sort():
  $Locker->Enter()
  List::Sort$()
  $Locker->Leave()
end

func ThreadList::NextIns(Obj):
  $Locker->Enter()
  r ?= List::NextIns$(Obj)
  $Locker->Leave()
  return r
end

func ThreadList::Find(Obj):
  $Locker->Enter()
  r ?= List::Find$(Obj)
  $Locker->Leave()
  return r
end
