/*
 *  Algs.mash
 *  That module contains implementation's of some algorithms.
 */

uses <bf>

proc ReverseArray(arr):
  l ?= len(arr)
  for (i ?= 0; i < len \ 2; i++):
    tmp ?= arr[l - i - 1]
    arr[l - i - 1] ?= arr[i]
    arr[i] ?= tmp
  end
end

func GetMax(arr, n):
  mx ?= arr[0]
  for (i ?= 1; i < n; i++):
    if arr[i] > mx:
      mx = arr[i]
    end
  end
  return mx
end

func GetMin(arr, n):
  mn ?= arr[0]
  for (i ?= 1; i < n; i++):
    if arr[i] < mn:
      mn = arr[i]
    end
  end
  return mn
end

/*
 *  Quick sorting algorithm implementation.
 */

proc FromToQSort(arr, left, right):
  i ?= left
  j ?= right
  pivot ?= arr[(left + right) \ 2]

  while i < (j + 1):
    while arr[i] < pivot:
      i++
    end

    while arr[j] > pivot:
      j--
    end

    if i < (j + 1):
      tmp ?= arr[i]
      arr[i] ?= arr[j]
      arr[j] ?= tmp
      i++
      j--
    end
  end

  if left < j:
    safe FromToQSort(arr, left, j)
  end

  if i < right:
    safe FromToQSort(arr, i, right)
  end
end

proc QuickSort(arr):
  FromToQSort(arr, 0, len(arr) - 1)
end

/*
 *  Multithreaded Quick sorting algorithm implementation.
 */

proc FromToThrQSort(arr, left, right, lvl, maxlvl):
  i ?= left
  j ?= right
  pivot ?= arr[(left + right) \ 2]

  while i < (j + 1):
    while arr[i] < pivot:
      i++
    end

    while arr[j] > pivot:
      j--
    end

    if i < (j + 1):
      tmp ?= arr[i]
      arr[i] ?= arr[j]
      arr[j] ?= tmp
      i++
      j--
    end
  end

  if lvl < maxlvl:
    async ThrL:
      if left < j:
        FromToThrQSort(arr, copy(left), copy(j), lvl + 1, maxlvl)
      end
    end


    async ThrR:
      if i < right:
        FromToThrQSort(arr, copy(i), copy(right), lvl + 1, maxlvl)
      end
    end

    wait ThrL, ThrR
  else:
    if left < j:
      safe FromToThrQSort(arr, left, j, lvl, maxlvl)
    end

    if i < right:
      safe FromToThrQSort(arr, i, right, lvl, maxlvl)
    end
  end
end

proc ThrQuickSort(arr, maxthr):
  FromToThrQSort(arr, 0, len(arr) - 1, 0, maxthr \ 2)
end

/*
 *  Heap sorting algorithm implementation.
 */

proc HeapSortTo(arr, n):
  i ?= n / 2

  while true:
    if i > 0:
      i--
      t ?= arr[i]
    else:
      n--
      if n == 0:
        exit
      end
      t ?= arr[n]
      arr[n] ?= arr[0]
    end

    parent ?= i
    child ?= i * 2 + 1

    while child < n:
      if (child + 1 < n) & (arr[child + 1] > arr[child]):
        child++
      end

      if arr[child] > t:
        arr[parent] ?= arr[child]
        parent ?= child
        child ?= parent * 2 + 1
      else:
        break
      end
    end
    arr[parent] ?= t
  end
end

proc HeapSort(arr):
  HeapSortTo(arr, len(arr) - 1)

  n ?= len(arr) - 1
  t ?= arr[n]
  for (i ?= n; i > 0; i--):
    arr[i] ?= arr[i - 1]
  end
  arr[0] ?= t
end

/*
 *  Radix sort
 */

proc CountSort(arr, n, e):
  output ?= new[n]
  count ?= new[10]

  for (i ?= 0; i < 10; i++):
    count[i] ?= 0
  end

  for (i = 0; i < n; i++):
    count[(arr[i] \ e) % 10]++
  end

  for (i = 1; i < 10; i++):
    count[i] += count[i - 1]
  end

  for (i = n - 1; i >= 0; i--):
    output[count[(arr[i] \ e) % 10] - 1] ?= arr[i]
    count[(arr[i] \ e) % 10]--
  end

  for (i = 0; i < n; i++):
    arr[i] ?= output[i]
  end
end

proc RadixSort(arr):
  n ?= len(arr)
  m ?= getMax(arr, n)

  for (e ?= 1; m \ e > 0; e *= 10):
    CountSort(arr, n, e)
  end
end

/*
 *  Binary search
 */

func FromToBinSearch(arr, left, right, key):
  while true:
    midd ?= (left + right) \ 2

    if key < arr[midd]:
      right ?= midd - 1
    else:
      if key > arr[midd]:
        left ?= midd + 1
      else:
        return midd
      end
    end

    if left > right:
      return -1
    end
  end
end

func BinSearch(arr, key):
  l ?= len(arr)
  if l > 0:
    return FromToBinSearch(arr, 0, l - 1, key)
  else:
    return -1
  end
end

func FromToBinNext(arr, left, right, key):
  while true:
    midd ?= (left + right) \ 2

    if key < arr[midd]:
      right ?= midd - 1
    else:
      if key > arr[midd]:
        left ?= midd + 1
      else:
        return midd
      end
    end

    if left > right:
      return midd
    end
  end
end

func BinNext(arr, key):
  l ?= len(arr)
  if l > 0:
    r ?= FromToBinNext(arr, 0, l - 1, key)
    if arr[r] > key:
      return r
    else:
      return r + 1
    end
  else:
    return 0
  end
end

/*
 * Interpolar search
 */

func FromToInterpolarSearch(arr, left, right, key):
  pos ?= 0
  found ?= false

  while (arr[left] < key) & (arr[right] > key) & (~found):

    pos = left + ( (key - arr[left]) * (right - left) ) /
                   (arr[right] - arr[left])

    if arr[pos] < key:
      left = pos + 1
    else:
      if arr[pos] > key:
        right = pos - 1
      else:
        found = true
      end
    end
  end

  if found:
    return pos
  else:
    return -1
  end
end

func InterpolarSearch(arr, key):
  l ?= len(arr)
  if l > 0:
    return FromToInterpolarSearch(arr, 0, l - 1, key)
  else:
    return -1
  end
end
