/*
 *  This class should analyse code
 */

class LocalVarVisor:
  var vars, varname, deleteit
  proc create
end

proc LocalVarVisor::Create(vars, varname, deleteit):
  $vars ?= vars
  $varname ?= varname
  $deleteit ?= deleteit
end


class MashSEM:
  protected:
    var astl,            // list with ast
        impl, imp_names, // for imports checking
        methods,         // list with methods
        methods_names,   // list with method names
        cmethod_names,   // also for class methods
        global,

        const_lst,
        const_names,

        global_vars,

        classes,
        cnames,
        vtable,

        max_class_parents

  public:
    proc Create,
         Process

  private:
    var LazyChk, LazySwap

    proc CheckNext,
         NextNode
end

proc MashSEM::Create(imp_lst, ast_lst, const_lst):
  $impl ?= imp_lst
  $astl ?= ast_lst

  $imp_names ?= new list()
  $methods ?= new list()
  $methods_names ?= new list()
  $cmethod_names ?= new list()
  $global ?= new list()

  $global_vars ?= new list()

  $const_lst ?= const_lst
  $const_names ?= new list()

  $LazyChk ?= new list()
  $LazySwap ?= new list()

  $classes ?= new list()
  $cnames ?= new list()
  $vtable ?= new list()

  $max_class_parents ?= 0
end

proc MashSEM::Process():
  for ib in $impl -> items:
    $imp_names -> add(ib -> method_name)
  end

  for cn in $const_lst -> items:
    $const_names -> add(cn -> Name)
  end

  for ast in $astl -> items:
    while ast -> nodes -> count() > 0:
      n ?= ast -> nodes -> get(0)
      ast -> nodes -> delete(0)

      switch n -> type:
        case MashASTB_Class:
          $classes -> add(n)
          $cnames -> add(n -> name)
          $const_names -> add(n -> name)
        end

        case MashASTB_Method:
          $methods -> add(n)

          if n -> is_class_method:
            $cmethod_names -> add(n -> method_name)
          else:
            $methods_names -> add(n -> method_name)
          end

          for impn in $imp_names -> items:
            if impn == n -> method_name:
              raise new Exception("Import and method can't have equal names '" + impn +
                                  "', at line " + (n -> line + 1) " at file '" +
                                  n -> fp + "'.")
            end
          end
        end

        else:
          $global -> add(n)
      end
    end
  end

  // Filling vtable
  $vtable -> add("type")
  for cl in $classes -> items:
    for v in cl -> vars -> items:
      if $vtable -> IndexOf(v) == null:
        $vtable -> add(v)
      end
    end
  end

  for cm in $cmethod_names -> items:
    if $vtable -> IndexOf(cm) == null:
      $vtable -> add(cm)
    end
  end

  for m in $methods -> items:
    if m -> is_class_method:
      assigned ?= false
      for cl in $classes -> items:
        if m -> class_name == cl -> name:
          assigned = true
          ref_assigned ?= false

          for mr in cl -> methods -> items:
            if m -> method_name == mr -> name:
              ref_assigned = true
              mr -> reference ?= m -> class_name + "__" + m -> method_name
              break
            end
          end

          if ~ref_assigned:
            cl -> methods -> add(new MashClassMethodRef(m -> method_name, m -> class_name + "__" + m -> method_name))
          end

          break
        end
      end

      if ~assigned:
        raise new Exception("Method " + m -> class_name + "::" + m -> method_name +
                            " can't be assigned to any class.")
      end
    end
  end

  // Checking & linking parents of every class (static polymorphism)
  for cl in $classes -> items:
    l ?= cl -> parents -> count()
    if l > $max_class_parents:
      $max_class_parents = l
    end
  end

  l ?= 1
  while l <= $max_class_parents:
    for cl in $classes -> items:
      if cl -> parents -> count() == l:
        for parent_name in cl -> parents -> items:
          parent_founded ?= false
          for parent_cl in $classes -> items:
            if parent_cl -> name == parent_name:
              parent_founded = true

              for pm in parent_cl -> methods -> items:
                method_exists ?= false
                for clm in cl -> methods -> items:
                  if pm -> name == clm -> name:
                    method_exists = true
                    break
                  end
                end

                if ~method_exists:
                  cl -> methods -> add(new MashClassMethodRef(pm -> name, pm -> reference))
                end
              end

              break
            end
          end

          if ~parent_founded:
            raise new Exception("Can't extend class '" + cl -> name + "' using class '" +
                                parent_name + "' because last not declarated.")
          end
        end
      end
    end
    l++
  end

  // Making constants from every common vtable item
  for v in $vtable -> items:
    $const_names -> add("vtable__" + v)
  end

  // Checking global code and methods for variables
  for g in $global -> items:
    $CheckNext(g, $global_vars, true)
  end

  for m in $methods -> items:
    m -> varlist -> add("this")
    $CheckNext(m, m -> varlist, false)
  end
end

proc MashSEM::CheckNext(node, vars, isGlobal):
  $NextNode(node, vars, isGlobal)

  whilst ($LazyChk -> Count() > 0) | ($LazySwap -> Count() > 0):
    if $LazyChk -> Count() > 0:
      n ?= $LazyChk -> get(0)
      $LazyChk -> delete(0)

      for i back $LazyChk -> Items:
        $LazySwap -> Insert(i, 0)
      end
      $LazyChk -> Clear()

      $NextNode(n, vars, isGlobal)
    else:
      if $LazySwap -> Count() > 0:
        n ?= $LazySwap -> get(0)
        $LazySwap -> delete(0)
        $NextNode(n, vars, isGlobal)
      end
    end

    gc()
  end
end

proc MashSEM::NextNode(node, vars, isGlobal):
  switch node -> type:
    case LocalVarVisor:
      if node -> deleteit:
        node -> vars -> delete(node -> vars -> indexof(node -> varname))
      else:
        node -> vars -> add(node -> varname)
      end
    end

    case MashASTE_Operation:
      //$LazyChk -> Add(node -> A)
    end

    case MashASTE_OperationLR:
      if node -> Op -> Op -> value == "?=":
        $LazyChk -> Add(node -> L)
      end
    end

    case MashASTP_SimpleObject:
      switch node -> Obj -> info:
        case ttDigit:

        end

        case ttString:

        end

        case ttWord:
          // Checking for var/not var
          if ($const_names -> IndexOf(node -> Obj -> value) == null) &
             ($methods_names -> IndexOf(node -> Obj -> value) == null) &
             ($cmethod_names -> IndexOf(node -> Obj -> value) == null) &
             ($imp_names -> IndexOf(node -> Obj -> value) == null) &
             ($global_vars -> IndexOf(node -> Obj -> value) == null):
            if vars -> IndexOf(node -> Obj -> value) == null:
              vars -> add(node -> Obj -> value)
            end
          end
        end
      end
    end

    case MashASTP_SpecRectObject:
      if ($const_names -> IndexOf(node -> Obj -> value) == null) &
         ($methods_names -> IndexOf(node -> Obj -> value) == null) &
         ($cmethod_names -> IndexOf(node -> Obj -> value) == null) &
         ($imp_names -> IndexOf(node -> Obj -> value) == null):
        if vars -> IndexOf(node -> Obj -> value) == null:
          vars -> add(node -> Obj -> value)
        end
      else:
        raise new Exception("Invalid expression '" + node -> Obj -> value + "'")
      end
    end

    case MashASTP_ObjectByRef:
    end

    case MashASTP_IndexedObject:
    end

    case MashASTP_Call:
    end

    case MashASTP_Enum:
    end

    case MashExpressionAST:
      $LazyChk -> Add(node -> treeNode)
    end

    /*
     *  Constructions
     */
    case MashASTB_Method:
      for p in node -> params -> items:
        $LazyChk -> Add(p)
      end

      for n in node -> nodes -> items:
        $LazyChk -> Add(n)
      end
    end

    case MashASTB_If:
      for n in node -> Nodes -> items:
        $LazyChk -> Add(n)
      end

      for n in node -> NodesElse -> items:
        $LazyChk -> Add(n)
      end
    end

    case MashASTB_While:
      for n in node -> Nodes -> items:
        $LazyChk -> Add(n)
      end
    end

    case MashASTB_Whilst:
      for n in node -> Nodes -> items:
        $LazyChk -> Add(n)
      end
    end

    case MashASTB_ForEach:
      if ($const_names -> IndexOf(node -> forVar -> value) == null) &
         ($methods_names -> IndexOf(node -> forVar -> value) == null) &
         ($cmethod_names -> IndexOf(node -> forVar -> value) == null) &
         ($imp_names -> IndexOf(node -> forVar -> value) == null):
        if vars -> IndexOf(node -> forVar -> value) == null:
          $LazyChk -> Add(new LocalVarVisor(vars, node -> forVar -> value, false))
        end
      else:
        raise new Exception("Invalid expression '" + node -> forVar -> value + "'")
      end

      for n in node -> Nodes -> items:
        $LazyChk -> Add(n)
      end

      $LazyChk -> Add(new LocalVarVisor(vars, node -> forVar -> value, true))
    end

    case MashASTB_Switch:
      for n in node -> Nodes -> items:
        $LazyChk -> Add(n)
      end

      if node -> hasElse:
        for n in node -> caseElse -> Nodes -> items:
          $LazyChk -> Add(n)
        end
      end
    end

    case MashASTB_Case:
      for n in node -> Nodes -> items:
        $LazyChk -> Add(n)
      end
    end

    case MashASTB_Launch:
      for n in node -> Nodes -> items:
        $LazyChk -> Add(n)
      end
    end

    case MashASTB_Async:
      if ($const_names -> IndexOf(node -> forVar) <> null) |
         ($methods_names -> IndexOf(node -> forVar) <> null) |
         ($cmethod_names -> IndexOf(node -> forVar) <> null) |
         ($imp_names -> IndexOf(node -> forVar) <> null) |
         (vars -> IndexOf(node -> forVar) <> null):
        raise new Exception("Invalid expression '" + node -> forVar + "'")
      end

      for n in node -> Nodes -> items:
        $LazyChk -> Add(n)
      end
    end

    case MashASTB_Return:
    end

    case MashASTB_Try:
      if node -> hasCatch:
        if ($const_names -> IndexOf(node -> forVar -> value) == null) &
           ($methods_names -> IndexOf(node -> forVar -> value) == null) &
           ($cmethod_names -> IndexOf(node -> forVar -> value) == null) &
           ($imp_names -> IndexOf(node -> forVar -> value) == null):
          if vars -> IndexOf(node -> forVar -> value) == null:
            $LazyChk -> Add(new LocalVarVisor(vars, node -> forVar, false))
          end
        else:
          raise new Exception("Invalid expression '" + node -> forVar -> value + "'")
        end
      end
    end
  end
end
