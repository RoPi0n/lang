/*
 *  This class should analyse code
 */

class MashSEM:
  protected:
    var astl,            // list with ast
        impl, imp_names, // for imports checking
        methods,         // list with methods
        methods_names,   // list with method names
        cmethod_names,   // also for class methods
        global,

        const_lst,
        const_names,

        global_vars

  public:
    proc Create,
         Process

  private:
    var LazyChk, LazySwap

    proc CheckNext,
         NextNode
end

proc MashSEM::Create(imp_lst, ast_lst, const_lst):
  $impl ?= imp_lst
  $astl ?= ast_lst

  $imp_names ?= new list()
  $methods ?= new list()
  $methods_names ?= new list()
  $cmethod_names ?= new list()
  $global ?= new list()

  $global_vars ?= new list()

  $const_lst ?= const_lst
  $const_names ?= new list()

  $LazyChk ?= new list()
  $LazySwap ?= new list()
end

proc MashSEM::Process():
  for ib in $impl -> items:
    $imp_names -> add(ib -> method_name)
  end

  for cn in $const_lst -> items:
    $const_names -> add(cn -> Name)
  end

  for ast in $astl -> items:
    while ast -> nodes -> count() > 0:
      n ?= ast -> nodes -> get(0)
      ast -> nodes -> delete(0)

      if n -> type == MashASTB_Method:
        $methods -> add(n)

        if n -> is_class_method:
          $cmethod_names -> add(n -> method_name)
        else:
          $methods_names -> add(n -> method_name)
        end

        for impn in $imp_names -> items:
          if impn == n -> method_name:
            raise new Exception("Import and method can't have equal names '" + impn +
                                "', at line " + (n -> line + 1) " at file '" +
                                n -> fp + "'.")
          end
        end
      else:
        $global -> add(n)
      end
    end
  end

  for g in $global -> items:
    $CheckNext(g, $global_vars)
  end

  for m in $methods -> items:
    $CheckNext(m, m -> varlist)
  end
end

proc MashSEM::CheckNext(node, vars):
  $NextNode(node, vars)

  whilst ($LazyChk -> Count() > 0) | ($LazySwap -> Count() > 0):
    if $LazyChk -> Count() > 0:
      n ?= $LazyChk -> get(0)
      $LazyChk -> delete(0)

      for i back $LazyChk -> Items:
        $LazySwap -> Insert(i, 0)
      end
      $LazyChk -> Clear()

      $NextNode(n, vars)
    else:
      if $LazySwap -> Count() > 0:
        n ?= $LazySwap -> get(0)
        $LazySwap -> delete(0)
        $NextNode(n, vars)
      end
    end

    gc()
  end
end

proc MashSEM::NextNode(node, vars):
  switch node -> type:
    case MashASTE_Operation:

    end

    case MashASTE_OperationLR:
      $LazyChk -> Add(node -> R)
      $LazyChk -> Add(node -> L)
    end

    case MashASTP_SimpleObject:
      switch node -> Obj -> info:
        case ttDigit:

        end

        case ttString:

        end

        case ttWord:
          // Checking for var/not var
          if ($const_names -> IndexOf(node -> Obj -> value) == null) &
             ($methods_names -> IndexOf(node -> Obj -> value) == null) &
             ($cmethod_names -> IndexOf(node -> Obj -> value) == null) &
             ($imp_names -> IndexOf(node -> Obj -> value) == null):
            if vars -> IndexOf(node -> Obj -> value) == null:
              vars -> add(node -> Obj -> value)
            end
          end
        end
      end
    end

    case MashASTP_SpecRectObject:
      if ($const_names -> IndexOf(node -> Obj -> value) == null) &
         ($methods_names -> IndexOf(node -> Obj -> value) == null) &
         ($cmethod_names -> IndexOf(node -> Obj -> value) == null) &
         ($imp_names -> IndexOf(node -> Obj -> value) == null):
        if vars -> IndexOf(node -> Obj -> value) == null:
          vars -> add(node -> Obj -> value)
        end
      end
    end

    case MashASTP_ObjectByRef:
    end

    case MashASTP_IndexedObject:
    end

    case MashASTP_Call:
      for arg in node -> args -> objects -> items:
        $LazyChk -> Add(arg)
      end
    end

    case MashASTP_Enum:
      for n in node -> Objects -> items:
        $LazyChk -> Add(n)
      end
    end

    case MashExpressionAST:
      $LazyChk -> Add(node -> treeNode)
    end

    /*
     *  Constructions
     */
    case MashASTB_Method:
      for p in node -> params -> items:
        $LazyChk -> Add(p)
      end

      for n in node -> nodes -> items:
        $LazyChk -> Add(n)
      end
    end

    case MashASTB_If:
      $LazyChk -> Add(node -> Expr)
      for n in node -> Nodes -> items:
        $LazyChk -> Add(n)
      end

      for n in node -> NodesElse -> items:
        $LazyChk -> Add(n)
      end
    end

    case MashASTB_While:
      $LazyChk -> Add(node -> Expr)
      for n in node -> Nodes -> items:
        $LazyChk -> Add(n)
      end
    end
  end
end
