uses <classes\stringlist>
uses "gen\svm\gen_types.mash"

/*
 *  Code generation for SVM
 */

class GeneratorSVM:
  protected:
    var Sem, Out,
        GCN,  // Generated construction number

        LazyGen,
        LazyGenSwap,

        BPStack, CPStack

  public:
    proc Create
    func Gen

  private:
    var  CallingLvl

    proc ProcessNext,
         NextNode,
         LazyGenCode

    proc GenHeader,
         GenFinallyCode

    func GenOperation

    func GenMethodHeader
    proc GenMethodEnd,
         GenArrayOp,
         GenArrayAlloc,
         GenRefOp
end

proc GeneratorSVM::Create():
  $GCN ?= 0
  $Out ?= new StringList()
  $LazyGen ?= new list()
  $LazyGenSwap ?= new list()

  $CallingLvl ?= 0
  $BPStack ?= new vector() // stack for labels for operator break
  $CPStack ?= new vector() // stack for labels for operator continue
end

func GeneratorSVM::Gen(Sem):
  $Sem ?= Sem

  for imp in Sem -> Impl -> items:
    $Out -> Add("import " + imp -> method_name + " " +
                DQuote + imp -> lib + DQuote + " " +
                DQuote + imp -> name + DQuote)

    gc()
  end

  for imp in Sem -> regapi_lst -> items:
    $Out -> Add("api " + imp -> method_name + " " + imp -> number)
  end

  $GenHeader()

  for g in Sem -> Global -> items:
    $ProcessNext(g, null, "")
    gc()
  end

  for m in Sem -> Methods -> items:
    mname ?= $GenMethodHeader(m)
    $ProcessNext(m, m -> varlist, mname)
    $GenMethodEnd(m, mname)
    gc()
  end

  $GenFinallyCode()

  return $Out
end

proc GeneratorSVM::LazyGenCode(code):
  $LazyGen -> Add( new PreGenerated(code) )
end

/*
 *  Generating headers or something like this
 */
proc GeneratorSVM::GenHeader():
  for ct in $Sem -> const_lst -> items:
    if ct -> isStream:
      $Out -> Add("stream " + ct -> Name + " " + DQuote + ct -> Value -> value + DQuote)
    else:
      if ct -> value -> info == ttString:
        $Out -> Add("str " + ct -> Name + " " + DQuote + ct -> Value -> value + DQuote)
      else:
        if "." in ct -> value -> value:
          $Out -> Add("real " + ct -> Name + " " + ct -> Value -> value)
        else:
          if "-" in ct -> value -> value:
            $Out -> Add("int " + ct -> Name + " " + ct -> Value -> value)
          else:
            $Out -> Add("word " + ct -> Name + " " + ct -> Value -> value)
          end
        end
      end
    end
  end

  i ?= 0
  for v in $Sem -> vtable -> items:
    $Out -> Add("word vtable__" + v + " " + i)
    i++
  end

  $Out -> Add("@global.arg_counter")
  $Out -> Add("@global.temp")
  $Out -> Add("@global.this")

  $Out -> Add("word global.zero 0")
  $Out -> Add("word global.one 1")
  $Out -> Add("str global.raised " + DQuote + "ERaisedException" + DQuote)

  $Out -> Add("pushc global.zero")
  $Out -> Add("peek global.arg_counter")
  $Out -> Add("pop")

  for gv in $Sem -> global_vars -> items:
    $Out -> Add("@" + gv)
  end

  i = 0
  for cn in $Sem -> cnames -> items:
    $Out -> Add("word " + cn + " " + (i + 8))   // 8 - offset for typeof func
    $Out -> Add("@structure_instance_" + cn)
    $Out -> Add("pushcp __allocator__" + cn)
    $Out -> Add("jc")
    $Out -> Add("peek structure_instance_" + cn)
    $Out -> Add("pop")
    i++
  end

  $Out -> Add("pushcp __init__")
  $Out -> Add("jc")

  // Enums
  for e in $Sem -> enums -> items:
    $Out -> Add("@" + e -> name)

    $Out -> Add("word generator.const.gcn." + $gcn + " " + e -> Objects -> count())
    $Out -> Add("pushcp generator.const.gcn." + $gcn)
    $Out -> Add("pushcp global.one")
    $Out -> Add("newa")
    $Out -> Add("peek " + e -> name)
    $gcn++

    i = 0
    for ei in e -> Objects -> Items:
      if ei -> hasDefValue:
        if ei -> DefValue -> info == ttDigit:
          if "." in ei -> DefValue -> value:
            $Out -> Add("real " + ei -> name + " " + ei -> DefValue -> value)
          else:
            if "-" in ei -> DefValue -> value:
              $Out -> Add("int " + ei -> name + " " + ei -> DefValue -> value)
            else:
              $Out -> Add("word " + ei -> name + " " + ei -> DefValue -> value)
            end
          end
        else:
          $Out -> Add("str " + ei -> name + " " + DQuote +
                      ei -> DefValue -> value + DQuote)
        end
      else:
        $Out -> Add("word " + ei -> name + " " + i)
      end

      $Out -> Add("pcopy")
      $Out -> Add("pushc " + ei -> name)
      $Out -> Add("swp")
      $Out -> Add("word generator.const.gcn." + $gcn + " " + i)
      $Out -> Add("pushcp generator.const.gcn." + $gcn)
      $gcn++
      $Out -> Add("swp")
      $Out -> Add("peekai")

      i++
    end

    $Out -> Add("pop")
  end
end

proc GeneratorSVM::GenFinallyCode():
  if $Sem -> methods_names -> IndexOf("main") <> null:
    $Out -> Add("pushcp main")
    $Out -> Add("jc")
  end

  $Out -> Add("word __vtable__size__ " + $Sem -> vtable -> count())

  // Generating classes allocators
  for cl in $Sem -> classes -> items:
    $Out -> Add("pushcp __allocator__" + cl -> name + "__end")
    $Out -> Add("jp")
    $Out -> Add("__allocator__" + cl -> name + ":")

    $Out -> Add("pushcp __vtable__size__")
    $Out -> Add("pushcp global.one")
    $Out -> Add("newa")
    $Out -> Add("typemarkclass")

    $Out -> Add("pcopy")
    $Out -> Add("pushc " + cl -> name)
    $Out -> Add("swp")
    $Out -> Add("pushcp vtable__type")
    $Out -> Add("swp")
    $Out -> Add("peekai")

    // Methods table
    for m in cl -> methods -> items:
      $Out -> Add("pcopy")
      $Out -> Add("pushc " + m -> reference)
      $Out -> Add("swp")
      $Out -> Add("pushcp vtable__" + m -> name)
      $Out -> Add("swp")
      $Out -> Add("peekai")
    end

    $Out -> Add("jr")
    $Out -> Add("__allocator__" + cl -> name + "__end:")
  end
end

func GeneratorSVM::GenMethodHeader(m):
  mname ?= ""
  if m -> is_class_method:
    mname += m -> class_name + "__"
  end

  mname += m -> method_name

  $Out -> Add("pushcp " + mname + "__end")
  $Out -> Add("jp")
  $Out -> Add(mname + ":")

  for v in m -> varlist -> items:
    $Out -> Add("@" + mname + "." + v)
  end

  pcnt ?= 0
  err ?= false
  for p in m -> params -> items:
    if err:
      raise new Exception("Invalid method '" + mname + "' declaration at line " +
                          (m -> line + 1) + " at file '" + m -> fp + "'.")
    end

    switch p -> type:
      case MashASTP_SimpleObject:
        $Out -> Add("peek " + mname + "." + p -> Obj -> Value)
        $Out -> Add("pop")
        pcnt++
      end

      case MashASTP_SpecRectObject:
        $Out -> Add("word generator.const.gcn." + $gcn + " " + pcnt)
        $Out -> Add("pushcp generator.const.gcn." + $gcn)
        $Out -> Add("push global.arg_counter")
        $Out -> Add("sub")
        $Out -> Add("pushcp system_op_argsarr")
        $Out -> Add("jc")
        $Out -> Add("peek " + mname + "." + p -> Obj -> Value)
        $Out -> Add("pop")
        err = true
        $gcn++
      end
    end
  end

  if m -> is_class_method:
    $Out -> Add("push global.this")
    $Out -> Add("peek " + mname + ".this")
    $Out -> Add("pop")
  end

  return mname
end

proc GeneratorSVM::GenMethodEnd(m, mname):
  $Out -> Add("jr")
  $Out -> Add(mname + "__end:")
end

/*
 *  Generating code (main loop's)
 */
proc GeneratorSVM::ProcessNext(node, vars, mname):
  $NextNode(node, vars, mname)

  whilst ($LazyGen -> Count() > 0) | ($LazyGenSwap -> Count() > 0):
    if $LazyGen -> Count() > 0:
      n ?= $LazyGen -> get(0)
      $LazyGen -> delete(0)

      for i back $LazyGen -> Items:
        $LazyGenSwap -> Insert(i, 0)
      end
      $LazyGen -> Clear()

      $NextNode(n, vars, mname)
    else:
      if $LazyGenSwap -> Count() > 0:
        n ?= $LazyGenSwap -> get(0)
        $LazyGenSwap -> delete(0)
        $NextNode(n, vars, mname)
      end
    end

    gc()
  end
end



/*
 *  Generating code for constructions & expressions
 */
proc GeneratorSVM::NextNode(node, vars, mname):
  switch node -> type:
    case CallBegin:
      $CallingLvl++
    end

    case CallEnd:
      $CallingLvl--
    end

    case PreGenerated:
      $Out -> Add(node -> code)
    end

    case PreGeneratedSet:
      for pg in node -> items:
        $Out -> Add(pg -> code)
      end
    end

    case BreakPoint:
      $BPStack -> push_back(node -> PointLabel)
    end

    case PopBreakPoint:
      $BPStack -> pop_back()
    end

    case ContinuePoint:
      $CPStack -> push_back(node -> PointLabel)
    end

    case PopContinuePoint:
      $CPStack -> pop_back()
    end

    case LocalVarVisor:
      if node -> deleteit:
        node -> vars -> delete(node -> vars -> indexof(node -> varname))
      else:
        node -> vars -> add(node -> varname)
      end
    end

    case MashASTB_Inline:
      $Out -> Add(node -> val)
    end

    case MashASTE_Operation:
      if node -> Op -> Op -> value == "new":
        switch node -> A -> type:
          case MashASTP_SimpleObject:
            if node -> A -> Obj -> info == ttWord:
              cn ?= node -> A -> Obj -> value
              if $Sem -> cnames -> IndexOf(cn) <> null:
                $LazyGenCode("pushcp __allocator__" + cn)
                $LazyGenCode("jc")
              else:
                raise new Exception("Invalid class allocation using operator new." + LnBreak +
                                    "Class '" + cn + "' not declarated.")
              end
            else:
              raise new Exception("Invalid class allocation using operator new." + LnBreak +
                                  "'" + node -> A -> Obj -> value + "' not a class name.")
            end
          end

          case MashASTP_Call:
            if node -> A -> Obj -> type == MashASTP_SimpleObject:
              if node -> A -> Obj -> Obj -> info == ttWord:
                cn ?= node -> A -> Obj -> Obj -> value
                if $Sem -> cnames -> IndexOf(cn) <> null:
                  $LazyGenCode("pushcp __allocator__" + cn)
                  $LazyGenCode("jc")
                  $LazyGenCode("pcopy")
                  $LazyGenCode("peek global.this")

                  for arg back node -> A -> args -> objects -> items:
                    $LazyGen -> Add(arg)
                    $LazyGenCode("swp")
                  end

                  $LazyGenCode("pushcp vtable__create")
                  $LazyGenCode("swp")
                  $LazyGenCode("pushai")

                  $LazyGenCode("word generator.const.gcn." + $gcn + " " +
                               node -> A -> args -> objects -> count())
                  $LazyGenCode("pushcp generator.const.gcn." + $gcn)
                  $LazyGenCode("push global.arg_counter")
                  $LazyGenCode("mov")
                  $gcn++

                  $LazyGenCode("jc")
                else:
                  raise new Exception("Invalid class allocation using operator new." + LnBreak +
                                      "Class '" + cn + "' not declarated.")
                end
              else:
                raise new Exception("Invalid class allocation using operator new." + LnBreak +
                                    "'" + node -> A -> Obj -> Obj -> value + "' not a class name.")
              end
            else:
              raise new Exception("Invalid class allocation using operator new.")

            end
          end
        end
      else:
        $LazyGen -> Add(node -> A)
        $LazyGen -> Add($GenOperation(node -> Op -> Op -> value, false))
      end
    end

    case MashASTE_OperationLR:
      if node -> Op -> Op -> value == "?=":
        switch node -> L -> type:
          case MashASTP_SimpleObject:
            if vars == null:
              vars_lst ?= $Sem -> global_vars
            else:
              vars_lst ?= vars
            end

            if (vars_lst -> IndexOf(node -> L -> Obj -> value) <> null) |
               ($Sem -> global_vars -> IndexOf(node -> L -> Obj -> value) <> null):

              if node -> R -> type == MashASTE_OperationLR:
                $LazyGen -> Add(node -> R)
              else:
                $LazyGen -> Add(node -> R)
              end

              if (mname <> "") & (vars_lst -> IndexOf(node -> L -> Obj -> value) <> null):
                $LazyGen -> Add(new PreGenerated("peek " + mname + "." + node -> L -> Obj -> value))
              else:
                $LazyGen -> Add(new PreGenerated("peek " + node -> L -> Obj -> value))
              end
              $LazyGen -> Add(new PreGenerated("pop"))
            else:
              raise new Exception("Invalid assigment for " + node -> L -> Obj -> value)
            end
          end

          case MashASTP_IndexedObject:
            $LazyGen -> Add(node -> R)
            $GenArrayOp(node -> L -> Obj, node -> L -> Indexes -> Objects, "peekai")
          end

          case MashASTP_ObjectByRef:
            $LazyGen -> Add(node -> R)
            $GenRefOp(node -> L -> ObjPath, "peekai")
          end
        end
      else:
        if node -> Op -> Op -> value == ".":
          if node -> R -> type == MashASTP_Call:
            node -> R -> Args -> Objects -> Insert(node -> L, 0)
            $LazyGen -> Add(node -> R)
          else:
            raise new Exception("Invalid operations with '.'!")
          end
        else:
          $LazyGen -> Add(node -> R)
          $LazyGen -> Add(node -> L)
          $LazyGen -> Add($GenOperation(node -> Op -> Op -> value, true))
        end
      end
    end

    case MashASTP_SimpleObject:
      switch node -> Obj -> info:
        case ttDigit:
          if "." in node -> Obj -> value:
            $Out -> add("real generator.const.gcn." + $gcn + " " +  node -> Obj -> value)
            $Out -> add("pushc generator.const.gcn." + $gcn)
            $gcn++
          else:
            $Out -> add("word generator.const.gcn." + $gcn + " " + node -> Obj -> value)
            $Out -> add("pushc generator.const.gcn." + $gcn)
            $gcn++
          end
        end

        case ttString:
          $Out -> add("str generator.const.gcn." + $gcn + " " + DQuote +
                      node -> Obj -> value + DQuote)
          $Out -> add("pushc generator.const.gcn." + $gcn)
          $gcn++
        end

        case ttWord:
          if ($Sem -> const_names -> IndexOf(node -> Obj -> value) <> null) |
             ($Sem -> methods_names -> IndexOf(node -> Obj -> value) <> null) |
             ($Sem -> imp_names -> IndexOf(node -> Obj -> value) <> null):
            $Out -> add("pushc " + node -> Obj -> value)
          else:
            vname ?= node -> Obj -> value

            if vars <> null:
              if (vars -> IndexOf(vname) <> null) & ($Sem -> global_vars -> IndexOf(vname) == null):
                vname = mname + "." + vname
              end
            end

            $Out -> add("push " + vname)
          end
        end
      end
    end

    case MashASTP_ObjectByRef:
      $GenRefOp(node -> ObjPath, "pushai")
    end

    case MashASTP_IndexedObject:
      ok ?= false
      if node -> Obj -> type == MashASTP_SimpleObject:
        if node -> Obj -> Obj -> value == "new":
          ok = true
          $GenArrayAlloc(node -> Indexes -> Objects)
        end
      end

      if ~ok:
        $GenArrayOp(node -> Obj, node -> Indexes -> Objects, "pushai")
      end
    end

    case MashASTP_Call:
      isInvoke ?= false
      isSuper ?= false
      if node -> Obj -> type == MashASTP_SimpleObject:
        if node -> Obj -> Obj -> value == "super":
          isSuper = true
        else:
          for inv in $Sem -> imp_names -> items:
            if node -> Obj -> Obj -> value == inv:
              isInvoke = true
              break
            end
          end
        end
      end

      for arg back node -> args -> objects -> items:
        $LazyGen -> Add(arg)
      end

      if isSuper:
        if mname <> "":
          founded ?= false
          for m in $Sem -> methods -> items:
            if m -> is_class_method:
              mn ?= m -> class_name + "__" + m -> method_name
            else:
              mn ?= m -> method_name
            end

            if mn == mname:
              founded = true
              super_method_founded ?= false
              for cl in $Sem -> classes -> items:
                if cl -> name == m -> class_name:
                  // Checking class parents for method ref
                  for clp_name in cl -> parents -> items:
                    for clp in $Sem -> classes -> items:
                      if clp -> name == clp_name:
                        for pm in clp -> methods -> items:
                          if pm -> name == m -> method_name:
                            super_method_founded = true
                            $LazyGenCode("push " + mname + ".this")
                            $LazyGenCode("peek global.this")
                            $LazyGenCode("pop")

                            $LazyGenCode("pushcp " + pm -> reference)
                            break
                          end
                        end

                        break
                      end
                    end
                  end

                  break
                end
              end

              if ~super_method_founded:
                raise new Exception("Can't call to parent method using super() from method " +
                                    m -> class_name + "::" + m -> method_name + ".")
              end

              break
            end
          end

          if ~founded:
            raise new Exception("Using super() over class method.")
          end
        else:
          raise new Exception("Using super() over class method.")
        end
      else:
        $LazyGen -> Add(new CallBegin)
        $LazyGen -> Add(node -> Obj)
        $LazyGen -> Add(new CallEnd)
      end

      if isInvoke:
        $LazyGenCode("invoke")
      else:
        $LazyGenCode("word generator.const.gcn." + $gcn + " " +
                     node -> args -> objects -> count())
        $LazyGenCode("pushcp generator.const.gcn." + $gcn)
        $LazyGenCode("push global.arg_counter")
        $LazyGenCode("mov")
        $gcn++
        $LazyGenCode("jc")
      end
    end

    case MashASTP_Enum:
      l ?= node -> Objects -> Count()
      $LazyGenCode("word generator.const.gcn." + $gcn + " " + l)
      $LazyGenCode("pushcp generator.const.gcn." + $gcn)
      $gcn++

      $LazyGenCode("word generator.const.gcn." + $gcn + " 1")
      $LazyGenCode("pushcp generator.const.gcn." + $gcn)
      $gcn++
      $LazyGenCode("newa")

      ind ?= 0
      for n in node -> Objects -> items:
        $LazyGenCode("pcopy")
        $LazyGen -> Add(n)
        $LazyGenCode("swp")

        $LazyGenCode("word generator.const.gcn." + $gcn + " " + ind)
        $LazyGenCode("pushcp generator.const.gcn." + $gcn)
        $gcn++

        $LazyGenCode("swp")
        $LazyGenCode("peekai")

        ind++
      end
    end

    case MashExpressionAST:
      if node -> treeNode -> type <> MashASTE_OperationLR:
        $LazyGen -> Add(node -> treeNode)
      else:
        $LazyGen -> Add(node -> treeNode)
      end
    end

    /*
     *  Constructions
     */
    case MashASTB_If:
      $LazyGenCode("pushcp generator.if.gcn." + $gcn + ".else")
      $LazyGen -> Add(node -> Expr)
      $LazyGenCode("jz")
      $LazyGenCode("pop")

      for n in node -> nodes -> items:
        $LazyGen -> Add(n)
      end

      if node -> hasElse:
        $LazyGenCode("pushcp generator.if.gcn." + $gcn + ".end")
        $LazyGenCode("jp")
        $LazyGenCode("generator.if.gcn." + $gcn + ".else:")
        for n in node -> nodesElse -> items:
          $LazyGen -> Add(n)
        end
        $LazyGenCode("generator.if.gcn." + $gcn + ".end:")
      else:
        $LazyGenCode("generator.if.gcn." + $gcn + ".else:")
      end
      $gcn++
    end

    case MashASTB_While:
      $LazyGen -> Add(new BreakPoint("generator.while.gcn." + $gcn + ".end"))
      $LazyGen -> Add(new ContinuePoint("generator.while.gcn." + $gcn + ".start"))
      $LazyGenCode("generator.while.gcn." + $gcn + ".start:")
      $LazyGenCode("pushcp generator.while.gcn." + $gcn + ".end")
      $LazyGen -> Add(node -> Expr)
      $LazyGenCode("jz")
      $LazyGenCode("pop")

      for n in node -> nodes -> items:
        $LazyGen -> Add(n)
      end

      $LazyGenCode("pushcp generator.while.gcn." + $gcn + ".start")
      $LazyGenCode("jp")
      $LazyGenCode("generator.while.gcn." + $gcn + ".end:")

      $gcn++
      $LazyGen -> Add(new PopContinuePoint)
      $LazyGen -> Add(new PopBreakPoint)
    end

    case MashASTB_Whilst:
      $LazyGen -> Add(new ContinuePoint("generator.whilst.gcn." + $gcn + ".check"))
      $LazyGen -> Add(new BreakPoint("generator.whilst.gcn." + $gcn + ".end"))
      $LazyGenCode("generator.whilst.gcn." + $gcn + ".start:")

      for n in node -> nodes -> items:
        $LazyGen -> Add(n)
      end

      $LazyGenCode("generator.whilst.gcn." + $gcn + ".check:")
      $LazyGenCode("pushcp generator.whilst.gcn." + $gcn + ".start")
      $LazyGen -> Add(node -> Expr)
      $LazyGenCode("jn")
      $LazyGenCode("pop")
      $LazyGenCode("generator.whilst.gcn." + $gcn + ".end:")

      $gcn++
      $LazyGen -> Add(new PopContinuePoint)
      $LazyGen -> Add(new PopBreakPoint)
    end

    case MashASTB_ForEach:
      $LazyGen -> Add(new BreakPoint("generator.for_each.gcn." + $gcn + ".end"))
      $LazyGen -> Add(new ContinuePoint("generator.for_each.gcn." + $gcn + ".continue"))

      $LazyGenCode("@generator.for_each.gcn." + $gcn + ".array")
      $LazyGenCode("@generator.for_each.gcn." + $gcn + ".i")
      $LazyGenCode("@generator.for_each.gcn." + $gcn + ".to")

      $LazyGen -> Add(node -> Expr)
      $LazyGenCode("peek generator.for_each.gcn." + $gcn + ".array")
      $LazyGenCode("alen")

      if node -> isBack:
        $LazyGenCode("peek generator.for_each.gcn." + $gcn + ".i")
        $LazyGenCode("dec")
        $LazyGenCode("pop")
        $LazyGenCode("pushc global.zero")
        $LazyGenCode("peek generator.for_each.gcn." + $gcn + ".to")
        $LazyGenCode("dec")
        $LazyGenCode("pop")
      else:
        $LazyGenCode("peek generator.for_each.gcn." + $gcn + ".to")
        $LazyGenCode("pop")
        $LazyGenCode("pushc global.zero")
        $LazyGenCode("peek generator.for_each.gcn." + $gcn + ".i")
        $LazyGenCode("pop")
      end

      $LazyGenCode("generator.for_each.gcn." + $gcn + ".start:")
      $LazyGenCode("pushcp generator.for_each.gcn." + $gcn + ".end")

      $LazyGenCode("push generator.for_each.gcn." + $gcn + ".i")
      $LazyGenCode("push generator.for_each.gcn." + $gcn + ".to")
      $LazyGenCode("eq")
      $LazyGenCode("not")

      $LazyGenCode("jz")
      $LazyGenCode("pop")

      $LazyGenCode("push generator.for_each.gcn." + $gcn + ".i")
      $LazyGenCode("push generator.for_each.gcn." + $gcn + ".array")
      $LazyGenCode("pushai")

      if mname == "":
        $LazyGenCode("@" + node -> forVar -> value)
        $LazyGenCode("peek " + node -> forVar -> value)
        $LazyGen -> Add(new LocalVarVisor($Sem -> global_vars, node -> forVar -> value, false))
      else:
        $LazyGenCode("@" + mname + "." + node -> forVar -> value)
        $LazyGenCode("peek " + mname + "." + node -> forVar -> value)
        $LazyGen -> Add(new LocalVarVisor(vars, node -> forVar -> value, false))
      end

      $LazyGenCode("pop")

      for n in node -> nodes -> items:
        $LazyGen -> Add(n)
      end

      $LazyGenCode("generator.for_each.gcn." + $gcn + ".continue:")
      $LazyGenCode("push generator.for_each.gcn." + $gcn + ".i")
      if node -> isBack:
        $LazyGenCode("dec")
      else:
        $LazyGenCode("inc")
      end
      $LazyGenCode("pop")

      $LazyGenCode("pushcp generator.for_each.gcn." + $gcn + ".start")
      $LazyGenCode("jp")
      $LazyGenCode("generator.for_each.gcn." + $gcn + ".end:")

      if mname == "":
        $LazyGen -> Add(new LocalVarVisor($Sem -> global_vars, node -> forVar -> value, true))
      else:
        $LazyGen -> Add(new LocalVarVisor(vars, node -> forVar -> value, true))
      end

      $gcn++
      $LazyGen -> Add(new PopContinuePoint)
      $LazyGen -> Add(new PopBreakPoint)
    end

    case MashASTB_Return:
      $LazyGen -> Add(node -> Expr)
      $LazyGenCode("jr")
    end

    case MashASTB_Break:
      if $BPStack -> Size() > 0:
        $LazyGenCode("pushcp " + $BPStack -> peek_back())
        $LazyGenCode("jp")
      else:
        raise new Exception("Bad 'break' position. Can't jump out of code here.")
      end
    end

    case MashASTB_Continue:
      if $CPStack -> Size() > 0:
        $LazyGenCode("pushcp " + $CPStack -> peek_back())
        $LazyGenCode("jp")
      else:
        raise new Exception("Bad 'continue' position. Can't jump from here.")
      end
    end

    case MashASTB_Switch:
      $LazyGen -> Add(new BreakPoint("generator.switch.gcn." + $gcn + ".end"))
      $LazyGen -> Add(node -> Expr)

      for n in node -> nodes -> items:
        $LazyGen -> Add(n)
      end

      if node -> hasElse:
        for n in node -> caseElse -> nodes -> items:
          $LazyGen -> Add(n)
        end
      end

      $LazyGenCode("generator.switch.gcn." + $gcn + ".end:")

      $gcn++
      $LazyGen -> Add(new PopBreakPoint)
    end

    case MashASTB_Case:
      $LazyGenCode("pcopy")
      $LazyGen -> Add(node -> Expr)
      $LazyGenCode("eq")
      $LazyGenCode("pushcp generator.case.gcn." + $gcn + ".end")
      $LazyGenCode("swp")
      $LazyGenCode("jz")

      for n in node -> nodes -> items:
        $LazyGen -> Add(n)
      end

      $LazyGenCode("pushcp " + $BPStack -> peek_back())
      $LazyGenCode("jp")
      $LazyGenCode("generator.case.gcn." + $gcn + ".end:")

      $gcn++
    end

    case MashASTB_Launch:
      if mname <> "":
        for v in vars -> items:
          if v <> "this":
            $LazyGenCode("push " + mname + "." + v)
            $LazyGenCode("copy")
            $LazyGenCode("peek " + mname + "." + v)
            $LazyGenCode("pop")
          end
        end
      end

      $LazyGenCode("pushn")
      $LazyGenCode("pushcp generator.launch.gcn." + $gcn + ".start")
      $LazyGenCode("cthr")
      $LazyGenCode("rthr")
      $LazyGenCode("pushcp generator.launch.gcn." + $gcn + ".end")
      $LazyGenCode("jp")
      $LazyGenCode("generator.launch.gcn." + $gcn + ".start:")
      $LazyGenCode("pop")

      for n in node -> nodes -> items:
        $LazyGen -> Add(n)
      end

      $LazyGenCode("jr")
      $LazyGenCode("generator.launch.gcn." + $gcn + ".end:")

      if mname <> "":
        for v back vars -> items:
          if v <> "this":
            $LazyGenCode("peek " + mname + "." + v)
            $LazyGenCode("pop")
          end
        end
      end

      $gcn++
    end

    case MashASTB_Async:
      vn ?= ""
      if mname <> "":
        for v in vars -> items:
          if v <> "this":
            $LazyGenCode("push " + mname + "." + v)
            $LazyGenCode("copy")
            $LazyGenCode("peek " + mname + "." + v)
            $LazyGenCode("pop")
          end
        end
        $LazyGen -> Add(new LocalVarVisor(vars, node -> forVar, false))
        vn ?= mname + "." + node -> forVar
        $LazyGenCode("@" + vn)
      else:
        $LazyGen -> Add(new LocalVarVisor($Sem -> global_vars, node -> forVar, false))
        vn ?= node -> forVar
        $LazyGenCode("@" + vn)
      end

      $LazyGenCode("pushc global.zero")
      $LazyGenCode("peek " + vn)
      $LazyGenCode("pop "  + vn)
      $LazyGenCode("pushn")
      $LazyGenCode("pushcp generator.async.gcn." + $gcn + ".start")
      $LazyGenCode("cthr")
      $LazyGenCode("rthr")
      $LazyGenCode("pushcp generator.async.gcn." + $gcn + ".end")
      $LazyGenCode("jp")
      $LazyGenCode("generator.async.gcn." + $gcn + ".start:")
      $LazyGenCode("pop")

      for n in node -> nodes -> items:
        $LazyGen -> Add(n)
      end

      $LazyGenCode("push " + vn)
      $LazyGenCode("inc")
      $LazyGenCode("pop")
      $LazyGenCode("jr")
      $LazyGenCode("generator.async.gcn." + $gcn + ".end:")

      if mname <> "":
        for v back vars -> items:
          if v <> "this":
            $LazyGenCode("peek " + mname + "." + v)
            $LazyGenCode("pop")
          end
        end
      end

      $gcn++
    end

    case MashASTB_Wait:
      $LazyGen -> Add(node -> Expr)
      $LazyGenCode("pushcp generator.wait.gcn." + $gcn + ".check")
      $LazyGenCode("jp")
      $LazyGenCode("generator.wait.gcn." + $gcn + ".start:")
      $LazyGenCode("pushcp global.one")
      $LazyGenCode("pushcp sleep")
      $LazyGenCode("invoke")
      $LazyGenCode("generator.wait.gcn." + $gcn + ".check:")
      $LazyGenCode("pcopy")
      $LazyGenCode("pushcp generator.wait.gcn." + $gcn + ".start")
      $LazyGenCode("swp")
      $LazyGenCode("jz")
      $LazyGenCode("pop")
      $LazyGenCode("pop")

      $gcn++
    end

    case MashASTB_Try:
      $LazyGen -> Add(new BreakPoint("generator.try.gcn." + $gcn + ".break"))
      $LazyGenCode("pushcp generator.try.gcn." + $gcn + ".finally")
      $LazyGenCode("pushcp generator.try.gcn." + $gcn + ".catch")
      $LazyGenCode("tr")

      for n in node -> nodes -> items:
        $LazyGen -> Add(n)
      end

      $LazyGenCode("generator.try.gcn." + $gcn + ".break:")
      $LazyGenCode("trs")
      $LazyGen -> Add(new PopBreakPoint)
      $LazyGen -> Add(new BreakPoint("generator.try.gcn." + $gcn + ".finally"))
      $LazyGenCode("generator.try.gcn." + $gcn + ".catch:")

      if node -> hasCatch:
        $LazyGenCode("pushcp system_makeexception")
        $LazyGenCode("jc")

        if mname == "":
          $LazyGenCode("@" + node -> forVar)
          $LazyGenCode("peek " + node -> forVar)
          $LazyGen -> Add(new LocalVarVisor($Sem -> global_vars, node -> forVar, false))
        else:
          $LazyGenCode("@" + mname + "." + node -> forVar)
          $LazyGenCode("peek " + mname + "." + node -> forVar)
          $LazyGen -> Add(new LocalVarVisor(vars, node -> forVar, false))
        end

        $LazyGenCode("pop")

        for n in node -> NodesCatch -> items:
          $LazyGen -> Add(n)
        end

        if mname == "":
          $LazyGen -> Add(new LocalVarVisor($Sem -> global_vars, node -> forVar, true))
        else:
          $LazyGen -> Add(new LocalVarVisor(vars, node -> forVar, true))
        end
      end

      $LazyGenCode("generator.try.gcn." + $gcn + ".finally:")
      $LazyGen -> Add(new PopBreakPoint)

      $gcn++
    end

    case MashASTB_Raise:
      $LazyGen -> Add(node -> Expr)
      $LazyGenCode("pushc global.raised")
      $LazyGenCode("trr")
    end

    case MashASTB_Safe:
      if mname <> "":
        for v in vars -> items:
          $LazyGenCode("push " + mname + "." + v)
          $LazyGenCode("rst")
        end

        needVision ?= false
        if node -> Expr -> type == MashExpressionAST:
          if node -> Expr -> treeNode -> type == MashASTE_OperationLR:
            obj ?= node -> Expr -> treeNode -> L
            if obj -> type == MashASTP_SimpleObject:
              if obj -> obj -> info == ttWord:
                needVision = true
                $LazyGenCode("@" + mname + "." + obj -> obj -> value)
              end
            end
          end
        end

        if needVision:
          $LazyGen -> Add(new LocalVarVisor(vars, obj -> obj -> value, false))
        end

        $LazyGen -> Add(node -> Expr)

        if needVision:
          $LazyGen -> Add(new LocalVarVisor(vars, obj -> obj -> value, true))
        end

        for v back vars -> items:
          $LazyGenCode("rld")
          $LazyGenCode("peek " + mname + "." + v)
          $LazyGenCode("pop")
        end

        if needVision:
          $LazyGen -> Add(new LocalVarVisor(vars, obj -> obj -> value, false))
        end
      else:
        $LazyGen -> Add(node -> Expr)
      end
    end

    case MashASTB_Method:
      for n in node -> nodes -> items:
        $LazyGen -> Add(n)
      end
    end
  end
end

/*
 *  Some methods
 */

proc GeneratorSVM::GenArrayOp(obj, indexes, targetOp):
  $LazyGen -> Add(obj)

  cnt ?= indexes -> count()
  i ?= 0
  while i < cnt:
    $LazyGen -> Add(indexes -> get(i))
    $LazyGenCode("swp")
    i++

    if i < cnt:
      $LazyGenCode("pushai")
    else:
      $LazyGenCode(targetOp)
    end
  end
end

proc GeneratorSVM::GenRefOp(ObjPath, targetOp):
  first ?= ObjPath -> get(0)

  if first -> type == MashASTP_SimpleObject:
    if first -> Obj -> info == ttWord:
      isPackage ?= false
      for cl in $Sem -> classes -> items:
        if cl -> name == first -> Obj -> value:
          isPackage = true
          break
        end
      end

      if isPackage:
        $LazyGenCode("push structure_instance_" + first -> Obj -> value)
      else:
        $LazyGen -> Add(first)
      end
    else:
      $LazyGen -> Add(first)
    end
  else:
    $LazyGen -> Add(first)
  end

  cnt ?= ObjPath -> count()
  i ?= 1
  while i < cnt:
    if ((i + 1) >= cnt) & ($CallingLvl > 0):
      $LazyGenCode("peek global.this")
    end

    $LazyGen -> Add(ObjPath -> get(i))
    $LazyGenCode("swp")
    i++

    if i < cnt:
      $LazyGenCode("pushai")
    else:
      $LazyGenCode(targetOp)
    end
  end
end

proc GeneratorSVM::GenArrayAlloc(indexes):
  for x back indexes -> items:
    $LazyGen -> Add(x)
  end

  $LazyGenCode("word generator.const.gcn." + $gcn + " " + indexes -> count())
  $LazyGenCode("pushcp generator.const.gcn." + $gcn)
  $gcn++

  $LazyGenCode("newa")
end

/*
 *  Generating operations for expressions
 */

func GeneratorSVM::GenOperation(op, isLR):
  switch op:
    case "+":
      r ?= new PreGeneratedSet()
      r -> Next("copy")
      r -> Next("swp")
      r -> Next("pop")
      r -> Next("add")
      return r
    end

    case "-":
      r ?= new PreGeneratedSet()

      if isLR:
        r -> Next("copy")
        r -> Next("swp")
        r -> Next("pop")
        r -> Next("sub")
      else:
        r -> Next("copy")
        r -> Next("swp")
        r -> Next("pop")
        r -> Next("neg")
      end

      return r
    end

    case "*":
      r ?= new PreGeneratedSet()
      r -> Next("copy")
      r -> Next("swp")
      r -> Next("pop")
      r -> Next("mul")
      return r
    end

    case "/":
      r ?= new PreGeneratedSet()
      r -> Next("copy")
      r -> Next("swp")
      r -> Next("pop")
      r -> Next("div")
      return r
    end

    case "\":
      r ?= new PreGeneratedSet()
      r -> Next("copy")
      r -> Next("swp")
      r -> Next("pop")
      r -> Next("idiv")
      return r
    end

    case "%":
      r ?= new PreGeneratedSet()
      r -> Next("copy")
      r -> Next("swp")
      r -> Next("pop")
      r -> Next("mod")
      return r
    end

    case "&":
      r ?= new PreGeneratedSet()
      r -> Next("copy")
      r -> Next("swp")
      r -> Next("pop")
      r -> Next("and")
      return r
    end

    case "|":
      r ?= new PreGeneratedSet()
      r -> Next("copy")
      r -> Next("swp")
      r -> Next("pop")
      r -> Next("or")
      return r
    end

    case "^":
      r ?= new PreGeneratedSet()
      r -> Next("copy")
      r -> Next("swp")
      r -> Next("pop")
      r -> Next("xor")
      return r
    end

    case "<<":
      r ?= new PreGeneratedSet()
      r -> Next("copy")
      r -> Next("swp")
      r -> Next("pop")
      r -> Next("shl")
      return r
    end

    case ">>":
      r ?= new PreGeneratedSet()
      r -> Next("copy")
      r -> Next("swp")
      r -> Next("pop")
      r -> Next("shr")
      return r
    end

    case ">":
      r ?= new PreGeneratedSet()
      r -> Next("bg")
      return r
    end

    case ">=":
      r ?= new PreGeneratedSet()
      r -> Next("be")
      return r
    end

    case "==":
      r ?= new PreGeneratedSet()
      r -> Next("eq")
      return r
    end

    case "<>":
      r ?= new PreGeneratedSet()
      r -> Next("eq")
      r -> Next("not")
      return r
    end

    case "<":
      r ?= new PreGeneratedSet()
      r -> Next("swp")
      r -> Next("bg")
      return r
    end

    case "<=":
      r ?= new PreGeneratedSet()
      r -> Next("swp")
      r -> Next("bg")
      return r
    end

    case "in":
      r ?= new PreGeneratedSet()
      r -> Next("pushcp system_op_in")
      r -> Next("jc")
      return r
    end

    case "is":
      r ?= new PreGeneratedSet()
      r -> Next("pushcp system_op_is")
      r -> Next("jc")
      return r
    end

    case "..":
      r ?= new PreGeneratedSet()
      r -> Next("pushcp system_op_range")
      r -> Next("jc")
      return r
    end

    case "+=":
      r ?= new PreGeneratedSet()
      r -> Next("add")
      r -> Next("pop")
      return r
    end

    case "-=":
      r ?= new PreGeneratedSet()
      r -> Next("sub")
      r -> Next("pop")
      return r
    end

    case "*=":
      r ?= new PreGeneratedSet()
      r -> Next("mul")
      r -> Next("pop")
      return r
    end

    case "/=":
      r ?= new PreGeneratedSet()
      r -> Next("div")
      r -> Next("pop")
      return r
    end

    case "\=":
      r ?= new PreGeneratedSet()
      r -> Next("idiv")
      r -> Next("pop")
      return r
    end

    case "%=":
      r ?= new PreGeneratedSet()
      r -> Next("mod")
      r -> Next("pop")
      return r
    end

    case "&=":
      r ?= new PreGeneratedSet()
      r -> Next("and")
      r -> Next("pop")
      return r
    end

    case "|=":
      r ?= new PreGeneratedSet()
      r -> Next("or")
      r -> Next("pop")
      return r
    end

    case "^=":
      r ?= new PreGeneratedSet()
      r -> Next("xor")
      r -> Next("pop")
      return r
    end

    case "<<=":
      r ?= new PreGeneratedSet()
      r -> Next("shl")
      r -> Next("pop")
      return r
    end

    case ">>=":
      r ?= new PreGeneratedSet()
      r -> Next("shr")
      r -> Next("pop")
      return r
    end

    case "=":
      r ?= new PreGeneratedSet()
      r -> Next("mov")
      return r
    end

    case "@=":
      r ?= new PreGeneratedSet()
      r -> Next("mvbp")
      return r
    end

    case "~":
      r ?= new PreGeneratedSet()
      r -> Next("copy")
      r -> Next("swp")
      r -> Next("pop")
      r -> Next("not")
      return r
    end

    case "++":
      r ?= new PreGeneratedSet()
      r -> Next("inc")
      r -> Next("pop")
      return r
    end

    case "--":
      r ?= new PreGeneratedSet()
      r -> Next("dec")
      r -> Next("pop")
      return r
    end

    case "@":
      r ?= new PreGeneratedSet()
      r -> Next("new")
      r -> Next("peek global.temp")
      r -> Next("movp")
      r -> Next("push global.temp")
      return r
    end

    case "?":
      r ?= new PreGeneratedSet()
      r -> Next("gvbp")
      return r
    end
  end
end
