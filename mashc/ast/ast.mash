uses <classes\vector>
uses <classes\list>
uses "ast\base\ast.mash"
uses "ast\blocks.mash"
uses "parser\token.mash"
uses "ast\expressions\ast.mash"

class MashAST(MashBaseAST):
  protected:
    var BlockVect,
        BlockObjectsVect,

        imports_lst, uses_lst, const_lst

  public:
    proc create,
         process

  private:
    func CurrBlock,
         NextNode,
         NextExprTokens,
         NextExpr,
         NextParam
end



proc MashAST::Create(tokens, fp, imports_lst, uses_lst, const_lst):
  MashBaseAST::Create$(tokens, fp)

  $blockObjectsVect ?= new vector()
  $blockvect ?= new vector()
  $blockvect -> push_back($nodes)

  $imports_lst ?= imports_lst
  $uses_lst ?= uses_lst
  $const_lst ?= const_lst
end



func MashAST::CurrBlock():
  if $blockvect -> size() > 0:
    return $blockvect -> peek_back()
  else:
    return null
  end
end



/*
 *  Creating AST:
 */

proc MashAST::Process():
  token_id ?= 0

  BlockTypes ?= [ MashASTB_Method,
                  MashASTB_If,
                  MashASTB_For,
                  MashASTB_ForEach,
                  MashASTB_While ]

  while token_id < $tokens -> count():
    node ?= $NextNode(token_id)

    if node <> null:
      block ?= $CurrBlock()
      block -> add(node)

      if node -> type in BlockTypes:
        $blockObjectsVect -> push_back(node)
        $blockvect -> push_back(node -> nodes)
      end
    end

    gc()
  end
end



func MashAST::NextNode(token_id):
  token ?= $token(token_id)
  $lastTk ?= token

  switch token -> info:
    case ttToken:
      if token -> value in MashExprTokens:
        return $NextExpr(token_id)
      else:
        // Here we should make structures from tokens
        switch token -> value:

          // Import
          case "import":
            blk ?= new MashASTB_Import($TkWordValue($token(token_id + 1)),
                                       $TkStrValue($token(token_id + 2)),
                                       $TkStrValue($token(token_id + 3)))
            token_id += 4

            for imp in $imports_lst -> items:
              if imp -> method_name == blk -> method_name:
                raise new Exception("Second declaration of import '" +
                                    imp -> method_name + "' " +
                                    "at line " + (token -> line + 1) + " at file '" +
                                    $fp + "'.")
              end
            end
            $imports_lst -> add(blk)

            return null
          end

          // Uses
          case "uses":
            token_id++
            ExprTokens ?= $NextExprTokens(token_id)
            $uses_lst -> add(new MashASTB_Uses(ExprTokens))
            return null
          end

          // Const
          case "const":
            if $TkCheck($token(token_id + 2)) == "stream":
              blk ?= new MashASTB_Const($TkWordValue($token(token_id + 1)),
                                        $TkNotNull($token(token_id + 3)))
              blk -> isStream = true

              token_id += 4
            else:
              if $TkCheck($token(token_id + 2)) == "-":
                tk ?= $TkNotNull($token(token_id + 3))
                new_tk ?= new MashToken("-" + tk -> value, tk -> info, tk -> line)
                blk ?= new MashASTB_Const($TkWordValue($token(token_id + 1)), new_tk)
                token_id += 4
              else:
                blk ?= new MashASTB_Const($TkWordValue($token(token_id + 1)),
                                          $TkNotNull($token(token_id + 2)))
                token_id += 3
              end
            end

            return null
          end

          // Proc
          case "proc":
            if $TkValue($token(token_id + 2)) == "::": //class method
              is_class_method ?= true
              class_name ?= $TkWordValue($token(token_id + 1))
              method_name ?= $TkWordValue($token(token_id + 3))
              token_id += 4
            else:
              is_class_method ?= false
              class_name ?= ""
              method_name ?= $TkWordValue($token(token_id + 1))
              token_id += 2
            end

            method_block ?= new MashASTB_Method(false, method_name,
                                                is_class_method,
                                                class_name, token -> line, $fp)

            if $TkTokenValue($token(token_id)) == "(":
              token_id++

              while $TkValue($token(token_id)) <> ")":
                arg ?= $NextParam(token_id)

                if arg -> tokens -> count() > 0:
                  method_block -> params -> add(arg)
                else:
                  raise new Exception("Invalid paramethers declaration at line " +
                                      (token -> line + 1) + " at file '" +
                                      $fp + "'.")
                end

                tk ?= $TkNotNull($token(token_id))
                if (tk -> info == ttEndOfLine) | (tk -> value == ","):
                  token_id++
                else:
                  if tk -> value <> ")":
                    raise new Exception("Missed ')' at line " +
                                        (token -> line + 1) + " at file '" +
                                        $fp + "'.")
                  end
                end
              end

              token_id++
            else:
              raise new Exception("Missed '(' at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end

            if $TkTokenValue($token(token_id)) == ":":
              token_id++
            else:
              raise new Exception("Missed ':' at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end

            return method_block
          end

          // Func
          case "func":
            if $TkValue($token(token_id + 2)) == "::": //class method
              is_class_method ?= true
              class_name ?= $TkWordValue($token(token_id + 1))
              method_name ?= $TkWordValue($token(token_id + 3))
              token_id += 4
            else:
              is_class_method ?= false
              class_name ?= ""
              method_name ?= $TkWordValue($token(token_id + 1))
              token_id += 2
            end

            method_block ?= new MashASTB_Method(true, method_name,
                                                is_class_method,
                                                class_name, token -> line, $fp)

            if $TkTokenValue($token(token_id)) == "(":
              token_id++

              while $TkValue($token(token_id)) <> ")":
                arg ?= $NextParam(token_id)

                if arg -> tokens -> count() > 0:
                  method_block -> params -> add(arg)
                else:
                  raise new Exception("Invalid paramethers declaration at line " +
                                      (token -> line + 1) + " at file '" +
                                      $fp + "'.")
                end

                tk ?= $TkNotNull($token(token_id))
                if (tk -> info == ttEndOfLine) | (tk -> value == ","):
                  token_id++
                else:
                  if tk -> value <> ")":
                    raise new Exception("Missed ')' at line " +
                                        (token -> line + 1) + " at file '" +
                                        $fp + "'.")
                  end
                end
              end

              token_id++
            else:
              raise new Exception("Missed '(' at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end

            if $TkTokenValue($token(token_id)) == ":":
              token_id++
            else:
              raise new Exception("Missed ':' at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end

            return method_block
          end

          // End
          case "end":
            if $blockObjectsVect -> size() > 0:
              $blockObjectsVect -> rem_back()
            end

            $blockvect -> rem_back()
            if $blockvect -> size() == 0:
              raise new Exception("Can't find construction start which ending at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end
            token_id++
          end

          // If
          case "if":
            token_id++
            Expr ?= $NextExpr(token_id)
            if $TkTokenValue($token(token_id)) == ":":
              token_id++
              return new MashASTB_If(Expr)
            else:
              raise new Exception("Missed ':' in declaration of if statement at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end
          end

          // Else
          case "else":
            if $TkValue($token(token_id + 1)) <> ":":
              raise new Exception("Missed ':' in declaration of else statement at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end
            token_id += 2

            if $blockObjectsVect -> size() > 0:
              obj ?= $blockObjectsVect -> peek_back()
              if obj -> type in [MashASTB_If]:
                if obj -> hasElse:
                  raise new Exception("Second 'else' declaration for one block of code at line " +
                                      (token -> line + 1) + " at file '" +
                                      $fp + "'.")
                end

                obj -> hasElse = true

                $blockvect -> rem_back()
                $blockvect -> push_back(obj -> nodesElse)

                return null
              end
            end
          end

          case "for":
            token_id++
            // for (<expr>; <expr>; <expr>):
            if $TkValue($token(token_id)) == "(":
              token_id++
              /*println("Stage 1...")
              ExprInit ?= $NextExpr(token_id)
              println("Stage 1")
              if $TkTokenValue($token(token_id)) == ";":
                token_id++
                ExprCond ?= $NextExpr(token_id)
                println("Stage 2")
                if $TkTokenValue($token(token_id)) == ";":
                  token_id++
                  ExprActions ?= $NextExpr(token_id)
                  println("Stage 3")
                  if ($TkTokenValue($token(token_id)) == ")") &
                     ($TkTokenValue($token(token_id + 1)) == ":"):
                    token_id += 2
                    println("Stage 4")
                    return new MashASTB_For(ExprInit, ExprCond, ExprActions)
                  end
                end
              end  */

              // If no return -> invalid construction
              raise new Exception("Invalid for loop declaration (for(...)?) " +
                                  "at line " + (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            else:
              // for <var> in/back <expr>:
              ForVar ?= $TkNotNull($token(token_id))
              token_id++
              isBack ?= false

              switch $TkTokenValue($token(token_id)):
                case "in":
                  isBack ?= false
                end

                case "back":
                  isBack ?= true
                end

                else:
                  raise new Exception("Invalid for loop declaration (for in/back?) " +
                                      "at line " + (token -> line + 1) + " at file '" +
                                      $fp + "'.")
              end

              token_id++
              Expr ?= $NextExpr(token_id)
              if $TkTokenValue($token(token_id)) == ":":
                token_id++
                return new MashASTB_ForEach(ForVar, isBack, Expr)
              end

              // If no return -> invalid construction
              raise new Exception("Invalid for loop declaration (for in/back?) " +
                                  "at line " + (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end
          end

          // while
          case "while":
            token_id++

            tk ?= $TkNotNull($token(token_id))

            if ($TkValue(tk) == ":") | (tk -> info == ttEndOfLine):
              raise new Exception("Missed expression in while loop statement at line " +
                                  (token -> line + 1) + " at file '" + $fp + "'.")
            end

            Expr ?= $NextExpr(token_id)
            if $TkTokenValue($token(token_id)) == ":":
              token_id++
              return new MashASTB_While(Expr)
            else:
              raise new Exception("Missed ':' in declaration of while statement at line " +
                                  (token -> line + 1) + " at file '." +
                                  $fp + "'")
            end
          end
          // Token shouldn't be first
          else:
            raise new Exception("Invalid construction (starts with '" + token -> value +
                                "') at line " + (token -> line + 1) + " at file '" + $fp + "'.")
        end
      end
    end

    case ttDigit:
      return $NextExpr(token_id)
    end

    case ttString:
      return $NextExpr(token_id)
    end

    case ttWord:
      return $NextExpr(token_id)
    end

    case ttEndOfLine:
      token_id++
      return null
    end

    else:
      raise new Exception("Invalid expression (starts with '" + token -> value +
                          "') at line " + (token -> line + 1) + " at file '" + $fp + "'.")
  end
  return null
end



func MashAST::NextExprTokens(token_id):
  ExprTokens ?= new list()
  tk ?= null
  br_cnt ?= 0

  whilst tk <> null:
    tk ?= $token(token_id)

    if tk <> null:
      if ((tk -> value in MashExprTokens) & (tk -> info == ttToken)) |
         (tk -> info in [ttWord, ttDigit, ttString]):

        switch tk -> value:
          case "(":
            br_cnt++
          end

          case ")":
            br_cnt--
          end
        end

        if br_cnt < 0:
          break
        end

        ExprTokens -> add(tk)
        token_id++
      else:
        tk ?= null
      end
    end
  end

  return ExprTokens
end



func MashAST::NextExpr(token_id):
  ExprTokens ?= $NextExprTokens(token_id)

  vect ?= new vector()
  Expr ?= new MashExpressionAST(ExprTokens, $fp, vect)
  Expr -> Process()

  while vect -> size() > 0:
    SubExpr ?= vect -> pop_back()
    SubExpr -> Process()
  end

  return Expr
end



func MashAST::NextParam(token_id):
  Expr ?= new MashASTB_Expression()
  tk ?= null

  whilst tk <> null:
    tk ?= $token(token_id)

    if tk <> null:
      if (tk -> value in MashParamsTokens) &
         (tk -> info == ttToken) |
         (tk -> info == ttWord):
        Expr -> tokens -> add(tk)
        token_id++
      else:
        tk ?= null
      end
    end
  end

  return Expr
end
