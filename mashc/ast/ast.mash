uses <classes\vector>
uses <classes\list>
uses "ast\base\ast.mash"
uses "ast\blocks.mash"
uses "parser\token.mash"
uses "ast\expressions\ast.mash"

class MashAST(MashBaseAST):
  protected:
    var blockvect

  public:
    proc create,
         process

  private:
    func CurrBlock,
         NextNode,
         NextExpr,
         NextParam
end



proc MashAST::Create(tokens, fp):
  MashBaseAST::Create$(tokens, fp)

  $blockvect ?= new vector()
  $blockvect -> push_back($nodes)
end



func MashAST::CurrBlock():
  if $blockvect -> size() > 0:
    return $blockvect -> peek_back()
  else:
    return null
  end
end



/*
 *  Creating AST:
 */

proc MashAST::Process():
  token_id ?= 0
  while token_id < $tokens -> count():
    node ?= $NextNode(token_id)

    if node <> null:
      block ?= $CurrBlock()
      block -> add(node)

      if node -> type in [MashASTB_Method]:
        $blockvect -> push_back(node -> nodes)
      end
    end

    gc()
  end
end



func MashAST::NextNode(token_id):
  token ?= $token(token_id)
  $lastTk ?= token

  switch token -> info:
    case ttToken:
      if token -> value in MashExprTokens:
        return $NextExpr(token_id)
      else:
        // Here we should make structures from tokens
        switch token -> value:

          // Import
          case "import":
            blk ?= new MashASTB_Import($TkWordValue($token(token_id + 1)),
                                       $TkStrValue($token(token_id + 2)),
                                       $TkStrValue($token(token_id + 3)))
            token_id += 4
            return blk
          end

          // Uses
          case "uses":
            token_id++
            Expr ?= $NextExpr(token_id)
            blk ?= new MashASTB_Uses(Expr)
            return blk
          end

          // Proc
          case "proc":
            if $TkValue($token(token_id + 2)) == "::": //class method
              is_class_method ?= true
              class_name ?= $TkWordValue($token(token_id + 1))
              method_name ?= $TkWordValue($token(token_id + 3))
              token_id += 4
            else:
              is_class_method ?= false
              class_name ?= ""
              method_name ?= $TkWordValue($token(token_id + 1))
              token_id += 2
            end

            method_block ?= new MashASTB_Method(false, method_name, is_class_method, class_name)

            if $TkTokenValue($token(token_id)) == "(":
              token_id++

              while $TkValue($token(token_id)) <> ")":
                arg ?= $NextParam(token_id)

                if arg -> tokens -> count() > 0:
                  method_block -> params -> add(arg)
                else:
                  raise new Exception("Invalid paramethers declaration at line " +
                                      (token -> line + 1) + " at file '" +
                                      $fp + "'")
                end

                tk ?= $TkNotNull($token(token_id))
                if (tk -> info == ttEndOfLine) | (tk -> value == ","):
                  token_id++
                else:
                  if tk -> value <> ")":
                    raise new Exception("Missed ')' at line " +
                                        (token -> line + 1) + " at file '" +
                                        $fp + "'")
                  end
                end
              end

              token_id++
            else:
              raise new Exception("Missed '(' at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'")
            end

            if $TkTokenValue($token(token_id)) == ":":
              token_id++
            else:
              raise new Exception("Missed ':' at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'")
            end

            return method_block
          end

          // Func
          case "func":
            if $TkValue($token(token_id + 2)) == "::": //class method
              is_class_method ?= true
              class_name ?= $TkWordValue($token(token_id + 1))
              method_name ?= $TkWordValue($token(token_id + 3))
              token_id += 4
            else:
              is_class_method ?= false
              class_name ?= ""
              method_name ?= $TkWordValue($token(token_id + 1))
              token_id += 2
            end

            method_block ?= new MashASTB_Method(true, method_name, is_class_method, class_name)

            if $TkTokenValue($token(token_id)) == "(":
              token_id++

              while $TkValue($token(token_id)) <> ")":
                arg ?= $NextParam(token_id)

                if arg -> tokens -> count() > 0:
                  method_block -> params -> add(arg)
                else:
                  raise new Exception("Invalid paramethers declaration at line " +
                                      (token -> line + 1) + " at file '" +
                                      $fp + "'")
                end

                tk ?= $TkNotNull($token(token_id))
                if (tk -> info == ttEndOfLine) | (tk -> value == ","):
                  token_id++
                else:
                  if tk -> value <> ")":
                    raise new Exception("Missed ')' at line " +
                                        (token -> line + 1) + " at file '" +
                                        $fp + "'")
                  end
                end
              end

              token_id++
            else:
              raise new Exception("Missed '(' at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'")
            end

            if $TkTokenValue($token(token_id)) == ":":
              token_id++
            else:
              raise new Exception("Missed ':' at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'")
            end

            return method_block
          end

          // End
          case "end":
            $blockvect -> rem_back()
            if $blockvect -> size() == 0:
              raise new Exception("Can't find construction start which ending at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'")
            end
            token_id++
          end

          // Token shouldn't be first
          else:
            raise new Exception("Invalid construction (starts with '" + token -> value +
                                "') at line " + (token -> line + 1) + " at file '" + $fp + "'")
        end
      end
    end

    case ttDigit:
      return $NextExpr(token_id)
    end

    case ttString:
      return $NextExpr(token_id)
    end

    case ttWord:
      return $NextExpr(token_id)
    end

    case ttEndOfLine:
      token_id++
      return null
    end

    else:
      raise new Exception("Invalid expression (starts with '" + token -> value +
                          "') at line " + (token -> line + 1) + " at file '" + $fp + "'")
  end
  return null
end



func MashAST::NextExpr(token_id):
  ExprTokens ?= new list()
  tk ?= null

  whilst tk <> null:
    tk ?= $token(token_id)
    token_id++

    if tk <> null:
      if ((tk -> value in MashExprTokens) & (tk -> info == ttToken)) |
         (tk -> info in [ttWord, ttDigit, ttString]):
        ExprTokens -> add(tk)
      else:
        tk ?= null
      end
    end
  end

  vect ?= new vector()
  Expr ?= new MashExpressionAST(ExprTokens, $fp, vect)
  Expr -> Process()

  while vect -> size() > 0:
    SubExpr ?= vect -> pop_back()
    SubExpr -> Process()
  end

  return Expr
end



func MashAST::NextParam(token_id):
  Expr ?= new MashASTB_Expression()
  tk ?= null

  whilst tk <> null:
    tk ?= $token(token_id)

    if tk <> null:
      if (tk -> value in MashParamsTokens) &
         (tk -> info == ttToken) |
         (tk -> info == ttWord):
        Expr -> tokens -> add(tk)
        token_id++
        println("param: ", tk -> value)
      else:
        tk ?= null
      end
    end
  end

  return Expr
end
