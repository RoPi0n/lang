uses <classes\vector>
uses <classes\list>
uses "ast\base\ast.mash"
uses "ast\blocks.mash"
uses "parser\token.mash"
uses "ast\expressions\ast.mash"

class MashAST(MashBaseAST):
  protected:
    var CornerNodes,
        BlockVect,
        BlockObjectsVect,

        imports_lst, regapi_lst, uses_lst, const_lst

  public:
    proc create,
         process

  private:
    func CurrBlock,
         NextNode,
         NextExprTokens,
         NextExpr,
         NextParam
end



proc MashAST::Create(tokens, fp, imports_lst, regapi_lst, uses_lst, const_lst):
  MashBaseAST::Create$(tokens, fp)

  $CornerNodes ?= $nodes

  $blockObjectsVect ?= new vector()
  $blockvect ?= new vector()
  $blockvect -> push_back($nodes)

  $imports_lst ?= imports_lst
  $regapi_lst ?= regapi_lst
  $uses_lst ?= uses_lst
  $const_lst ?= const_lst
end



func MashAST::CurrBlock():
  if $blockvect -> size() > 0:
    return $blockvect -> peek_back()
  else:
    return null
  end
end



/*
 *  Creating AST:
 */

proc MashAST::Process():
  token_id ?= 0

  BlockTypes ?= [ MashASTB_Method,
                  MashASTB_If,
                  MashASTB_ForEach,
                  MashASTB_While,
                  MashASTB_Whilst,
                  MashASTB_Switch,
                  MashASTB_Case,
                  MashASTB_Launch,
                  MashASTB_Async,

                  MashASTB_Class,
                  MashASTB_ClassField,
                  MashASTB_Public,
                  MashASTB_Protected,
                  MashASTB_Private,

                  MashASTB_Try ]

  while token_id < $tokens -> count():
    node ?= $NextNode(token_id)

    if node <> null:
      if node -> type in BlockTypes:
        pb ?= null
        if $blockObjectsVect -> size() > 0:
          pb ?= $blockObjectsVect -> peek_back()
        end

        ok ?= false

        if pb <> null:
          switch pb -> type:
            case MashASTB_Switch:
              if node -> type <> MashASTB_Case:
                raise new Exception("Switch block can contain only case blocks." + LnBreak +
                                    "Invalid switch-case construction at line " +
                                    ($lastTk -> line + 1) + " at file '" + $fp + "'.")
              end

              ok ?= true

              if node -> isElse:
                $blockObjectsVect -> push_back(node)
                $blockvect -> push_back(node -> nodes)
                pb -> AddElse(node)
              else:
                block ?= $CurrBlock()
                block -> add(node)

                $blockObjectsVect -> push_back(node)
                $blockvect -> push_back(node -> nodes)
              end
            end

            case MashASTB_Class:
              ok ?= true
              switch node -> type:
                case MashASTB_ClassField:
                  for n in node -> names -> items:
                    pb -> vars -> add(n)
                  end
                end

                case MashASTB_Method:
                  if ~node -> is_class_method:
                    node -> is_class_method ?= true
                    node -> class_name ?= pb -> name

                    $CornerNodes -> add(node)

                    $blockObjectsVect -> push_back(node)
                    $blockvect -> push_back(node -> nodes)
                  else:
                    raise new Exception("Invalid class method ('" +
                                        node -> class_name + "::" +
                                        node -> method_name +
                                        "') declaration at line " +
                                        ($lastTk -> line + 1) + " at file '" + $fp + "'.")
                  end
                end

                case MashASTB_Public:
                end

                case MashASTB_Protected:
                end

                case MashASTB_Private:
                end

                else:
                  raise new Exception("Invalid class field statement at line " +
                                      ($lastTk -> line + 1) + " at file '" + $fp + "'.")
              end
            end
          end
        end

        if ~ok:
          if node -> type == MashASTB_Case:
            raise new Exception("Case statement without switch." + LnBreak +
                                "Invalid switch-case construction at line " +
                                ($lastTk -> line + 1) + " at file '" + $fp + "'.")
          end

          if (node -> type == MashASTB_Enum) & (pb <> null):
            raise new Exception("Enum declaration can't be defined in other constructions." + LnBreak +
                                "Invalid enum declaration at line " +
                                ($lastTk -> line + 1) + " at file '" + $fp + "'.")
          end

          if (node -> type == MashASTB_Class) & (pb <> null):
            raise new Exception("Class declaration can't be defined in other constructions." + LnBreak +
                                "Invalid class declaration at line " +
                                ($lastTk -> line + 1) + " at file '" + $fp + "'.")
          end

          if node -> type in [MashASTB_ClassField, MashASTB_Public, MashASTB_Protected, MashASTB_Private]:
            if pb -> type <> MashASTB_Class:
              raise new Exception("Using class fields declaration without class declaration." + LnBreak +
                                  "Invalid class field declaration at line " +
                                  ($lastTk -> line + 1) + " at file '" + $fp + "'.")
            end
          end

          if node -> type == MashASTB_Class:
            block ?= $CurrBlock()
            block -> add(node)

            $blockObjectsVect -> push_back(node)
            $blockvect -> push_back(null)
          else:
            block ?= $CurrBlock()
            block -> add(node)

            $blockObjectsVect -> push_back(node)
            $blockvect -> push_back(node -> nodes)
          end
        end
      else:
        block ?= $CurrBlock()
        block -> add(node)
      end
    end

    gc()
  end
end



func MashAST::NextNode(token_id):
  token ?= $token(token_id)
  $lastTk ?= token

  switch token -> info:
    case ttToken:
      if token -> value in MashExprTokens:
        return $NextExpr(token_id)
      else:
        // Here we should make structures from tokens
        switch token -> value:

          // Import
          case "import":
            blk ?= new MashASTB_Import($TkWordValue($token(token_id + 1)),
                                       $TkStrValue($token(token_id + 2)),
                                       $TkStrValue($token(token_id + 3)))
            token_id += 4

            /*for imp in $imports_lst -> items:
              if imp -> method_name == blk -> method_name:
                raise new Exception("Second declaration of import '" +
                                    imp -> method_name + "' " +
                                    "at line " + (token -> line + 1) + " at file '" +
                                    $fp + "'.")
              end
            end

            for rg in $regapi_lst -> items:
              if rg -> method_name == blk -> method_name:
                raise new Exception("Second declaration of import '" +
                                    rg -> method_name + "' " +
                                    "at line " + (token -> line + 1) + " at file '" +
                                    $fp + "'.")
              end
            end */

            $imports_lst -> add(blk)

            return null
          end

          // Import
          case "api":
            blk ?= new MashASTB_RegAPI( $TkWordValue($token(token_id + 1)),
                                        $TkValue($TkNotNull($token(token_id + 2))) )

            if $TkCheckType($token(token_id + 2)) == ttDigit:
              if "." in blk -> number:
                raise new Exception("regapi " + blk -> method_name + " <digit> - here must be round unsigned digit (number).")
              end
            else:
              raise new Exception("regapi " + blk -> method_name + " <digit> - here must be round unsigned digit (number).")
            end

            token_id += 3

            for imp in $imports_lst -> items:
              if imp -> method_name == blk -> method_name:
                raise new Exception("Second declaration of import '" +
                                    imp -> method_name + "' " +
                                    "at line " + (token -> line + 1) + " at file '" +
                                    $fp + "'.")
              end
            end

            for rg in $regapi_lst -> items:
              if rg -> method_name == blk -> method_name:
                raise new Exception("Second declaration of regapi '" +
                                    rg -> method_name + "' " +
                                    "at line " + (token -> line + 1) + " at file '" +
                                    $fp + "'.")
              end

              if rg -> number == blk -> number:
                raise new Exception("Two regapi methods defined for one number '" +
                                    rg -> method_name + "', '" + blk -> method_name + "' " +
                                    "at line " + (token -> line + 1) + " at file '" +
                                    $fp + "'.")
              end
            end

            $regapi_lst -> add(blk)

            return null
          end

          // Uses
          case "uses":
            token_id++
            ExprTokens ?= $NextExprTokens(token_id)
            $uses_lst -> add(new MashASTB_Uses(ExprTokens))
            return null
          end

          // Inline
          case "inline":
            block ?= new MashASTB_Inline($TkStrValue($token(token_id + 1)))
            token_id += 2
            return block
          end

          // Const
          case "const":
            if $TkCheck($token(token_id + 2)) == "stream":
              tk ?= $TkNotNull($token(token_id + 1))
              blk ?= new MashASTB_Const($TkWordValue(tk),
                                        $TkNotNull($token(token_id + 3)))
              blk -> isStream = true
              token_id += 4
            else:
              if $TkCheck($token(token_id + 2)) == "-":
                tk ?= $TkNotNull($token(token_id + 3))
                new_tk ?= new MashToken("-" + tk -> value, tk -> info, tk -> line)
                blk ?= new MashASTB_Const($TkWordValue($token(token_id + 1)), new_tk)
                token_id += 4
              else:
                blk ?= new MashASTB_Const($TkWordValue($token(token_id + 1)),
                                          $TkNotNull($token(token_id + 2)))

                token_id += 3
              end

              for c in $const_lst -> items:
                if c -> name == blk -> name:
                  raise new Exception("Duplicate constant name '" + c -> name + "' at line " +
                                      (tk -> line + 1) + " at file '" + $fp + "'.")
                end
              end

              $const_lst -> Add(blk)
            end

            return null
          end

          // Proc
          case "proc":
            if $TkValue($token(token_id + 2)) == "::": //class method
              is_class_method ?= true
              class_name ?= $TkWordValue($token(token_id + 1))
              method_name ?= $TkWordValue($token(token_id + 3))
              token_id += 4
            else:
              is_class_method ?= false
              class_name ?= ""
              method_name ?= $TkWordValue($token(token_id + 1))
              token_id += 2
            end

            method_block ?= new MashASTB_Method(false, method_name,
                                                is_class_method,
                                                class_name, token -> line, $fp)

            if $TkTokenValue($token(token_id)) == "(":
              token_id++

              while $TkValue($token(token_id)) <> ")":
                arg ?= $NextParam(token_id)

                if arg -> count() in [1, 3]:
                  if arg -> count() == 1:
                    p ?= arg -> get(0)
                    if p -> info <> ttWord:
                      raise new Exception("Invalid paramethers declaration at line " +
                                          (token -> line + 1) + " at file '" +
                                          $fp + "'.")
                    end
                    method_block -> params -> add( new MashASTP_SimpleObject(p) )
                  else: // [x]
                    L ?= arg -> get(0)
                    p ?= arg -> get(1)
                    R ?= arg -> get(2)
                    if (L -> value == "[") & (R -> value == "]") & (p -> info == ttWord):
                      method_block -> params -> add( new MashASTP_SpecRectObject(p) )
                    else:
                      raise new Exception("Invalid paramethers declaration at line " +
                                          (token -> line + 1) + " at file '" +
                                          $fp + "'.")
                    end
                  end
                else:
                  raise new Exception("Invalid paramethers declaration at line " +
                                      (token -> line + 1) + " at file '" +
                                      $fp + "'.")
                end

                tk ?= $TkNotNull($token(token_id))
                if (tk -> info == ttEndOfLine) | (tk -> value == ","):
                  token_id++
                else:
                  if tk -> value <> ")":
                    raise new Exception("Missed ')' at line " +
                                        (token -> line + 1) + " at file '" +
                                        $fp + "'.")
                  end
                end
              end

              token_id++
            else:
              raise new Exception("Missed '(' at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end

            if $TkTokenValue($token(token_id)) == ":":
              token_id++
            else:
              raise new Exception("Missed ':' at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end

            return method_block
          end

          // Func
          case "func":
            if $TkValue($token(token_id + 2)) == "::": //class method
              is_class_method ?= true
              class_name ?= $TkWordValue($token(token_id + 1))
              method_name ?= $TkWordValue($token(token_id + 3))
              token_id += 4
            else:
              is_class_method ?= false
              class_name ?= ""
              method_name ?= $TkWordValue($token(token_id + 1))
              token_id += 2
            end

            method_block ?= new MashASTB_Method(true, method_name,
                                                is_class_method,
                                                class_name, token -> line, $fp)

            if $TkTokenValue($token(token_id)) == "(":
              token_id++

              while $TkValue($token(token_id)) <> ")":
                arg ?= $NextParam(token_id)

                if arg -> count() in [1, 3]:
                  if arg -> count() == 1:
                    p ?= arg -> get(0)
                    if p -> info <> ttWord:
                      raise new Exception("Invalid paramethers declaration at line " +
                                          (token -> line + 1) + " at file '" +
                                          $fp + "'.")
                    end
                    method_block -> params -> add( new MashASTP_SimpleObject(p) )
                  else: // [x]
                    L ?= arg -> get(0)
                    p ?= arg -> get(1)
                    R ?= arg -> get(2)
                    if (L -> value == "[") & (R -> value == "]") & (p -> info == ttWord):
                      method_block -> params -> add( new MashASTP_SpecRectObject(p) )
                    else:
                      raise new Exception("Invalid paramethers declaration at line " +
                                          (token -> line + 1) + " at file '" +
                                          $fp + "'.")
                    end
                  end
                else:
                  raise new Exception("Invalid paramethers declaration at line " +
                                      (token -> line + 1) + " at file '" +
                                      $fp + "'.")
                end

                tk ?= $TkNotNull($token(token_id))
                if (tk -> info == ttEndOfLine) | (tk -> value == ","):
                  token_id++
                else:
                  if tk -> value <> ")":
                    raise new Exception("Missed ')' at line " +
                                        (token -> line + 1) + " at file '" +
                                        $fp + "'.")
                  end
                end
              end

              token_id++
            else:
              raise new Exception("Missed '(' at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end

            if $TkTokenValue($token(token_id)) == ":":
              token_id++
            else:
              raise new Exception("Missed ':' at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end

            return method_block
          end

          // End
          case "end":
            if $blockObjectsVect -> size() > 0:
              $blockObjectsVect -> rem_back()
            end

            $blockvect -> rem_back()
            if $blockvect -> size() == 0:
              raise new Exception("Can't find construction start which ending at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end
            token_id++
          end

          // If
          case "if":
            token_id++
            Expr ?= $NextExpr(token_id)
            if $TkTokenValue($token(token_id)) == ":":
              token_id++
              return new MashASTB_If(Expr)
            else:
              raise new Exception("Missed ':' in declaration of if statement at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end
          end

          // Else
          case "else":
            if $TkValue($token(token_id + 1)) <> ":":
              raise new Exception("Missed ':' in declaration of else statement at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end
            token_id += 2

            if $blockObjectsVect -> size() > 0:
              obj ?= $blockObjectsVect -> peek_back()
              if obj -> type == MashASTB_If:
                if obj -> hasElse:
                  raise new Exception("Second 'else' declaration for one block of code at line " +
                                      (token -> line + 1) + " at file '" +
                                      $fp + "'.")
                end

                obj -> hasElse = true

                $blockvect -> rem_back()
                $blockvect -> push_back(obj -> nodesElse)

                return null
              else:
                raise new Exception("Incorrect else using at line " +
                                    (token -> line + 1) + " at file '" +
                                    $fp + "'.")
              end
            end
          end

          case "for":
            token_id++
            // for (<expr>; <expr>; <expr>):
            /*if $TkValue($token(token_id)) == "(":
              token_id++
              println("Stage 1...")
              ExprInit ?= $NextExpr(token_id)
              println("Stage 1")
              if $TkTokenValue($token(token_id)) == ";":
                token_id++
                ExprCond ?= $NextExpr(token_id)
                println("Stage 2")
                if $TkTokenValue($token(token_id)) == ";":
                  token_id++
                  ExprActions ?= $NextExpr(token_id)
                  println("Stage 3")
                  if ($TkTokenValue($token(token_id)) == ")") &
                     ($TkTokenValue($token(token_id + 1)) == ":"):
                    token_id += 2
                    println("Stage 4")
                    return new MashASTB_For(ExprInit, ExprCond, ExprActions)
                  end
                end
              end

              // If no return -> invalid construction
              raise new Exception("Invalid for loop declaration (for(...)?) " +
                                  "at line " + (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            else: */
              // for <var> in/back <expr>:
              ForVar ?= $TkNotNull($token(token_id))
              token_id++
              isBack ?= false

              switch $TkTokenValue($token(token_id)):
                case "in":
                  isBack ?= false
                end

                case "back":
                  isBack ?= true
                end

                else:
                  raise new Exception("Invalid for loop declaration (for in/back?) " +
                                      "at line " + (token -> line + 1) + " at file '" +
                                      $fp + "'.")
              end

              token_id++
              Expr ?= $NextExpr(token_id)
              if $TkTokenValue($token(token_id)) == ":":
                token_id++
                return new MashASTB_ForEach(ForVar, isBack, Expr)
              end

              // If no return -> invalid construction
              raise new Exception("Invalid for loop declaration (for in/back?) " +
                                  "at line " + (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            //end
          end

          // while
          case "while":
            token_id++

            tk ?= $TkNotNull($token(token_id))

            if ($TkValue(tk) == ":") | (tk -> info == ttEndOfLine):
              raise new Exception("Missed expression in while loop statement at line " +
                                  (token -> line + 1) + " at file '" + $fp + "'.")
            end

            Expr ?= $NextExpr(token_id)
            if $TkTokenValue($token(token_id)) == ":":
              token_id++
              return new MashASTB_While(Expr)
            else:
              raise new Exception("Missed ':' in declaration of while statement at line " +
                                  (token -> line + 1) + " at file '." +
                                  $fp + "'")
            end
          end


          // whilst
          case "whilst":
            token_id++

            tk ?= $TkNotNull($token(token_id))

            if ($TkValue(tk) == ":") | (tk -> info == ttEndOfLine):
              raise new Exception("Missed expression in whilst loop statement at line " +
                                  (token -> line + 1) + " at file '" + $fp + "'.")
            end

            Expr ?= $NextExpr(token_id)
            if $TkTokenValue($token(token_id)) == ":":
              token_id++
              return new MashASTB_Whilst(Expr)
            else:
              raise new Exception("Missed ':' in declaration of while statement at line " +
                                  (token -> line + 1) + " at file '." +
                                  $fp + "'")
            end
          end

          case "return":
            token_id++
            Expr ?= $NextExpr(token_id)
            return new MashASTB_Return(Expr)
          end

          case "break":
            token_id++
            return new MashASTB_Break
          end

          case "continue":
            token_id++
            return new MashASTB_Continue
          end

          case "switch":
            token_id++

            if $TkCheck($token(token_id)) == ":":
              raise new Exception("Missed expression in declaration of switch statement at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end

            Expr ?= $NextExpr(token_id)
            if $TkTokenValue($token(token_id)) == ":":
              token_id++
              return new MashASTB_Switch(Expr)
            else:
              raise new Exception("Missed ':' in declaration of switch statement at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end
          end

          case "case":
            token_id++

            if $TkCheck($token(token_id)) == ":":
              raise new Exception("Missed expression in declaration of case statement at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end

            Expr ?= $NextExpr(token_id)
            if $TkTokenValue($token(token_id)) == ":":
              token_id++
              return new MashASTB_Case(Expr, false)
            else:
              raise new Exception("Missed ':' in declaration of case statement at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end
          end

          case "default":
            token_id++
            if $TkTokenValue($token(token_id)) == ":":
              token_id++

              return new MashASTB_Case(null, true)
            else:
              raise new Exception("Missed ':' in declaration of default case statement at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end
          end

          case "launch":
            token_id++
            if $TkTokenValue($token(token_id)) == ":":
              token_id++

              return new MashASTB_Launch()
            else:
              raise new Exception("Missed ':' in declaration of launch block at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end
          end

          case "async":
            token_id++

            if $TkCheck($token(token_id)) == ":":
              raise new Exception("Missed expression in declaration of async block at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end

            forVar ?= $TkWordValue($token(token_id))

            token_id++
            if $TkTokenValue($token(token_id)) == ":":
              token_id++
              return new MashASTB_Async(forVar)
            else:
              raise new Exception("Missed ':' in declaration of async block at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end
          end

          case "wait":
            token_id++
            Expr ?= $NextExpr(token_id)
            return new MashASTB_Wait(Expr)
          end

          // Class block
          case "class":
            token_id++

            if $TkCheck($token(token_id)) == ":":
              raise new Exception("Missed expression in class declaration at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end

            ClassName ?= $TkWordValue($token(token_id))
            token_id++

            blk ?= new MashASTB_Class(ClassName)

            if $TkCheck($token(token_id)) == "(":
              token_id++

              while $TkValue($token(token_id)) <> ")":
                arg ?= $NextParam(token_id)

                if arg -> count() == 1:
                  p ?= arg -> get(0)
                  if p -> info <> ttWord:
                    raise new Exception("Invalid class parents declaration at line " +
                                        (token -> line + 1) + " at file '" +
                                        $fp + "'.")
                  end

                  blk -> parents -> add(p -> value)
                else:
                  raise new Exception("Invalid class parents declaration at line " +
                                      (token -> line + 1) + " at file '" +
                                      $fp + "'.")
                end

                tk ?= $TkNotNull($token(token_id))
                if (tk -> info == ttEndOfLine) | (tk -> value == ","):
                  token_id++
                else:
                  if tk -> value <> ")":
                    raise new Exception("Missed ')' at line " +
                                        (token -> line + 1) + " at file '" +
                                        $fp + "'.")
                  end
                end
              end

              token_id++
            end

            if $TkTokenValue($token(token_id)) == ":":
              token_id++
              return blk
            else:
              raise new Exception("Missed ':' in class declaration at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end
          end

          // Class field
          case "var":
            token_id++

            blk ?= new MashASTB_ClassField()

            tk ?= $TkNotNull($token(token_id))
            token_id++
            while tk -> info == ttWord:
              blk -> names -> add(tk -> value)

              tk ?= $TkNotNull($token(token_id))
              token_id++
              if tk -> value == ",":
                tk ?= $TkNotNull($token(token_id))
                token_id++

                if tk -> info <> ttWord:
                  raise new Exception("Invalid class field declaration at line " +
                                      (tk -> line + 1) + " at file '" + $fp + "'")
                end
              else:
                if (tk -> info <> ttToken) & (tk -> info <> ttEndOfLine):
                  raise new Exception("Invalid class field declaration at line " +
                                      (tk -> line + 1) + " at file '" + $fp + "'")
                end
              end

            end

            return blk
          end

          case "public":
            token_id++
            if $TkTokenValue($token(token_id)) == ":":
              token_id++
              return new MashASTB_Public
            else:
              raise new Exception("Missed ':' in class section declaration at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end
          end

          case "protected":
            token_id++
            if $TkTokenValue($token(token_id)) == ":":
              token_id++
              return new MashASTB_Protected
            else:
              raise new Exception("Missed ':' in class section declaration at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end
          end

          case "private":
            token_id++
            if $TkTokenValue($token(token_id)) == ":":
              token_id++
              return new MashASTB_Private
            else:
              raise new Exception("Missed ':' in class section declaration at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end
          end

          case "try":
            token_id++
            if $TkTokenValue($token(token_id)) == ":":
              token_id++
              return new MashASTB_Try()
            else:
              raise new Exception("Missed ':' in try block declaration at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end
          end

          case "catch":
            token_id++

            forVar ?= $TkWordValue($TkNotNull($token(token_id)))

            token_id++
            if $TkTokenValue($token(token_id)) == ":":
              token_id++

              if $blockObjectsVect -> size() > 0:
                obj ?= $blockObjectsVect -> peek_back()
                if obj -> type == MashASTB_Try:
                  if obj -> hasCatch:
                    raise new Exception("Second 'catch' declaration for one try block at line " +
                                        (token -> line + 1) + " at file '" +
                                        $fp + "'.")
                  end

                  obj -> hasCatch = true
                  obj -> forVar ?= forVar

                  $blockvect -> rem_back()
                  $blockvect -> push_back(obj -> NodesCatch)

                  return null
                else:
                  raise new Exception("Incorrect catch using at line " +
                                      (token -> line + 1) + " at file '" +
                                      $fp + "'.")
                end
              end



            else:
              raise new Exception("Missed ':' in try block declaration at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end
          end

          case "raise":
            token_id++
            Expr ?= $NextExpr(token_id)
            return new MashASTB_Raise(Expr)
          end

          case "safe":
            token_id++
            Expr ?= $NextExpr(token_id)
            return new MashASTB_Safe(Expr)
          end

          case "enum":
            token_id++
            EnumName ?= $TkWordValue($TkNotNull($token(token_id)))
            token_id++

            blk ?= new MashASTB_Enum(EnumName)

            if $TkCheck($token(token_id)) == "[":
              token_id++

              while $TkCheck($token(token_id)) <> "]":
                EnumItemName ?= $TkWordValue($TkNotNull($token(token_id)))
                token_id++

                hasDefVal ?= false
                if $TkCheck($token(token_id)) == "=":
                  token_id++
                  hasDefVal = true

                  hasMinus ?= $TkCheck($token(token_id)) == "-"
                  if hasMinus:
                    token_id++
                  end

                  tk ?= $TkNotNull($token(token_id))
                  token_id++
                  EnumItemValue ?= tk
                  if tk -> info == ttDigit:
                    if hasMinus:
                      EnumItemValue ?= new MashToken("-" + tk -> value, ttDigit, tk -> line)
                    end
                  else:
                    if hasMinus:
                      raise new Exception("'-' not waiting in enum construction (" + EnumName +
                                          ") at line " +
                                          (token -> line + 1) + " at file '" +
                                          $fp + "'.")
                    end

                    if tk -> info <> ttString:
                      raise new Exception("In enum construction (" + EnumName +
                                          ") you can only use digits or strings as default enum item value at line " +
                                          (token -> line + 1) + " at file '" +
                                          $fp + "'.")
                    end
                  end
                end

                EItem ?= new MashASTB_EnumItem(EnumItemName)

                if hasDefVal:
                  EItem -> hasDefValue ?= true
                  EItem -> DefValue ?= EnumItemValue
                end

                blk -> Objects -> add(EItem)

                if $token(token_id) == null:
                  raise new Exception("Unclosed enum construction (" + EnumName +
                                      ") at line " +
                                      (token -> line + 1) + " at file '" +
                                      $fp + "'.")
                end

                if $TkCheck($token(token_id)) == ",":
                  token_id++
                else:
                  tkval ?= $TkCheck($token(token_id))
                  if tkval <> "]":
                    raise new Exception("This token ('" + tkval +
                                        "') should't going next in enum (" + EnumName +
                                        ") items declaration at line " +
                                        (token -> line + 1) + " at file '" +
                                        $fp + "'.")
                  end
                end
              end
            else:
              raise new Exception("After enum name (" + EnumName +
                                  ") should going values in [...] at line " +
                                  (token -> line + 1) + " at file '" +
                                  $fp + "'.")
            end

            return blk
          end

          // Token shouldn't be first
          else:
            raise new Exception("Invalid construction (starts with '" + token -> value +
                                "') at line " + (token -> line + 1) + " at file '" + $fp + "'.")
        end
      end
    end

    case ttDigit:
      return $NextExpr(token_id)
    end

    case ttString:
      return $NextExpr(token_id)
    end

    case ttWord:
      return $NextExpr(token_id)
    end

    case ttEndOfLine:
      token_id++
      return null
    end

    else:
      raise new Exception("Invalid expression (starts with '" + token -> value +
                          "') at line " + (token -> line + 1) + " at file '" + $fp + "'.")
  end
  return null
end



func MashAST::NextExprTokens(token_id):
  ExprTokens ?= new list()
  tk ?= null
  br_cnt ?= 0

  whilst tk <> null:
    tk ?= $token(token_id)

    if tk <> null:
      if ((tk -> value in MashExprTokens) & (tk -> info == ttToken)) |
         (tk -> info in [ttWord, ttDigit, ttString]):

        switch tk -> value:
          case "(":
            br_cnt++
          end

          case ")":
            br_cnt--
          end
        end

        if br_cnt < 0:
          break
        end

        ExprTokens -> add(tk)
        token_id++
      else:
        tk ?= null
      end
    end
  end

  return ExprTokens
end



func MashAST::NextExpr(token_id):
  ExprTokens ?= $NextExprTokens(token_id)

  vect ?= new vector()
  Expr ?= new MashExpressionAST(ExprTokens, $fp, vect)
  Expr -> Process()

  while vect -> size() > 0:
    SubExpr ?= vect -> pop_back()
    SubExpr -> Process()
  end

  return Expr
end



func MashAST::NextParam(token_id):
  p ?= new list()
  tk ?= null

  whilst tk <> null:
    tk ?= $token(token_id)

    if tk <> null:
      if (tk -> value in MashParamsTokens) &
         (tk -> info == ttToken) |
         (tk -> info == ttWord):
        p -> add(tk)
        token_id++
      else:
        tk ?= null
      end
    end
  end

  return p
end
