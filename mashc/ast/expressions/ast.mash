uses <classes\vector>
uses <classes\list>
uses "ast\base\ast.mash"
uses "ast\blocks.mash"
uses "ast\expressions\blocks.mash"

class MashExpressionAST(MashBaseAST):
  protected:
    var stk,
        nodes,
        astvect,
        treevect,
        treeNode

  public:
    proc Create,
         Process

  private:
    proc NextPrimitive,
         NextBraces,
         NextRectBraces,
         MakeEnum

    func PrepareNodes
    func MakeTree
end

proc MashExpressionAST::Create(tokens, fp, vect):
  MashBaseAST::Create$(tokens, fp)

  $astvect ?= vect
  $treevect ?= new vector()

  $stk ?= new list()
  $nodes ?= new list()
  $treeNode ?= null
end

proc MashExpressionAST::Process():
  token_id ?= 0

  while token_id < $tokens -> count():
    prim ?= $NextPrimitive(token_id)
    token_id++

    if prim <> null:
      $nodes -> add(prim)
    end

    gc()
  end

  $treeNode ?= $MakeTree($nodes)
  while $treevect -> size() > 0:
    Node ?= $treevect -> pop_first()
    L ?= $MakeTree(Node -> L)
    R ?= $MakeTree(Node -> R)
    Node -> L ?= L
    Node -> R ?= R
  end
end

func MashExpressionAST::PrepareNodes(nodes):
  new_nodes ?= new list()
  for n in nodes -> items:
    new_nodes -> add(n)
  end
  nodes ?= new_nodes

  // Checking for left ops: <op> R
  i ?= nodes -> count() - 1
  while i >= 0:
    n ?= nodes -> get(i)
    if n -> type == MashASTP_Operator:
      if n -> Op -> short in MashOperationLeftShort:
        founded ?= false
        if i == 0:
          founded = true
        else:
          n2 ?= nodes -> get(i - 1)
          if n2 -> type == MashASTP_Operator:
            founded = true
          end
        end

        if (nodes -> count() - 1 > i) & founded:
          op ?= n
          n ?= nodes -> items[i + 1]
          nodes -> delete(i + 1)
          nodes -> items[i] ?= new MashASTE_Operation(n, op)
        end
      end
    end

    i--
  end

  // Checking for right ops: L <op>
  i ?= 0
  while i < nodes -> count():
    n ?= nodes -> get(i)
    if n -> type == MashASTP_Operator:
      if n -> Op -> short in MashOperationRightShort:
        founded ?= false
        if i + 1 == nodes -> count():
          founded = true
        else:
          n2 ?= nodes -> get(i + 1)
          if n2 -> type == MashASTP_Operator:
            founded = true
          end
        end

        if (i > 0) & founded:
          op ?= n
          n ?= nodes -> items[i - 1]
          nodes -> delete(i)
          nodes -> items[i - 1] ?= new MashASTE_Operation(n, op)
        end
      end
    end

    i++
  end

  return nodes
end

func MashExpressionAST::MakeTree(nodes):
  nodes ?= $PrepareNodes(nodes)

  left ?= new list()
  right ?= new list()
  op ?= null
  op_obj ?= null
  op_lvl ?= 0

  while (op == null) & (op_lvl < 7):
    i ?= nodes -> count() - 1
    for n back nodes -> items:
      if n -> type == MashASTP_Operator:
        if n -> Op -> short in MashOperationsPriorityShort[op_lvl]:
          op ?= i
          op_obj ?= n
          break
        end
      end

      i--
    end
    op_lvl++
  end

  if op <> null:
    i ?= 0
    while i < op:
      left -> add(nodes -> get(i))
      i++
    end
    i++

    while i < nodes -> count():
      right -> add(nodes -> get(i))
      i++
    end

    if (left -> count() > 0) & (right -> count() > 0): // L <op> R
      Res ?= new MashASTE_OperationLR(null, null, op_obj)
      Res -> L ?= left
      Res -> R ?= right
      $treevect -> push_back(Res)

      return Res
    end
  end

  if nodes -> count() == 1:
    return nodes -> get(0)
  end

  // If don't return anything -> Error
  raise new Exception("Invalid expression at line " + ($lastTk -> line + 1) +
                      " at file '" + $fp + "'.")
end

func MashExpressionAST::NextPrimitive(token_id):
  token ?= $token(token_id)
  $lastTk ?= token

  if (token -> info in [ttDigit, ttString, ttWord]) | (token -> short == tkNew):
    Obj ?= null

    MashExpressionAST_NextPrimitive_Lp:

    if ($TkCheckShort($token(token_id + 1)) == tkByPtr) & (token -> info == ttWord):
      if Obj == null:
        Obj ?= new MashASTP_ObjectByRef()
        Obj -> ObjPath -> Add(new MashASTP_SimpleObject(token))
      else:
        NewObj ?= new MashASTP_ObjectByRef()
        NewObj -> ObjPath -> Add(Obj)
        Obj ?= NewObj
      end

      while ($TkCheckShort($token(token_id + 1)) == tkByPtr) &
            ($TkCheckType($token(token_id + 2)) == ttWord):
        token_id += 2
        tk ?= $token(token_id)
        tk -> value ?= "vtable__" + tk -> value
        Obj -> ObjPath -> Add( new MashASTP_SimpleObject(tk) )
      end

      tk ?= $token(token_id + 1)
      if $TkCheckShort(tk) == tkByPtr:
        raise new Exception("Invalid token after -> at line " + (tk -> line + 1) +
                            " at file '" + $fp + "'.")
      end
    end

    if Obj == null:
      if token -> short == tkNew:
        if $TkCheckShort($token(token_id + 1)) == tkORBr:
          Obj ?= new MashASTP_SimpleObject(token)
        else:
          Obj ?= new MashASTP_Operator(token)
        end
      else:
        Obj ?= new MashASTP_SimpleObject(token)
      end
    end

    if $TkCheckShort($token(token_id + 1)) == tkOBr:
      token_id++
      ArgsBraces ?= $NextBraces(token_id)
      ArgsEnum ?= $MakeEnum(ArgsBraces)

      ObjCall ?= new MashASTP_Call(Obj, ArgsEnum)
      Obj ?= ObjCall
    end

    if $TkCheckShort($token(token_id + 1)) == tkORBr:
      token_id++
      IndexesEnum ?= new MashASTP_Enum()

      while true:
        NextRBraces ?= $NextRectBraces(token_id)
        Index ?= new MashExpressionAST(NextRBraces, $fp, $astvect)
        $astvect -> push_back(Index)
        IndexesEnum -> Objects -> Add(Index)

        if $TkCheckShort($token(token_id + 1)) == tkORBr:
          token_id++
        else:
          break
        end
      end

      ObjIndexed ?= new MashASTP_IndexedObject(Obj, IndexesEnum)
      Obj ?= ObjIndexed
    end

    if $TkCheckShort($token(token_id + 1)) in [tkByPtr, tkOBr, tkORBr]:
      jump MashExpressionAST_NextPrimitive_Lp
    end

    return Obj
  else:
    // Check for operators
    if token -> info == ttToken:
      switch token -> short:
        case tkOBr:
          ExprTokens ?= $NextBraces(token_id)
          Expr ?= new MashExpressionAST(ExprTokens, $fp, $astvect)
          //Expr -> Process()
          $astvect -> push_back(Expr)
          return Expr
        end

        case tkORbr:
          return $MakeEnum($NextRectBraces(token_id))
        end

        else:
          return new MashASTP_Operator(token)
      end
    end
  end
end


func MashExpressionAST::NextBraces(token_id):
  brace_cnt ?= 1
  SubExpr ?= new list()

  while brace_cnt > 0:
    token_id++
    tk ?= $token(token_id)

    if tk == null:
      raise new Exception("Unclosed '(' at line " + (token -> line + 1) +
                          " at file '" + $fp + "'.")
    end

    if tk -> info <> ttEndOfLine:
      switch tk -> short:
        case tkOBr:
          brace_cnt++
        end

        case tkCBr:
          brace_cnt--
        end
      end

      if brace_cnt > 0:
        SubExpr -> add(tk)
      end
    end
  end

  return SubExpr
end

func MashExpressionAST::NextRectBraces(token_id):
  brace_cnt ?= 1
  SubExpr ?= new list()

  while brace_cnt > 0:
    token_id++
    tk ?= $token(token_id)

    if tk == null:
      raise new Exception("Unclosed '[' at line " + (token -> line + 1) +
                          " at file '" + $fp + "'.")
    end

    if tk -> info <> ttEndOfLine:
      switch tk -> short:
        case tkORBr:
          brace_cnt++
        end

        case tkCRBr:
          brace_cnt--
        end
      end

      if brace_cnt > 0:
        SubExpr -> add(tk)
      end
    end
  end

  return SubExpr
end


func MashExpressionAST::MakeEnum(tokens):
  Res ?= new MashASTP_Enum()
  Expr ?= new list()

  br_cnt ?= 0
  rbr_cnt ?= 0

  for tk in tokens -> items:
    switch tk -> short:
      case tkOBr:
        br_cnt++
        Expr -> add(tk)
      end

      case tkCBr:
        br_cnt--
        Expr -> add(tk)
      end

      case tkORBr:
        rbr_cnt++
        Expr -> add(tk)
      end

      case tkCRBr:
        rbr_cnt--
        Expr -> add(tk)
      end

      case tkComma:
        if (br_cnt == 0) & (rbr_cnt == 0):
          Itm ?= new MashExpressionAST(Expr, $fp, $astvect)
          $astvect -> push_back(Itm)
          Res -> Objects -> add(Itm)
          Expr ?= new list()
        else:
          Expr -> add(tk)
        end
      end

      else:
        Expr -> add(tk)
    end
  end

  if Expr -> count() > 0:
    Itm ?= new MashExpressionAST(Expr, $fp, $astvect)
    $astvect -> push_back(Itm)
    Res -> Objects -> add(Itm)
  end

  return Res
end
