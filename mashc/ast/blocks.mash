uses <classes\list>
uses "parser\token.mash"

/*
 *  Constructions
 */

// Import
class MashASTB_Import:
  var method_name, lib, name
  proc create
end

proc MashASTB_Import::Create(m_name, lib, name):
  $method_name ?= m_name
  $lib ?= lib
  $name ?= name
end

// RegAPI
class MashASTB_RegAPI:
  var method_name, number
  proc create
end

proc MashASTB_RegAPI::Create(m_name, num):
  $method_name ?= m_name
  $number ?= num
end


// Uses
class MashASTB_Uses:
  var expr
  proc create
end

proc MashASTB_Uses::Create(expr):
  $expr ?= expr
end



// Inline
class MashASTB_Inline:
  var val
  proc create
end

proc MashASTB_Inline::Create(val):
  $val ?= val
end



// Const
class MashASTB_Const:
  var Name, Value, isStream
  proc create
end

proc MashASTB_Const::Create(Name, Value):
  $Name ?= Name
  $Value ?= Value
  $isStream ?= false
end



// Method
class MashASTB_Method:
  var is_function, method_name, is_class_method, class_name,
      params,
      nodes,

      line, fp,

      // For sem & gen
      varlist

  proc create
end

proc MashASTB_Method::Create(is_function, method_name, is_class_method,
                             class_name, line, fp):
  $is_function ?= is_function
  $method_name ?= method_name
  $is_class_method ?= is_class_method
  $class_name ?= class_name

  $params ?= new list()
  $nodes ?= new list()

  $line ?= line
  $fp ?= fp

  $varlist ?= new list()
end



// If
class MashASTB_If:
  var Expr, Nodes, hasElse, NodesElse
  proc Create
end

proc MashASTB_If::Create(Expr):
  $Expr ?= Expr
  $nodes ?= new list()
  $hasElse ?= false
  $nodesElse ?= new list()
end


// For each (in/back)
class MashASTB_ForEach:
  var forVar, isBack, Expr,
      Nodes

  proc Create
end

proc MashASTB_ForEach::Create(forVar, isBack, Expr):
  $forVar ?= forVar
  $isBack ?= isBack
  $Expr ?= Expr

  $Nodes ?= new list()
end



// While
class MashASTB_While:
  var Expr, Nodes
  proc Create
end

proc MashASTB_While::Create(Expr):
  $Expr ?= Expr
  $nodes ?= new list()
end

class MashASTB_Whilst:
  var Expr, Nodes
  proc Create
end

proc MashASTB_Whilst::Create(Expr):
  $Expr ?= Expr
  $nodes ?= new list()
end

// Return
class MashASTB_Return:
  var Expr
  proc Create
end

proc MashASTB_Return::Create(Expr):
  $Expr ?= Expr
end

// Switch & case
class MashASTB_Switch():
  var Expr, Nodes, hasElse, caseElse
  proc Create,
       AddElse
end

proc MashASTB_Switch::Create(Expr):
  $Expr ?= Expr
  $Nodes ?= new list()
  $hasElse ?= false
  $caseElse ?= null
end

proc MashASTB_Switch::AddElse(c):
  if $hasElse:
    raise new Exception("Switch block can'h have more than one else case.")
  else:
    $caseElse ?= c
    $hasElse = true
  end
end

class MashASTB_Case:
  var Expr, isElse, Nodes
  proc Create
end

proc MashASTB_Case::Create(Expr, isElse):
  $Expr ?= Expr
  $isElse ?= isElse
  $Nodes ?= new list()
end

// Launch
class MashASTB_Launch:
  var Nodes
  proc Create
end

proc MashASTB_Launch::Create():
  $Nodes ?= new list()
end

// Async
class MashASTB_Async:
  var Nodes, forVar
  proc Create
end

proc MashASTB_Async::Create(forVar):
  $Nodes ?= new list()
  $forVar ?= forVar
end

// Wait
class MashASTB_Wait:
  var Expr
  proc Create
end

proc MashASTB_Wait::Create(Expr):
  $Expr ?= Expr
end

// Break & Continue
class MashASTB_Break:
end

class MashASTB_Continue:
end

// Class

class MashASTB_Class:
  var name, vars, methods, parents
  proc create
end

proc MashASTB_Class::Create(name):
  $name ?= name
  $vars ?= new list()
  $methods ?= new list()
  $parents ?= new list()
end

class MashClassMethodRef:
  var name, reference
  proc Create
end

proc MashClassMethodRef::Create(name, r):
  $name ?= name
  $reference ?= r
end


// Class fields
class MashASTB_ClassField:
  var names
  proc Create
end

proc MashASTB_ClassField::Create():
  $names ?= new list()
end

// Sections
class MashASTB_Public:
end

class MashASTB_Private:
end

class MashASTB_Protected:
end

// Try..catch & raise
class MashASTB_Try:
  var Nodes, hasCatch, NodesCatch, forVar
  proc Create
end

proc MashASTB_Try::Create():
  $nodes ?= new list()
  $hasCatch ?= false
  $NodesCatch ?= new list()
  $forVar ?= null
end


class MashASTB_Raise:
  var Expr
  proc Create
end

proc MashASTB_Raise::Create(Expr):
  $Expr ?= Expr
end

// Safe
class MashASTB_Safe:
  var Expr
  proc Create
end

proc MashASTB_Safe::Create(Expr):
  $Expr ?= Expr
end

// Enum
class MashASTB_Enum:
  var Name, Objects
  proc Create
end

proc MashASTB_Enum::Create(Name):
  $Name ?= Name
  $Objects ?= new list()
end

class MashASTB_EnumItem:
  var Name, hasDefValue, DefValue
  proc Create
end

proc MashASTB_EnumItem::Create(Name):
  $Name ?= Name
  $hasDefValue ?= false
  $DefValue ?= null
end

/*
 *  Expressions & other
 */
class MashASTB_Expression:
  var tokens
  proc create
end

proc MashASTB_Expression::Create():
  $tokens ?= new list()
end
