/*
 *  That module contains implementation's of some algorithms.
 */

proc ReverseArray(arr):
  l ?= len(arr)
  i ?= 0
  while i < (l \ 2):
    _ ?= arr[l - i - 1]
    arr[l - i - 1] ?= arr[i]
    arr[i] ?= _
    i++
  end
end

func GetMax(arr, n):
  mx ?= arr[0]
  i ?= 1
  while i < n:
    if arr[i] > mx: mx = arr[i] end
    i++
  end
  return mx
end

func GetMin(arr, n):
  mn ?= arr[0]
  i ?= 1
  while i < n:
    if arr[i] < mn: mn = arr[i] end
    i++
  end
  return mn
end

/*
 *  Quick sorting algorithm implementation.
 */

func Partition(arr, low, high):
  i ?= low - 1
  pivot ?= arr[high]

  for j in low..high:
    if arr[j] < pivot:
      i++
      _ ?= arr[i]
      arr[i] ?= arr[j]
      arr[j] ?= _
    end
  end

  _ ?= arr[i + 1]
  arr[i + 1] ?= arr[high]
  arr[high] ?= _

  return i + 1
end

proc FromToQSort(arr, low, high):
  if low < high:
    pi ?= partition(arr,low,high)
    safe FromToQSort(arr, low, pi - 1)
    safe FromToQSort(arr, pi + 1, high)
  end
end

proc QuickSort(arr):
  FromToQSort(arr, 0, len(arr) - 1)
  return arr
end


/*
 *  Binary search
 */
func FromToBinSearch(arr, left, right, key):
  while true:
    midd ?= (left + right) \ 2

    if key < arr[midd]:
      right ?= midd - 1
    else:
      if key > arr[midd]:
        left ?= midd + 1
      else:
        return midd
      end
    end

    if left > right:
      return null
    end
  end
end

func BinSearch(arr, key):
  l ?= len(arr)
  if l > 0:
    return FromToBinSearch(arr, 0, l - 1, key)
  else:
    return null
  end
end

func FromToBinNext(arr, left, right, key):
  while true:
    midd ?= (left + right) \ 2

    if key < arr[midd]:
      right ?= midd - 1
    else:
      if key > arr[midd]:
        left ?= midd + 1
      else:
        return midd
      end
    end

    if left > right:
      return midd
    end
  end
end

func BinNext(arr, key):
  l ?= len(arr)
  if l > 0:
    r ?= FromToBinNext(arr, 0, l - 1, key)
    if arr[r] > key:
      return r
    else:
      return r + 1
    end
  else:
    return 0
  end
end

/*
 * Interpolar search
 */

func FromToInterpolarSearch(arr, left, right, key):
  pos ?= 0
  found ?= false

  while (arr[left] < key) & (arr[right] > key) & (~found):

    pos = left + (key - arr[left]) * (right - left) / (arr[right] - arr[left])

    if arr[pos] < key:
      left = pos + 1
    else:
      if arr[pos] > key:
        right = pos - 1
      else:
        found = true
      end
    end
  end

  if found:
    return pos
  else:
    return null
  end
end

func InterpolarSearch(arr, key):
  l ?= len(arr)
  if l > 0:
    return FromToInterpolarSearch(arr, 0, l - 1, key)
  else:
    return null
  end
end
