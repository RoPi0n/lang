/*
 *  Little framework for draw plots.
 */

uses math.base
uses math.complex
uses graph

enum MPlotType [ MPlot_Decart, MPlot_Polar ]
const MPlot_DefScale -1

MPlot -> Define()

class MPlot:
  public:
    var Decart, Polar, DefScale

  private:
    var MaxX, MaxY, StepsX,
        X0, Y0, DrawingInProcess

    proc Define():
      $Decart ?= MPlot_Decart
      $Polar ?= MPlot_Polar
      $DefScale ?= MPlot_DefScale
    end

  public:
    var scType, scScale

    init(scType, scScale):
      $scType ?= scType

      if scScale == MPlot_DefScale:
        $scScale ?= 100
      else:
        $scScale ?= scScale
      end

      $DrawingInProcess ?= false

      Graph -> Initialize()
      $MaxX ?= Graph -> GetMaxX()
      $MaxY ?= Graph -> GetMaxY()

      $stepsX ?= $MaxX \ $scScale \ 2 + 1

      $x0 ?= $MaxX \ 2
      $y0 ?= $MaxY \ 2

      switch $scType:
        case MPlot_Decart:
          $DrawDecart()
        end

        case MPlot_Polar:
          $DrawPolar()
        end

        default:
          raise new Exception("Math.Plot::Create() -> Invalid plot type!")
        end
      end
    end
end

/*
 *  Math.Plot initialization:
 */

proc MPlot::DrawDecart():
  steps ?= $MaxX \ $scScale \ 2

  Graph -> MoveTo($x0, 0)
  Graph -> LineTo($x0, $MaxY)

  Graph -> MoveTo(0, $y0)
  Graph -> LineTo($MaxX, $y0)

  i ?= -steps
  while i < steps:
    x ?= $x0 + $scScale * i
    Graph -> MoveTo(x, $y0)
    Graph -> LineTo(x, $y0 + 5)
    Graph -> LineTo(x, $y0 - 5)

    y ?= $y0 + $scScale * i
    Graph -> MoveTo($x0, y)
    Graph -> LineTo($x0 + 5, y)
    Graph -> LineTo($x0 - 5, y)

    i++
  end

  Graph -> SetColor(Graph_Blue)

  Graph -> MoveTo($x0 + 10, $y0 - $scScale)
  Graph -> OutText( str(1) )

  Graph -> MoveTo($x0 + 10, $y0 + $scScale)
  Graph -> OutText( str(-1) )

  Graph -> MoveTo($x0 + $scScale, $y0 + 10)
  Graph -> OutText( str(1) )

  Graph -> MoveTo($x0 - $scScale, $y0 + 10)
  Graph -> OutText( str(-1) )

  Graph -> MoveTo($x0 + 10, $y0 + 10)
  Graph -> OutText( str(0) )

  Graph -> SetColor(Graph_Black)
end

proc MPlot::DrawPolar():
  steps ?= $MaxX \ $scScale \ 2

  Graph -> MoveTo($x0, 0)
  Graph -> LineTo($x0, $MaxY)

  Graph -> MoveTo(0, $y0)
  Graph -> LineTo($MaxX, $y0)

  Graph -> SetColor(Graph_LightGray)
  i ?= 1
  while i < (steps + 4):
    Graph -> Ellipse($x0, $y0, 0, 360, $scScale * i, $scScale * i)
    i++
  end

  Graph -> MoveTo($x0 - 2000, $y0 + 2000)
  Graph -> LineTo($x0 + 2000, $y0 - 2000)

  Graph -> MoveTo($x0 + 2000, $y0 + 2000)
  Graph -> LineTo($x0 - 2000, $y0 - 2000)

  Graph -> SetColor(Graph_Blue)

  Graph -> MoveTo($x0 + 10, $y0 - $scScale)
  Graph -> OutText( str(1) )

  Graph -> MoveTo($x0 + 10, $y0 + $scScale)
  Graph -> OutText( str(-1) )

  Graph -> MoveTo($x0 + $scScale, $y0 + 10)
  Graph -> OutText( str(1) )

  Graph -> MoveTo($x0 - $scScale, $y0 + 10)
  Graph -> OutText( str(-1) )

  Graph -> MoveTo($x0 + 10, $y0 + 10)
  Graph -> OutText( str(0) )

  Graph -> SetColor(Graph_Black)
end

/*
 *  X & Y coords offsets
 */

func MPlot::OffsetX(x):
  return $x0 + Trunc(x * $scScale)
end

func MPlot::OffsetY(y):
  return $y0 - Trunc(y * $scScale)
end

/*
 *  Drawing splains point by point
 */

proc MPlot::NextPoint(x, y):
  pX ?= $OffsetX(x)
  pY ?= $OffsetY(y)

  if $DrawingInProcess:
    Graph -> LineTo(pX, pY)
  else:
    Graph -> MoveTo(pX, pY)
    $DrawingInProcess = true
  end
end

proc MPlot::NextPolar(length, angle):
  vect ?= cmath -> uniteViaExp(length, angle)
  $NextPoint(vect -> Re, vect -> Im)
end

proc MPlot::BreakSpline():
  if $DrawingInProcess:
    $DrawingInProcess = false
    Graph -> Ellipse(Graph -> GetX(), Graph -> GetY(), 0, 360, 4, 4)
  end
end

proc MPlot::Finish():
  $DrawingInProcess = false
end

proc MPlot::Next(i, res):
  switch $scType:
    case MPlot -> Decart:
      $NextPoint(i, res)
    end

    case MPlot -> Polar:
      $NextPolar(res, i)
    end

    default:
      raise new Exception("MPlot::Next() -> Invalid plot type!")
    end
  end
end

proc MPlot::Dot(i, res):
  switch $scType:
    case MPlot -> Decart:
      Graph -> FillEllipse($OffsetX(i), $OffsetY(res), 2, 2)
    end

    case MPlot -> Polar:
      cn ?= cmath -> uniteViaExp(i, res)
      Graph -> FillEllipse($OffsetX(cn -> Re), $OffsetY(cn -> Im), 2, 2)
    end

    default:
      raise new Exception("MPlot::Dot() -> Invalid plot type!")
    end
  end
end

proc MPlot::Function(fun, from, to, step):
  first ?= true
  i ?= copy(from)

  while i < to:
    try:
      r ?= Fun(i)
      if r == null:
        $BreakSpline()
      else:
        if $DrawingInProcess | first:
          first = false
          $Next(i, r)
        else:
          if ~first:
            $Next(i, r)
            Graph -> Ellipse(Graph -> GetX(), Graph -> GetY(), 0, 360, 4, 4)
          end
        end
      end
    catch E: // Catching math exception
      $BreakSpline()
    end

    gc()
    i += step
  end

  $DrawingInProcess ?= false
end

proc MPlot::Draw(fun):
  switch $scType:
    case MPlot -> Decart:
      $Function(fun, -$stepsX, $stepsX, 0.01)
    end

    case MPlot -> Polar:
      $Function(fun, 0, 90, 0.01)
    end

    default:
      raise new Exception("MPlot::Draw() - Invalid plot type!")
    end
  end
end
