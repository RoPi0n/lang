// Mash lang threads unit
// Code version: 1.1

uses classes.vector

// common methods

proc thr_create(method, arg):
  inline "push thr_create.arg"
  inline "push thr_create.method"
  inline "cthr"
end

proc thr_async(method, arg):
  inline "push thr_async.arg"
  inline "push thr_async.method"
  inline "cthr"
  inline "rthr"
end

proc thr_resume(thr):
  inline "push thr_resume.thr"
  inline "rthr"
end

proc thr_suspend(thr):
  inline "push thr_suspend.thr"
  inline "sthr"
end

proc thr_terminate(thr):
  inline "push thr_terminate.thr"
  inline "tthr"
end

enum ThreadPriority [tpIdle,
                     tpLowest,
                     tpLower,
                     tpNormal,
                     tpHigher,
                     tpHighest,
                     tpTimeCritical]

proc thr_setpriority(thr, priority):
  inline "push thr_setpriority.priority"
  inline "push thr_setpriority.thr"
  inline "thsp"
end

proc thr_kill(thr):
  thr_suspend(thr)
  thr_terminate(thr)
end

////////////////////////////////////////////////////////////////////////////////
// Thread controller class
////////////////////////////////////////////////////////////////////////////////

proc TThread_Join(CurrentThreadContext, ThreadClass):
  ThreadClass -> Execute()
  ThreadClass -> Terminate()
end

class TThread:
  private:
    var ThreadContext

  public:
    var Resumed,
        Terminated

    proc Execute():
      // method for overriding
    end

    init(Resumed):
      $Resumed ?= false
      $Terminated ?= false
      $ThreadContext ?= thr_create(TThread_Join, this)
      if Resumed:  $Resume()  end
    end

    proc Free():
      if ~$Terminated:  $Terminate()  end
    end

    proc ReJoin(Resumed):
      $ThreadContext ?= thread(TThread_Join, this)
      if Resumed:  $Resume()  end
    end

    proc Suspend():
      thr_suspend($ThreadContext)
      $Resumed = false
    end

    proc Resume():
      thr_resume($ThreadContext)
      $Resumed = true
    end

    proc SetPriority(priority):
      thr_setpriority($ThreadContext, priority)
    end

    proc Terminate():
      $Resumed = false
      $Terminated = true
      thr_terminate($ThreadContext)
    end

    proc WaitFor():
      while ~$Terminated:
        Sleep(1)
        gc()
      end
    end
end

////////////////////////////////////////////////////////////////////////////////
//  TThreadCall
////////////////////////////////////////////////////////////////////////////////

class TThreadCall(TThread):
  var Method, Args

  init(Method, Args, Resumed):
    $Method ?= Method
    $Args ?= Args
    super(Resumed)
  end

  proc Execute():
    while $Args -> Size() > 0:
      $Args -> pop_back()
    end

    $Method()
  end
end

////////////////////////////////////////////////////////////////////////////////
//  go() & Thread()
////////////////////////////////////////////////////////////////////////////////

func go(method, [args]):
  args_vect ?= new vector()
  for arg in args:
    args_vect -> push_back(arg)
  end
  return new TThreadCall(method, args_vect, true)
end

func Thread(method, [args]):
  args_vect ?= new vector()
  for arg in args:
    args_vect -> push_back(arg)
  end
  return new TThreadCall(method, args_vect, false)
end
