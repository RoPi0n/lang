uses crt
uses classes.points
uses threads
uses sync

class game_io:
  proc PrintXY(x, y, c):
    crt -> gotoXY(x, y)
    print(c)
  end

  proc DrawWindow():
    crt -> clrscr()

    for i in 1..40:
      $PrintXY(i, 1, "#")
      $PrintXY(i, 20, "#")
    end

    for i in 2..19:
      $PrintXY(1, i, "#")
      $PrintXY(40, i, "#")
    end

    $PrintXY(44, 4, "Snake, written in Mash 1.2!")
    $PrintXY(44, 5, "Score: 0")
  end

  proc GameOver(score):
    crt -> clrscr()
    $PrintXY(1, 1, "Game over!")
    $PrintXY(1, 2, "Your score: " + score)
    $PrintXY(1, 4, "Want play again? (Y/N): ")
    crt -> CursorOn()
  end
end

move_vectors ?= [
  new point( 0, -1), // W
  new point(-1,  0), // A
  new point( 0,  1), // S
  new point( 1,  0)  // D
]

class game_state:
  var moving,
      lastindx, indx,
      cs

  init():
    $cs ?= new CriticalSection()
    $lastindx ?= 3
    $indx ?= 3
    $moving ?= new point(1, 0)
  end

  proc Move(indx):
    $cs -> Enter()
    $indx ?= indx
    $cs -> Leave()
  end

  func GetMoving():
    $cs -> Enter()

    if ~(($lastindx in [0, 2]) & ($indx in [0, 2])) &
       ~(($lastindx in [1, 3]) & ($indx in [1, 3])):
      $moving -> x = move_vectors[$indx] -> x
      $moving -> y = move_vectors[$indx] -> y
    end
    $lastindx = $indx

    r ?= $moving -> clone()
    $cs -> Leave()

    return r
  end
end

class game_input(TThread):
  var state

  init(state):
    $state ?= state
    super(true)
  end

  proc Execute():
    while ~$Terminated:
      k ?= StrUpper(crt -> ReadKey())

      switch k:
        case "W": $state -> Move(0) end
        case "A": $state -> Move(1) end
        case "S": $state -> Move(2) end
        case "D": $state -> Move(3) end
      end

      gc()
      sleep(10)
    end
  end
end
