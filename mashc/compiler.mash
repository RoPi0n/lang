uses <classes\stringlist>
uses "parser\parser.mash"
uses "ast\ast.mash"
uses "sem\sem.mash"
uses "gen\gen.mash"
uses <files>

class MashCompiler:
  protected:
    var fp, destp

  public:
    proc Create,
         Compile
end

proc MashCompiler::Create(fp, destp):
  $fp ?= fp
  $destp ?= destp
end

proc MashCompiler::Compile():
  mainpath ?= copy($fp)
  while ~(mainpath[len(mainpath) - 1] in ["\", "/"]):
    s_del(mainpath, len(mainpath) - 1, 1)

    if len(mainpath) == 0:
      break
    end
  end

  try:
    code ?= new StringList()
    code -> LoadFromFile($fp)
  catch E:
    raise new Exception("Can't open file '" + $fp + "'.")
  end

  parser ?= new MashParser(code, $fp)
  parser -> Parse()

  imports_lst ?= new list()
  uses_lst ?= new list()
  const_lst ?= new list()
  ast_lst ?= new list()

  ast ?= new MashAST(parser -> tokens, $fp, imports_lst, uses_lst, const_lst)
  ast_lst -> add(ast)
  ast -> process()

  // Including inc/sys.mash
  path ?= "inc\sys.mash"
  try:
    code ?= new StringList()
    code -> LoadFromFile(path)
  catch E:
    raise new Exception("Can't open file '" + path + "'.")
  end

  parser ?= new MashParser(code, path)
  parser -> Parse()

  ast ?= new MashAST(parser -> tokens, path, imports_lst, uses_lst, const_lst)
  ast_lst -> add(ast)
  ast -> process()


  // Checking another uses
  i ?= 0
  while i < uses_lst -> count():
    u ?= uses_lst -> get(i)
    path ?= ""
    ftk ?= u -> expr -> get(0)
    if (u -> expr -> count() == 1) & (ftk -> info == ttString):
      path = mainpath + ftk -> value
    else:
      path = "inc\"
      for tk in u -> expr -> items:
        if tk -> info == ttToken:
          if tk -> value == ".":
            path += "\"
          else:
            raise new Exception("Invalid uses at line " + (tk -> line + 1) +
                                " at file '" + $fp + "'.")
          end
        else:
          path += tk -> value
        end
      end

      path += ".mash"
    end

    try:
      code ?= new StringList()
      code -> LoadFromFile(path)
    catch E:
      raise new Exception("Can't open file '" + path + "'.")
    end

    parser ?= new MashParser(code, path)
    parser -> Parse()

    ast ?= new MashAST(parser -> tokens, path, imports_lst, uses_lst, const_lst)
    ast_lst -> add(ast)
    ast -> process()

    i++
  end

  // Semantic analyse of code
  Sem ?= new MashSem(imports_lst, ast_lst, const_lst)
  Sem -> Process()

  Gen ?= new Generator(saSVM)
  Outp ?= Gen -> Gen(Sem)

  Outp -> SaveToFile($destp)
end







