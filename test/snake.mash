uses crt
uses classes.vector
uses classes.points
uses threads

////////////////////////////////////////////////////////////////////////////////

const snake_char  "@"
const food_char   "&"
const border_char "#"

proc PutCh(x, y, char):
  Crt -> GotoXY(x, y)
  Print(char)
end

proc DrawBorders():
  for y in 1..22:
    PutCh(1, y, border_char)
    PutCh(42, y, border_char)
  end

  for x in 1..42:
    PutCh(x, 1, border_char)
    PutCh(x, 22, border_char)
  end
end

////////////////////////////////////////////////////////////////////////////////

enum SnakeMovingVector [
  smvLeft, smvRight, smvUp, smvDown
]

Vectors ?= [ new point(-1,  0),
             new point( 1,  0),
             new point( 0, -1),
             new point( 0,  1) ]

////////////////////////////////////////////////////////////////////////////////

class Snake:
  public:
    var Body,
        MovingVector,
        Food,
        Score,
        GameOver

    init():
      $Body ?= new vector()
      $Body -> push_back( new point(10, 10) )
      $Body -> push_back( new point(11, 10) )
      $Body -> push_back( new point(12, 10) )
      $MovingVector ?= smvRight

      $Food ?= new point(RandomTo(39) + 2, RandomTo(19) + 2)
      $Score ?= 0
      $GameOver ?= false
    end

    proc RandFood():
      $Food -> set(RandomTo(39) + 2, RandomTo(19) + 2)

      for i in $Body -> Items:
        if i -> compare($Food):
          $RandFood()
          break
        end
      end
    end

    proc MoveSnake(x, y):
      head ?= $Body -> peek_back()

      newX ?= head -> x + x
      newY ?= head -> y + y
      newhead ?= new point(newX, newY)

      PutCh(newX, newY, snake_char)
      $Body -> add(newhead)

      if ($food -> x == newX) & ($food -> y == newY):
        $RandFood()
        PutCh($food -> x, $food -> y, food_char)
        $score++
        PutCh(46, 13, "Score: " + $score + "")
      else:
        f ?= $Body -> pop_first()
        PutCh(f -> x, f -> y, " ")

        for i in $Body -> items:
          if i -> compare(newhead):
            $GameOver = true
            break
          end
        end

        if (newhead -> x in [1, 42]) | (newhead -> y in [1, 22]):
          $GameOver = true
        end
      end

      PutCh($food -> x, $food -> y, food_char)
    end

    proc GameTick():
      $MoveSnake(
        Vectors[$MovingVector] -> x,
        Vectors[$MovingVector] -> y
      )
    end
end

////////////////////////////////////////////////////////////////////////////////

proc ControlThread(snk):
  while ~snk -> GameOver:
    k ?= StrUpper(Crt -> ReadKey())

    if snk -> MovingVector in [smvLeft, smvRight]:
      switch k:
        case "W":
          snk -> MovingVector ?= smvUp
        end

        case "S":
          snk -> MovingVector ?= smvDown
        end
      end
    end

    if snk -> MovingVector in [smvUp, smvDown]:
      switch k:
        case "A":
          snk -> MovingVector ?= smvLeft
        end

        case "D":
          snk -> MovingVector ?= smvRight
        end
      end
    end

    Sleep(100)

    gc()
  end
end

////////////////////////////////////////////////////////////////////////////////

proc main():
  while true:
    Randomize()

    snk ?= new snake()

    InpThr ?= Thread(ControlThread, snk)
    InpThr -> Resume()

    Crt -> TextBackground(Crt_White)
    Crt -> ClrScr()

    Crt -> TextColor(Crt_Black)
    Crt -> TextBackground(Crt_Black)
    DrawBorders()

    Crt -> TextBackground(Crt_White)

    for i in snk -> body -> items:
      PutCh(i -> x, i -> y, snake_char)
    end

    PutCh(46, 10, "[MASH LANG!]")
    PutCh(46, 11, "[SNAKE]")
    PutCh(46, 13, "Score: 0")

    while ~snk -> GameOver:
      Crt -> CursorOff()
      Sleep(100)
      snk -> GameTick()
      gc()
    end

    Crt -> TextColor(Crt_White)
    Crt -> TextBackground(Crt_Black)
    Crt -> ClrScr()
    Crt -> CursorOn()

    PutCh(1, 1, "Game over!")
    PutCh(1, 2, "Score: " + snk -> score + "")

    InpThr -> WaitFor()
    crt -> ReadKey()

    gc()
  end
end
