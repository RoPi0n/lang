uses <crt>
uses <classes\vector>
uses <classes\points>
uses <threads>

////////////////////////////////////////////////////////////////////////////////

enum SnakeMovingVector [smvLeft, smvRight, smvUp, smvDown]

var  Vectors = [ [-1,  0],
                 [ 1,  0],
                 [ 0, -1],
                 [ 0,  1] ]

class Snake:
  public:
    var Body, MovingVector
    proc Create
end

proc Snake::Create():
  $Body ?= new vector()
  $Body->Push_Back(new point(10, 10))
  $Body->Push_Back(new point(11, 10))
  $Body->Push_Back(new point(12, 10))
  $MovingVector ?= new(smvRight)
end

////////////////////////////////////////////////////////////////////////////////

var snk,
    food,
    score,
    sleeptime,
    GameOver

str snake_char  "@"
str food_char   "&"
str border_char "#"

proc PutCh(x, y, char):
  Crt.GotoXY(x, y)
  Print(char)
end

proc DrawBorders():
  for y in 1..22:
    PutCh(1, y, border_char)
    PutCh(42, y, border_char)
  end

  for x in 1..42:
    PutCh(x, 1, border_char)
    PutCh(x, 22, border_char)
  end
end

////////////////////////////////////////////////////////////////////////////////

proc RandFood():
  food->set(RandomTo(39) + 2, RandomTo(19) + 2)
  for(i ?= 1; i < snk->Body->Size(); i++):
    if (food->x == snk->Body->Items[i]->x) &
       (food->y == snk->Body->Items[i]->y):
      RandFood()
      break
    end
  end
end

proc MoveSnake(x, y):
  head ?= snk->Body->Peek_Back()
  newhead ?= new point(head->x + x, head->y + y)

  if (newhead->x == food->x) & (newhead->y == food->y):
    RandFood()
    PutCh(food->x, food->y, food_char)
    score++
    PutCh(46, 13, "Score: " + score + "")
  else:
    tmp ?= snk->Body->Pop_First()
    PutCh(tmp->x, tmp->y, " ")

    for(i ?= 1; i < snk->Body->Size(); i++):
      if (newhead->x == snk->Body->Items[i]->x) &
         (newhead->y == snk->Body->Items[i]->y):
        GameOver = true
      end
    end

    if (newhead->x in [1, 42]) | (newhead->y in [1, 22]):
      GameOver = true
    end
  end

  PutCh(food->x, food->y, food_char)
  PutCh(newhead->x, newhead->y, snake_char)
  snk->Body->Push_Back(newhead)
end


proc GameTick():
  MoveSnake(Vectors[snk->MovingVector][0], Vectors[snk->MovingVector][1])
end

////////////////////////////////////////////////////////////////////////////////

proc ControlThread():
  while ~GameOver:
    k ?= StrUpper(Crt.ReadKey())

    if snk->MovingVector in [smvLeft, smvRight]:
      switch k:
        case "W":
          snk->MovingVector = smvUp
        end

        case "S":
          snk->MovingVector = smvDown
        end
      end
    end

    if snk->MovingVector in [smvUp, smvDown]:
      switch k:
        case "A":
          snk->MovingVector = smvLeft
        end

        case "D":
          snk->MovingVector = smvRight
        end
      end
    end

    Sleep(100)

    gc()
  end
end

////////////////////////////////////////////////////////////////////////////////

proc RunGame():
  Randomize()

  snk ?= new snake()
  food ?= new point(RandomTo(39) + 2, RandomTo(19) + 2)
  GameOver ?= false
  score ?= 0
  sleeptime ?= 80
  Ctrl ?= async(ControlThread)

  Crt.TextBackground(Crt.White)
  Crt.ClrScr()

  Crt.TextColor(Crt.Black)
  Crt.TextBackground(Crt.Black)
  DrawBorders()

  Crt.TextBackground(Crt.White)

  PutCh(snk->body->items[1]->x,
        snk->body->items[1]->y,
        snake_char)

  PutCh(snk->body->items[2]->x,
        snk->body->items[2]->y,
        snake_char)

  PutCh(snk->body->items[3]->x,
        snk->body->items[3]->y,
        snake_char)

  PutCh(food->x, food->y, food_char)

  PutCh(46, 10, "[MASH LANG!]")
  PutCh(46, 11, "[SNAKE]")
  PutCh(46, 13, "Score: 0")

  while ~GameOver:
    Crt.CursorOff()
    Sleep(sleeptime)
    GameTick()
    gc()
  end

  Crt.TextColor(Crt.White)
  Crt.TextBackground(Crt.Black)
  Crt.ClrScr()
  Crt.CursorOn()

  PutCh(1, 1, "Game over!")
  PutCh(1, 2, "Score: " + score + "")

  Ctrl -> WaitFor()
  crt.ReadKey()
end

proc Main():
  while true:
    RunGame()
    gc()
  end
end
