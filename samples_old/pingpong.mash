uses <bf>
uses <crt>
uses <math>
uses <classes>
uses <threads>

word Width  80
word Height 20

var BotScore = 0,
    PlayerScore = 0

////////////////////////////////////////////////////////////////////////////////

class Pad:
  var pos, size
  proc Create, Draw, MoveLeft, MoveRight
  func IsContain
end

proc Pad::Create(stX, stY, size):
  $pos ?= new point(stX, stY)
  $size ?= new(size)
end

proc Pad::Draw():
  Crt.GotoXY($pos->x - $size \ 2, $pos->y)
  Crt.TextColor(Crt.LightGreen)
  for(i ?= 0; i < $size; i++):
    print("=")
  end
end

func Pad::MoveLeft():
  if ($pos->x - $size \ 2) > 2:
    Crt.GotoXY($pos->x + $size \ 2, $pos->y)
    print(" ")
    $pos->x--
    Crt.GotoXY($pos->x - $size \ 2, $pos->y)
    Crt.TextColor(Crt.LightGreen)
    print("=")
    return true
  else:
    return false
  end
end

func Pad::MoveRight():
  if ($pos->x + $size \ 2) < (Width - 1):
    Crt.GotoXY($pos->x - $size \ 2, $pos->y)
    print(" ")
    $pos->x++
    Crt.GotoXY($pos->x + $size \ 2, $pos->y)
    Crt.TextColor(Crt.LightGreen)
    print("=")
    return true
  else:
    return false
  end
end

func Pad::IsContain(x, y):
  if Abs($pos->y - y) < 1:
    return Abs($pos->x - x) < ($size / 2)
  else:
    return false
  end
end

var BotPad = new Pad(Width \ 2, 3, 5),
    PlayerPad = new Pad(Width \ 2, Height - 2, 9),
    Barrier1 = new Pad(Width \ 2, Height \ 2 - 2, 15),
    Barrier2 = new Pad(Width \ 2, Height \ 2 + 2, 15)

////////////////////////////////////////////////////////////////////////////////

class Ball:
  var pos, vect
  proc Create, Draw, Move
end

proc Ball::Create(stX, stY, stvX, stvY):
  $pos ?= new point(stX, stY)
  $vect ?= new point(stvX, stvY)
end

proc Ball::Draw():
  Crt.GotoXY($pos->x, $pos->y)
  Crt.TextColor(Crt.LightRed)
  print("0")
end

proc Ball::Move():
  Crt.GotoXY($pos->x, $pos->y)
  Crt.TextColor(Crt.Black)

  if Abs(2 - ($pos->x + $vect->x)) < 1:
    $vect->x *= -1
  end

  if Abs(Width - ($pos->x + $vect->x)) < 1:
    $vect->x *= -1
  end

  if BotPad->IsContain($pos->x + $vect->x, $pos->y + $vect->y) |
     PlayerPad->IsContain($pos->x + $vect->x, $pos->y + $vect->y) |
     Barrier1->IsContain($pos->x + $vect->x, $pos->y + $vect->y) |
     Barrier2->IsContain($pos->x + $vect->x, $pos->y + $vect->y):
    $vect->y *= -1
    if ($vect->x + $vect->y) < 2.5:
      $vect->x *= 1.01
      $vect->y *= 1.01
    end
  end

  $pos->x += $vect->x
  $pos->y += $vect->y

  NeedCenter ?= false
  if $pos->y < 1:
    PlayerScore++
    NeedCenter = true
  end

  if $pos->y > (Height - 1):
    BotScore++
    NeedCenter = true
  end

  if NeedCenter | ($vect->x == 0) | ($vect->y == 0):
    $pos->x = Width \ 2
    $pos->y = Height \ 2
    $vect -> x = if(Random() > 0, 1, -1)
    $vect -> y = if(Random() > 0, 1, -1)
  end

  print(" ")
  $Draw()
end

var GameBall = new Ball(Width \ 2, Height \ 2, 0, 0)

////////////////////////////////////////////////////////////////////////////////

var OutLocker = new CriticalSection()

proc ControlThr():
  while true:
    switch StrUpper(Crt.ReadKey()):
      case "A":
        OutLocker -> Enter()
        PlayerPad -> MoveLeft()
        OutLocker -> Leave()
      end

      case "D":
        OutLocker -> Enter()
        PlayerPad -> MoveRight()
        OutLocker -> Leave()
      end
    end

    Sleep(1)
    gc()
  end
end

////////////////////////////////////////////////////////////////////////////////

proc DrawBorders():
  Crt.TextColor(Crt.White)
  for(i ?= 1; i <= Height; i++):
    Crt.GotoXY(1, i)
    print("#")
    Crt.GotoXY(Width, i)
    print("#")
  end
end

proc DrawScoreBoard():
  Crt.TextColor(Crt.White)
  Crt.GotoXY(Width + 4, Height \ 2)
  Print("Bot score: ", BotScore, ".")
  Crt.GotoXY(Width + 4, Height \ 2 + 1)
  Print("Player score: ", PlayerScore, ".")
end

var Barrier1Vec = 0,
    Barrier2Vec = 0

proc MoveBarriers():
  if Barrier1Vec < 0:
    if Barrier1->MoveLeft():
    else:
      Barrier1Vec += 1
    end
  else:
    if Barrier1->MoveRight():
    else:
      Barrier1Vec -= 1
    end
  end

  if Barrier2Vec < 0:
    if Barrier2->MoveLeft():
      Barrier2Vec += 1
    end
  else:
    if Barrier2->MoveRight():
    else:
      Barrier2Vec -= 1
    end
  end
end

proc main():
  Randomize()
  Crt.CursorOff()

  Crt.ClrScr()
  DrawBorders()

  Crt.GotoXY(Width + 4, Height \ 2 - 2)
  Print("Mash Ping-Pong demo game!")

  DrawScoreBoard()

  BotPad -> Draw()
  PlayerPad -> Draw()
  Barrier1 -> Draw()
  Barrier1Vec = -1
  Barrier2 -> Draw()
  GameBall -> Draw()

  Ctrl ?= async(ControlThr())

  while true:
    Crt.CursorOff()

    OutLocker -> Enter()
    if (BotPad->pos->x <> (GameBall->pos->x + GameBall->vect->x)) &
       (BotPad->pos->x > (GameBall->pos->x + GameBall->vect->x)):
      BotPad -> MoveLeft()
    else:
      BotPad -> MoveRight()
    end

    MoveBarriers()

    GameBall->Move()

    DrawScoreBoard()

    OutLocker -> Leave()

    Sleep(30)
    gc()
  end
end
