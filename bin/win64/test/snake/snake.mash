uses "game_io.mash"
uses classes.list

class game_snake:
  var state, body, food, score, gameover

  init(state):
    $state ?= state

    $body ?= new list()
    $body -> add(new point(5, 10))
    $body -> add(new point(6, 10))
    $body -> add(new point(7, 10))

    $food ?= new point(0, 0)
    $RandFood()

    $score ?= 0
    $gameover ?= false
  end

  proc RandFood():
    $food -> Set(
      RandomTo(36) + 2,
      RandomTo(16) + 2
    )
  end

  proc DrawFood():
    game_io -> PrintXY($food -> x, $food -> y, "&")
  end

  proc draw():
    for i in $body -> items:
      game_io -> PrintXY(i -> x, i -> y, "@")
    end
  end

  proc tick():
    h ?= $body -> get($body -> count() - 1) -> clone()

    moving ?= $state -> GetMoving.sync()

    head ?= new point(
      h -> x + moving -> x,
      h -> y + moving -> y
    )

    if head -> compare($food):
      $score++
      game_io -> PrintXY(44, 5, "Score: " + $score)
      $RandFood()
    else:
      ass ?= $body -> items[0]
      game_io -> PrintXY(ass -> x, ass -> y, " ")
      $body -> delete(0)
    end

    if (head -> x in [1, 40]) | (head -> y in [1, 20]):
      $gameover = true
    end

    for i in $body -> items:
      if i -> compare(head):
        $gameover = true
        break
      end
    end

    $body -> add(head)
    game_io -> PrintXY(head -> x, head -> y, "@")
    $DrawFood()
  end
end

proc game():
  game_io -> DrawWindow()
  state ?= new game_state()

  snk ?= new game_snake(state)
  snk -> draw()

  inp ?= input_listener.thread(state)
  inp -> resume()

  while ~snk -> gameover:
    sleep(80)
    snk -> tick()
    gc()
  end

  inp -> kill()

  game_io -> gameover(snk -> score)
end

proc main():
  crt -> CursorOff()
  game()
  crt -> readkey()
end
