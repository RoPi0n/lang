////////////////////////////////////////////////////////////////////////////////
// Mash streams
////////////////////////////////////////////////////////////////////////////////

// imports

import _Stream_Create                 "streams.lib" "_Stream_Create"
import _Stream_Seek                   "streams.lib" "_Stream_Seek"
import _Stream_GetCaretPos            "streams.lib" "_Stream_GetCaretPos"
import _Stream_WriteFromMemoryStream  "streams.lib" "_Stream_WriteFromStream"
import _Stream_ReadFromMemoryStream   "streams.lib" "_Stream_ReadFromStream"
import _Stream_CopyFromStream         "streams.lib" "_Stream_CopyFromStream"
import _Stream_CopyBuffer             "streams.lib" "_Stream_CopyBuffer"
import _Stream_WriteByte              "streams.lib" "_Stream_WriteByte"
import _Stream_WriteWord              "streams.lib" "_Stream_WriteWord"
import _Stream_WriteInt               "streams.lib" "_Stream_WriteInt"
import _Stream_WriteFloat             "streams.lib" "_Stream_WriteFloat"
import _Stream_WriteStr               "streams.lib" "_Stream_WriteStr"
import _Stream_ReadByte               "streams.lib" "_Stream_ReadByte"
import _Stream_ReadWord               "streams.lib" "_Stream_ReadWord"
import _Stream_ReadInt                "streams.lib" "_Stream_ReadInt"
import _Stream_ReadFloat              "streams.lib" "_Stream_ReadFloat"
import _Stream_ReadStr                "streams.lib" "_Stream_ReadStr"
import _Stream_GetSize                "streams.lib" "_Stream_GetSize"
import _Stream_Clear                  "streams.lib" "_Stream_Clear"
import _Stream_UnPack                 "streams.lib" "_Stream_UnPack"

import _MemoryStream_Create           "streams.lib" "_MemoryStream_Create"
import _MemoryStream_LoadFromResource "streams.lib" "_MemoryStream_LoadFromResource"
import _MemoryStream_LoadFromStream   "streams.lib" "_MemoryStream_LoadFromStream"
import _MemoryStream_StoreToStream    "streams.lib" "_MemoryStream_StoreToStream"
import _MemoryStream_LoadFromFile     "streams.lib" "_MemoryStream_LoadFromFile"
import _MemoryStream_SaveToFile       "streams.lib" "_MemoryStream_SaveToFile"

import _FileStream_Create             "streams.lib" "_FileStream_Create"
import _FileStream_Close              "streams.lib" "_FileStream_Close"

/*
 *  Base TStream class
 */

enum TSeekOffset [soStart, soCurrent, soEnd]

class TStream:
  private:
    // pointer to external TStream class
    var StreamPtr

  public:
    // constructor & destructor
    init(res):
      $StreamPtr ?= res
    end
end

// some methods

proc TStream::Seek(pos, offset):
  _Stream_Seek($StreamPtr, pos, offset)
end

proc TStream::Clear():
  _Stream_Clear($StreamPtr)
end

func TStream::Pos():
  return _Stream_GetCaretPos($StreamPtr)
end

func TStream::Size():
  return _Stream_GetSize($StreamPtr)
end

func TStream::UnPack():
  return _Stream_UnPack($StreamPtr)
end

// stream operations

proc TStream::WriteFromMemoryStream(mstream, size):
  _Stream_WriteFromMemoryStream($StreamPtr, mstream, size)
end

proc TStream::ReadFromMemoryStream(mstream, size):
  _Stream_ReadFromMemoryStream($StreamPtr, mstream, size)
end

proc TStream::CopyFromStream(mstream, size):
  _Stream_ReadFromMemoryStream($StreamPtr, mstream, size)
end

// writers

proc TStream::Write([args]):
  for arg in args:
    $WriteU(arg)
  end
end

proc TStream::WriteU(value):
  switch typeof(value):
    case typeWord:
      $WriteWord(value)
      break
    end

    case typeInt:
      $WriteInt(value)
      break
    end

    case typeReal:
      $WriteFloat(value)
      break
    end

    case typeStr:
      $WriteStr(value)
      break
    end

    default:
      raise "With TStream: I/O error, invalid type cast!"
    end
  end
end

proc TStream::WriteByte(value):
  _Stream_WriteByte($StreamPtr, value)
end

proc TStream::WriteWord(value):
  _Stream_WriteWord($StreamPtr, value)
end

proc TStream::WriteInt(value):
  _Stream_WriteInt($StreamPtr, value)
end

proc TStream::WriteFloat(value):
  _Stream_WriteFloat($StreamPtr, value)
end

proc TStream::WriteStr(value):
  _Stream_WriteStr($StreamPtr, value)
end

// readers

func TStream::ReadByte():
  return _Stream_ReadByte($StreamPtr)
end

func TStream::ReadWord():
  return _Stream_ReadWord($StreamPtr)
end

func TStream::ReadInt():
  return _Stream_ReadInt($StreamPtr)
end

func TStream::ReadFloat():
  return _Stream_ReadFloat($StreamPtr)
end

func TStream::ReadStr(ln):
  return _Stream_ReadStr($StreamPtr, ln)
end

func TStream::ReadText():
  r ?= ""
  i ?= 0
  while i < $Size():
    r += $ReadByte().chr()
    i++
  end

  return r
end

proc TStream::ReadBuf(from_stream, len):
  if ~_Stream_CopyBuffer($StreamPtr, from_stream -> StreamPtr, len):
    raise new Exception("Native stream I/O exception")
  end
end

proc TStream::WriteBuf(from_stream, len):
  if ~_Stream_CopyBuffer(from_stream -> StreamPtr, $StreamPtr, len):
    raise new Exception("Native stream I/O exception")
  end
end

/*
 *  MemoryStream class
 */

class MemoryStream(TStream):
  public:
    // constructor & destructor
    init([args]):
      switch len(args):
        case 0:
          $StreamPtr ?= _MemoryStream_Create()
        end

        case 1:
          $StreamPtr ?= args[0] -> StreamPtr
        end

        default:
          raise new Exception("MemoryStream::Create -> Wrong number of paramethers!")
        end
      end
    end
end

// some methods

proc MemoryStream::LoadFromResource(ResourcePtr):
  _MemoryStream_LoadFromResource($StreamPtr, ResourcePtr)
end

proc MemoryStream::LoadFromStream(mstream):
  _MemoryStream_LoadFromStream($StreamPtr, mstream -> StreamPtr)
end

proc MemoryStream::StoreToStream(mstream):
  _MemoryStream_StoreToStream($StreamPtr, mstream -> StreamPtr)
end

proc MemoryStream::LoadFromFile(fp):
  if ~_MemoryStream_LoadFromFile(fp, $StreamPtr):
    raise new Exception("File I/O exception")
  end
end

proc MemoryStream::SaveToFile(fp):
  if ~_MemoryStream_SaveToFile(fp, $StreamPtr):
    raise new Exception("File I/O exception")
  end
end

/*
 *  FileStream
 */

// FileStream modes

enum TFileStreamMode [
   fmCreate         = 0xFF00,
   fmOpenRead       = 0,
   fmOpenWrite      = 1,
   fmOpenReadWrite  = 2,

   fmShareCompat    = 0x0000,
   fmShareExclusive = 0x0010,
   fmShareDenyWrite = 0x0020,
   fmShareDenyRead  = 0x0030,
   fmShareDenyNone  = 0x0040
]

class FileStream(TStream):
  public:
    // constructor & destructor
    init(fpath, openmode):
      $StreamPtr ?= _FileStream_Create(fpath, openmode)

      if $StreamPtr == null:
        $StreamPtr ?= null
        raise new Exception("Raised native FileStream exception")
      end
    end

    proc Close():
      _FileStream_Close($StreamPtr)
    end
end
