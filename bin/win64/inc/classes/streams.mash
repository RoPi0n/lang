////////////////////////////////////////////////////////////////////////////////
// Mash streams
////////////////////////////////////////////////////////////////////////////////

uses <files>

// imports

import _Stream_Create                 "streams.lib" "_Stream_Create"
import _Stream_Seek                   "streams.lib" "_Stream_Seek"
import _Stream_GetCaretPos            "streams.lib" "_Stream_GetCaretPos"
import _Stream_WriteFromMemoryStream  "streams.lib" "_Stream_WriteFromStream"
import _Stream_ReadFromMemoryStream   "streams.lib" "_Stream_ReadFromStream"
import _Stream_CopyFromStream         "streams.lib" "_Stream_CopyFromStream"
import _Stream_WriteByte              "streams.lib" "_Stream_WriteByte"
import _Stream_WriteWord              "streams.lib" "_Stream_WriteWord"
import _Stream_WriteInt               "streams.lib" "_Stream_WriteInt"
import _Stream_WriteFloat             "streams.lib" "_Stream_WriteFloat"
import _Stream_WriteStr               "streams.lib" "_Stream_WriteStr"
import _Stream_ReadByte               "streams.lib" "_Stream_ReadByte"
import _Stream_ReadWord               "streams.lib" "_Stream_ReadWord"
import _Stream_ReadInt                "streams.lib" "_Stream_ReadInt"
import _Stream_ReadFloat              "streams.lib" "_Stream_ReadFloat"
import _Stream_ReadStr                "streams.lib" "_Stream_ReadStr"
import _Stream_GetSize                "streams.lib" "_Stream_GetSize"
import _Stream_Clear                  "streams.lib" "_Stream_Clear"

import _MemoryStream_Create           "streams.lib" "_MemoryStream_Create"
import _MemoryStream_LoadFromStream   "streams.lib" "_MemoryStream_LoadFromStream"
import _MemoryStream_StoreToStream    "streams.lib" "_MemoryStream_StoreToStream"
import _MemoryStream_LoadFromFile     "streams.lib" "_MemoryStream_LoadFromFile"
import _MemoryStream_SaveToFile       "streams.lib" "_MemoryStream_SaveToFile"

import _FileStream_Create             "streams.lib" "_FileStream_Create"

/*
 *  Base TStream class
 */

enum TSeekOffset [soStart, soCurrent, soEnd]

class TStream:
  private:
    // pointer to external TStream class
    var StreamPtr

  public:
    // constructor & destructor
    proc Create

    // main methods
    proc Seek,
         Clear

    func GetCaretPos,
         GetSize

    // streams I/O operations
    proc WriteFromMemoryStream,
         ReadFromMemoryStream,
         CopyFromStream

    // I/O operations

    proc Write,
         WriteU,
         WriteByte,
         WriteWord,
         WriteInt,
         WriteFloat,
         WriteStr

    func ReadByte,
         ReadWord,
         ReadInt,
         ReadFloat,
         ReadStr
end

// constructor & destructor

proc TStream::Create(resource):
  $StreamPtr ?= resource
end

// some methods

proc TStream::Seek(pos, offset):
  _Stream_Seek($StreamPtr, pos, offset)
end

proc TStream::Clear():
  _Stream_Clear($StreamPtr)
end

func TStream::GetCaretPos():
  return _Stream_GetCaretPos($StreamPtr)
end

func TStream::GetSize():
  return _Stream_GetSize($StreamPtr)
end

// stream operations

proc TStream::WriteFromMemoryStream(mstream, size):
  _Stream_WriteFromMemoryStream($StreamPtr, mstream, size)
end

proc TStream::ReadFromMemoryStream(mstream, size):
  _Stream_ReadFromMemoryStream($StreamPtr, mstream, size)
end

proc TStream::CopyFromStream(mstream, size):
  _Stream_ReadFromMemoryStream($StreamPtr, mstream, size)
end

// writers

proc TStream::Write():
  var t
  t ?= argcount
  while t > 0:
    $WriteU()
    dec t
  end
end

proc TStream::WriteU(value):
  switch typeof(value):

    case typeWord:
      $WriteWord(value)
      break
    end

    case typeInt:
      $WriteInt(value)
      break
    end

    case typeReal:
      $WriteFloat(value)
      break
    end

    case typeStr:
      $WriteStr(value)
      break
    end

    else:
      raise "With TStream: I/O error, invalid type cast!"
  end
end

proc TStream::WriteByte(value):
  _Stream_WriteByte($StreamPtr, value)
end

proc TStream::WriteWord(value):
  _Stream_WriteWord($StreamPtr, value)
end

proc TStream::WriteInt(value):
  _Stream_WriteInt($StreamPtr, value)
end

proc TStream::WriteFloat(value):
  _Stream_WriteFloat($StreamPtr, value)
end

proc TStream::WriteStr(value):
  _Stream_WriteStr($StreamPtr, value)
end

// readers

func TStream::ReadByte():
  return _Stream_ReadByte($StreamPtr)
end

func TStream::ReadWord():
  return _Stream_ReadWord($StreamPtr)
end

func TStream::ReadInt():
  return _Stream_ReadInt($StreamPtr)
end

func TStream::ReadFloat():
  return _Stream_ReadFloat($StreamPtr)
end

func TStream::ReadStr(ln):
  return _Stream_ReadStr($StreamPtr, ln)
end

/*
 *  MemoryStream class
 */

class MemoryStream(TStream):
  public:
    // constructor & destructor
    proc Create

    // some methods
    proc LoadFromStream, StoreToStream,
         LoadFromFile,   SaveToFile
end

// constructor & destructor

proc MemoryStream::Create([args]):
  switch len(args):
    case 0:
      $StreamPtr ?= _MemoryStream_Create()
    end

    case 1:
      $StreamPtr ?= args[0] -> StreamPtr
    end

    else:
      raise new Exception("MemoryStream::Create -> Wrong number of paramethers!")
  end
end

// some methods

proc MemoryStream::LoadFromStream(mstream):
  _MemoryStream_LoadFromStream($StreamPtr, mstream -> StreamPtr)
end

proc MemoryStream::StoreToStream(mstream):
  _MemoryStream_StoreToStream($StreamPtr, mstream -> StreamPtr)
end

proc MemoryStream::LoadFromFile(fp):
  _MemoryStream_LoadFromFile(fp, $StreamPtr)
end

proc MemoryStream::SaveToFile(fp):
  println("we here")
  _MemoryStream_SaveToFile(fp, $StreamPtr)
end

/*
 *  FileStream
 */

class FileStream(TStream):
  public:
    // constructor & destructor
    proc Create
end

// FileStream modes

word fmCreate         0xFF00
word fmOpenRead       0
word fmOpenWrite      1
word fmOpenReadWrite  2

word fmShareCompat    0x0000
word fmShareExclusive 0x0010
word fmShareDenyWrite 0x0020
word fmShareDenyRead  0x0030
word fmShareDenyNone  0x0040

// constructor & destructor

proc FileStream::Create(fpath, openmode):
  $StreamPtr ?= _FileStream_Create(fpath, openmode)
end
