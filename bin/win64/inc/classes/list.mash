/*
 *  List, ThreadList
 */

uses algs
uses sync


class List:
  protected:
    var Items,
        Size

  public:
    init():
      $Items ?= new[0]
      $Size ?= 0
    end


    proc Add(Obj):
      SetLen($Items, $Size + 1)
      $Items[$Size] ?= Obj
      $Size++
    end


    proc Insert(Obj, Index):
      if ($Size < Index) | (Index < 0):
        raise new Exception("List index (" + Index + ") out of bounds.")
      else:
        $Size++
        SetLen($Items, $Size)
        i ?= $Size - 1
        while i > Index:
          $Items[i] ?= $Items[i - 1]
          i--
        end

        $Items[Index] ?= Obj
      end
    end


    proc Delete(Index):
      if ($Size <= Index) | (Index < 0):
        raise new Exception("List index (" + Index + ") out of bounds.")
      else:
        $Size--
        while Index < $Size:
          $Items[Index] ?= $Items[Index + 1]
          Index++
        end
        SetLen($Items, $Size)
      end
    end


    proc Clear():
      SetLen($Items, 0)
      $Size = 0
    end


    func Get(Index):
      if index == null: return null end

      return $Items[Index]
    end


    func IndexOf(Obj):
      if typeof(Obj) in [TypeArray, TypeClass]:
        i ?= 0
        while i < $Size:
          if @Obj == @($Items[i]):  return i  end
          i++
        end
      else:
        i ?= 0
        while i < $Size:
          if Obj == $Items[i]:  return i  end
          i++
        end
      end

      return null
    end


    func Count():  return copy($size)  end


    proc Sort():  QuickSort($Items)  end


    func Find(Obj):  return BinSearch($Items, Obj)  end


    func NextIns(Obj):
      Indx ?= BinNext($Items, Obj)
      $Insert(Obj, Indx)
      return Indx
    end
end



class SyncList(List):
  private:
    var Locker

  protected:
    var Items, Size

  public:
    init():
      super()
      $Locker ?= new CriticalSection()
    end

    proc Add(Obj):
      $Locker -> Enter()
      super(Obj)
      $Locker -> Leave()
    end

    proc Insert(Obj, Index):
      $Locker -> Enter()
      super(Obj, Index)
      $Locker -> Leave()
    end

    proc Delete(Index):
      $Locker -> Enter()
      super(Index)
      $Locker -> Leave()
    end

    proc Clear():
      $Locker -> Enter()
      super()
      $Locker -> Leave()
    end

    func Get(Index):
      $Locker -> Enter()
      r ?= super(Index)
      $Locker -> Leave()
      return r
    end

    func IndexOf(Obj):
      $Locker -> Enter()
      r ?= super(Obj)
      $Locker -> Leave()
      return r
    end

    proc Sort():
      $Locker -> Enter()
      super()
      $Locker -> Leave()
    end

    func NextIns(Obj):
      $Locker -> Enter()
      r ?= super(Obj)
      $Locker -> Leave()
      return r
    end

    func Find(Obj):
      $Locker -> Enter()
      r ?= super(Obj)
      $Locker -> Leave()
      return r
    end

    func Lock():
      $Locker -> Enter()
      r ?= new list()
      r -> items ?= $items
    end

    proc UnLock():  $Locker -> Leave()  end
end
