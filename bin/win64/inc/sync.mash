/*
 *  Basic synchronisation methods
 */

import __CRITSECT_CREATE   "sync.lib"  "CRITICAL_SECTION_CREATE"
import __CRITSECT_ENTER    "sync.lib"  "CRITICAL_SECTION_ENTER"
import __CRITSECT_LEAVE    "sync.lib"  "CRITICAL_SECTION_LEAVE"
import __CRITSECT_TRYENTER "sync.lib"  "CRITICAL_SECTION_TRYENTER"


class CriticalSection:
  protected:
    var Critical_Section

  public:
    init():
      $Critical_Section ?= __CRITSECT_CREATE()
    end

    proc Enter():
      __CRITSECT_ENTER($Critical_Section)
    end

    proc Leave():
      __CRITSECT_LEAVE($Critical_Section)
    end

    func TryEnter():
      return __CRITSECT_TRYENTER($Critical_Section)
    end
end

////////////////////////////////////////////////////////////////////////////////
// Thread-safe atomic
////////////////////////////////////////////////////////////////////////////////

class Atomic:
  private:
    var Locker

  public:
    var Value

    init(Value):
      $Locker = new CriticalSection()
      $Value ?= Value
    end

    proc Lock():
      $Locker -> Enter()
    end

    proc UnLock():
      $Locker -> Leave()
    end
end
