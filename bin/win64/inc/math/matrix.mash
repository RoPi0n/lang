uses math.base

class matrix:
  func summ(a, b):
    lY ?= len(a)
    lX ?= len(a[0])

    r ?= new[lY][lX]

    y ?= 0
    while y < lY:
      x ?= 0
      while x < lX:
        r[y][x] ?= a[y][x] + b[y][x]
        x++
      end

      y++
    end

    return r
  end


  func diff(a, b):
    lY ?= len(a)
    lX ?= len(a[0])

    r ?= new[lY][lX]

    y ?= 0
    while y < lY:
      x ?= 0
      while x < lX:
        r[y][x] ?= a[y][x] - b[y][x]
        x++
      end

      y++
    end

    return r
  end


  proc add(a, b):
    lY ?= len(a)
    lX ?= len(a[0])

    y ?= 0
    while y < lY:
      x ?= 0
      while x < lX:
        a[y][x] += b[y][x]
        x++
      end

      y++
    end
  end

  proc sub(a, b):
    lY ?= len(a)
    lX ?= len(a[0])

    y ?= 0
    while y < lY:
      x ?= 0
      while x < lX:
        a[y][x] -= b[y][x]
        x++
      end

      y++
    end
  end


  func compare(a, b):
    lY ?= len(a)
    lX ?= len(a[0])

    if (lY == b.len()) & (lX == b[0].len()):
      r ?= true
      y ?= 0
      while y < lY:
        x ?= 0
        while x < lX:
          r &= a[y][x] == b[y][x]
          x++
        end

        y++
      end

      return r

    else:
      return false
    end
  end


  func fNumMultiply(m, k):
    lY ?= len(m)
    lX ?= len(m[0])

    r ?= new[lY][lX]

    y ?= 0
    while y < lY:
      x ?= 0
      while x < lX:
        r[y][x] ?= m[y][x] * k
        x++
      end

      y++
    end

    return r
  end


  proc NumMultiply(m, x):
    for line in m:
      for a in line:
        a *= x
      end
    end
  end

  func Multiply(a, b):
    l_ay ?= a.len()
    l_by ?= b.len()

    if 0 in [l_ay, l_by]:
      return []
    end

    l_ax ?= a[0].len()
    l_bx ?= b[0].len()

    if l_ax == l_by:
      r ?= new[l_ay][l_bx]
      y ?= 0
      while y < l_ay:
        x ?= 0
        while x < l_bx:
          s ?= 0
          j ?= 0
          while j < l_ax:
            s += a[y][j] * b[j][x]
            j++
          end
          r[y][x] ?= s

          x++
        end

        y++
      end

      return r
    else:
      raise new Exception("Matrix::Multiply() -> Invalid size of matrixes!")
    end
  end


/*func matrix.OffsetCoord(a, maxA):
  r ?= copy(a)

  while r < 0:
    r += maxA
  end

  while r >= maxA:
    r -= maxA
  end

  return r
end

func matrix.atToroidalCoord(m, x, y):
  return m[ matrix.OffsetCoord(y, len(m)) ][ matrix.OffsetCoord(x, len(m[0])) ]
end

func matrix.det(m):
  m_lines   ?= len(m)
  m_columns ?= len(m[0])

  if (m_lines == m_columns) & (m_lines == 2):
    return m[0][0] * m[1][1] - m[0][1] * m[1][0]
  end

  summ1 ?= 0
  summ2 ?= 0

  t  ?= 0
  tX ?= 0

  for(x ?= 0; x < m_columns; x++):
    t = m[0][x]
    tX = x + 1
    for(y ?= 1; y < m_lines; y++):
      t *= m[y][matrix.OffsetCoord(tX, m_columns)]
      tX++
    end
    summ1 += t

    gc
  end

  for(x ?= m_columns - 1; x >= 0; x--):
    t = m[0][x]
    tX = x - 1
    for(y ?= 1; y < m_lines; y++):
      t *= m[y][matrix.OffsetCoord(tX, m_columns)]
      tX--
    end
    summ2 += t

    gc
  end

  return summ1 - summ2
end

func matrix.transp(m):
  m_lines ?= len(m)
  m_columns ?= len(m[0])

  r ?= new[m_columns][m_lines]

  for(y ?= 0; y < m_lines; y++):
    for(x ?= 0; x < m_columns; x++):
      r[x][y] ?= m[y][x]
    end
  end

  return r
end */

end

