/*
 *  Functions for strings
 */

proc Cut(s, from, count):
  inline "push $from"
  inline "push $count"
  inline "push $s"
  inline "strd"
  return s
end

func SubStr(s, from, count):
  l ?= s.len()
  r ?= s.copy().cut(from + count, l)
  if from > 0: r.cut(0, from) end
  return r
end

func LeftStr(s, count):
  return s.SubStr(0, count)
end

func RightStr(s, count):
  return s.SubStr(s.len() - count, count)
end

// Pos & PosEx

func SubPos(s, sb):
  len_s ?= s.len()
  len_sb ?= sb.len()

  founded ?= false

  p ?= 0
  while p < len_s:
    if s[p] == sb[0]:
      founded = true
      t ?= p.copy()

      for c in sb:
        if s[t] <> c:
          founded = false
          break
        end
        t++
      end
    end

    if founded:
      return p
    end

    p++
  end

  return null
end


func SubPosEx(s, sb, num):
  len_s ?= s.len()
  len_sb ?= sb.len()

  founded ?= false

  p ?= 0
  while p < len_s:
    if s[p] == sb[0]:
      founded = true
      t ?= p.copy()

      for c in sb:
        if s[t] <> c:
          founded = false
          break
        end
        t++
      end
    end

    if founded:
      if num > 1:
        num--
        founded = false
      else:
        return p
      end
    end

    p++
  end

  return null
end

// Trim

func s_TrimLeft(s):
  r ?= copy(s)

  while len(r) > 0:
    if r[0] == " ":
      r.Cut(0, 1)
    else:
      break
    end
  end

  return r
end


func s_TrimRight(s):
  r ?= copy(s)
  l ?= r.len()
  while l > 0:
    if r[l - 1] == " ":
      r.Cut(l - 1, 1)
      l--
    else:
      break
    end
  end

  return r
end


func Trim(s):
  r ?= s.copy()
  r = s_trimright(r)
  r = s_trimleft(r)
  return r
end

// Substring replase function

enum s_ReplaceFlags [srfReplaceAll, srfIgnoreCase]

func Replace(s, from, to, flags):
  r ?= copy(s)

  p ?= 0
  while p <> null:
    if srfIgnoreCase in flags:
      p ?= StrUpper(r).SubPos(StrUpper(from))
    else:
      p ?= r.SubPos(from)
    end

    if p <> null:
      r = r.SubStr(0, p) + to + r.SubStr(p + from.len(), r.len())

      if ~(srfReplaceAll in flags):
        break
      end
    end
  end

  return r
end
