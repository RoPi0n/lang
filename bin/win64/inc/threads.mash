// Mash lang threads unit
// Code version: 1.2

uses sync

proc thr_create(method, arg):
  inline "push thr_create.arg"
  inline "push thr_create.method"
  inline "cthr"
end

proc thr_async(method, arg):
  inline "push thr_async.arg"
  inline "push thr_async.method"
  inline "cthr"
  inline "rthr"
end

proc thr_resume(thr):
  inline "push thr_resume.thr"
  inline "rthr"
end

proc thr_suspend(thr):
  inline "push thr_suspend.thr"
  inline "sthr"
end

proc thr_terminate(thr):
  inline "push thr_terminate.thr"
  inline "tthr"
end

enum ThreadPriority [tpIdle,
                     tpLowest,
                     tpLower,
                     tpNormal,
                     tpHigher,
                     tpHighest,
                     tpTimeCritical]

proc thr_setpriority(thr, priority):
  inline "push thr_setpriority.priority"
  inline "push thr_setpriority.thr"
  inline "thsp"
end

proc thr_kill(thr):
  thr_suspend(thr)
  thr_terminate(thr)
end

////////////////////////////////////////////////////////////////////////////////
// Thread controller class
////////////////////////////////////////////////////////////////////////////////

proc TThread_Join(CurrentThreadContext, ThreadClass):
  system_reset_traceback()
  ThreadClass -> Execute()
  ThreadClass -> Kill()
end

class TThread:
  private:
    var ThreadContext

  public:
    var Resumed,
        Terminated

    proc Execute():
      // method for overriding
    end

    init(Resumed):
      $Resumed ?= false
      $Terminated ?= false
      $ThreadContext ?= thr_create(TThread_Join, this)
      if Resumed:  $Resume()  end
    end

    proc ReJoin(Resumed):
      $ThreadContext ?= thread(TThread_Join, this)
      if Resumed:  return $Resume()  end
    end

    proc Suspend():
      thr_suspend($ThreadContext)
      $Resumed = false
      return this
    end

    proc Resume():
      thr_resume($ThreadContext)
      $Resumed = true
      return this
    end

    proc SetPriority(priority):
      thr_setpriority($ThreadContext, priority)
    end

    proc Kill():
      if ~$Terminated:
        $Resumed = false
        $Terminated = true
        thr_terminate($ThreadContext)
      end
    end

    proc WaitFor():
      while ~$Terminated:
        Sleep(1)
        gc()
      end
    end
end

////////////////////////////////////////////////////////////////////////////////
//  TThreadCall
////////////////////////////////////////////////////////////////////////////////

class TThreadCall(TThread):
  var GlobalThis, Method, Args

  init(pThis, Method, Args, Resumed):
    $GlobalThis ?= pThis
    $Method ?= Method
    $Args ?= Args
    super(Resumed)
  end

  proc Execute():
    $args.len()

    inline "peek global.arg_counter"
    inline "pop"

    for arg back $Args:
      x ?= arg
      inline "push $x"
    end

    th ?= $GlobalThis
    $GlobalThis ?= null
    $Method
    inline "push $th"
    inline "peek global.this"
    inline "pop"
    inline "jc"
  end

  func Clone():
    return new TThreadCall($GlobalThis, $Method, $Args, false)
  end
end

////////////////////////////////////////////////////////////////////////////////
//  Quick threaging
////////////////////////////////////////////////////////////////////////////////

func go(method, [args]):
  pThis ?= null
  inline "push global.this"
  inline "peek $pthis"
  inline "pop"
  t ?= new TThreadCall(pThis, method, args, false)
  t -> Resume()
  return t
end

func thread(method, [args]):
  pThis ?= null
  inline "push global.this"
  inline "peek $pthis"
  inline "pop"
  return new TThreadCall(pThis, method, args, false)
end

GlobalLock ?= new CriticalSection()

func sync(method, [args]):
  pThis ?= null
  inline "push global.this"
  inline "peek $pthis"
  inline "pop"

  try:
    GlobalLock -> Enter()

    args.len()
    inline "peek global.arg_counter"
    inline "pop"

    for arg back args:
      x ?= arg
      inline "push $x"
    end

    inline "push $pthis"
    inline "peek global.this"
    inline "pop"
    inline "push $method"
    inline "jc"

    GlobalLock -> Leave()
  catch E:
    GlobalLock -> Leave()
    raise E
  end
end
