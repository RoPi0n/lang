uses threads
uses mcl.canvas

/*
 *  Application
 */

import _mcl_App_Init "mcl.lib" "_MCL_APP_INIT"
import _mcl_App_Run  "mcl.lib" "_MCL_APP_RUN"
import _mcl_App_Term "mcl.lib" "_MCL_APP_TERM"

class MApplication:
  var Running

  init():
    $Running ?= false
    _mcl_app_init()
  end

  proc run():
    $Running = true
    _mcl_app_run()
  end

  proc term():
    $Running = false
    _mcl_app_term()
  end
end

Application ?= new MApplication()

/*
 *  MCLForm
 */

import _mcl_Frm_create       "mcl.lib" "_MCL_FRM_CREATE"

import _mcl_Frm_Get_Width    "mcl.lib" "_MCL_FRM_GET_WIDTH"
import _mcl_Frm_Get_Height   "mcl.lib" "_MCL_FRM_GET_HEIGHT"
import _mcl_Frm_Get_Left     "mcl.lib" "_MCL_FRM_GET_LEFT"
import _mcl_Frm_Get_Top      "mcl.lib" "_MCL_FRM_GET_TOP"
import _mcl_Frm_Get_Caption  "mcl.lib" "_MCL_FRM_GET_CAPTION"

import _mcl_Frm_Set_Width    "mcl.lib" "_MCL_FRM_SET_WIDTH"
import _mcl_Frm_Set_Height   "mcl.lib" "_MCL_FRM_SET_HEIGHT"
import _mcl_Frm_Set_Left     "mcl.lib" "_MCL_FRM_SET_LEFT"
import _mcl_Frm_Set_Top      "mcl.lib" "_MCL_FRM_SET_TOP"
import _mcl_Frm_Set_Caption  "mcl.lib" "_MCL_FRM_SET_CAPTION"

import _mcl_Frm_Focus        "mcl.lib" "_MCL_FRM_FOCUS"
import _mcl_Frm_Get_Canvas   "mcl.lib" "_MCL_FRM_GET_CANVAS"

import _mcl_Frm_Reg_Handler  "mcl.lib" "_MCL_FRM_REG_HANDLER"
import _mcl_Frm_Handle       "mcl.lib" "_MCL_FRM_HANDLE"

// Constants & Types

enum MCL_Frm_Handler_Type [
  fhClick,
  fhCloseQuery,
  fhCreate,
  fhDoubleClick,
  fhHide,
  fhKeyDown,
  fhKeyPress,
  fhKeyUp,
  fhMouseDown,
  fhMouseEnter,
  fhMouseLeave,
  fhMouseUp,
  fhMouseMove,
  fhMouseWheel,
  fhMouseWheelDown,
  fhMouseWheelHorz,
  fhMouseWheelLeft,
  fhMouseWheelRight,
  fhMouseWheelUp,
  fhResize,
  fhShow,
  fhWindowStateChange
]

enum MCLMouseButton [
  mbLeft,
  mbRight,
  mbMiddle,
  mbExtra1,
  mbExtra2
]

//MCLForm base class

proc MForm_HandlerProc(FormInstance):
  while true:
    m ?= _mcl_Frm_Handle(FormInstance -> NativeFormRef)

    if m <> 0:
      inline "peek global.this"
      inline "pop"
      inline "push $m"
      inline "jc"
    else:
      Sleep(1)
    end

    gc()
  end
end

class MForm:
  private:
    var NativeFormRef,
        HandlerThread

    proc SafeSetHandler(Ev, Handler, DefHandler):
      if Handler <> DefHandler:
        $SetHandler(Ev, Handler)
      end
    end

  public:
    var  Canvas

    init():
      $NativeFormRef ?= _mcl_Frm_Create()
      $Canvas ?= new MCanvas($GetCanvas())

      $SafeSetHandler(fhClick,       $OnClick,       MForm -> OnClick)
      $SafeSetHandler(fhDoubleClick, $OnDoubleClick, MForm -> OnDoubleClick)

      $SafeSetHandler(fhCloseQuery,  $OnCloseQuery,  MForm -> OnCloseQuery)
      $SafeSetHandler(fhShow,        $OnShow,        MForm -> OnShow)
      $SafeSetHandler(fhHide,        $OnHide,        MForm -> OnHide)

      $SafeSetHandler(fhKeyDown,     $OnKeyDown,     MForm -> OnKeyDown)
      $SafeSetHandler(fhKeyUp,       $OnKeyUp,       MForm -> OnKeyUp)
      $SafeSetHandler(fhKeyPress,    $OnKeyPress,    MForm -> OnKeyPress)

      $SafeSetHandler(fhMouseEnter,  $OnMouseEnter,  MForm -> OnMouseEnter)
      $SafeSetHandler(fhMouseLeave,  $OnMouseLeave,  MForm -> OnMouseLeave)
      $SafeSetHandler(fhMouseDown,   $OnMouseDown,   MForm -> OnMouseDown)
      $SafeSetHandler(fhMouseUp,     $OnMouseUp,     MForm -> OnMouseUp)
      $SafeSetHandler(fhMouseMove,   $OnMouseMove,   MForm -> OnMouseMove)

      $HandlerThread ?= MForm_HandlerProc.thread(this)
      $HandlerThread -> Resume()
    end

    func GetCanvas():
      return _mcl_Frm_Get_Canvas($NativeFormRef)
    end

    proc SetHandler(EventType, Handler):
      _mcl_Frm_Reg_Handler($NativeFormRef, EventType, this, Handler)
    end

    // For overriding
    proc OnShow(): end
    proc OnCloseQuery(): end
    proc OnHide(): end

    // Keyboard
    proc OnKeyDown(key): end
    proc OnKeyUp(key): end
    proc OnKeyPress(key): end

    // Mouse
    proc OnClick(): end
    proc OnDoubleClick(): end
    proc OnMouseEnter(): end
    proc OnMouseLeave(): end
    proc OnMouseDown(x, y, button): end
    proc OnMouseUp(x, y, button): end
    proc OnMouseMove(x, y): end
end

