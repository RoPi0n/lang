/*
 *  This file are important library of mash language.
 *  Don't modify this if you don't know what's you doing.
 */

uses sys.arrays

enum EAbstractException [
  ERaisedException  = "ERaisedException",
  EInvalidVMOp      = "EInvalidSVMOperation",
  EInvalidTypeCast  = "EInvalidSVMTypeCast",
  EAbstractError    = "EAbstractError",
  EUnknownException = "EUnknownException"
]

enum EMathException [
  EIntError    = "EInterror",
  EDivByZero   = "EDivByZero",
  ERangeError  = "ERangeError",
  EIntOverflow = "EIntOverflow",

  EMathError   = "EMathError",
  EInvalidOp   = "EInvalidOp",
  EZeroDivide  = "EZeroDivide",
  EOverflow    = "EOverflow",
  EUnderflow   = "EUnderflow"
]

enum ECriticalException [
  EAccessViolation = "EAccessViolation",
  EOSError         = "EOSError",
  ENoThreadSupport = "ENoThreadSupport"
]

// Exception catching / raising class

class Exception:
  public:
    var ClassName,
        Message,
        Addr,
        TraceBackStack

    init(Message):
      $ClassName ?= ERaisedException
      $Message ?= Message
      $Addr ?= null
      $TraceBackStack ?= system_traceback_stack
    end

    func ToString():
      s ?= "Exception <" + $ClassName + ">, Message: '" + $Message + "', at address: #" + $TraceBackStack[0] -> Addr + LnBreak + "Call trace:"
      i ?= len($TraceBackStack) - 1
      for r in $TraceBackStack:
        s += LnBreak

        switch i:
          case len($TraceBackStack) - 1:
            s += ".<- " + r -> ToString() + ", [raised]"
          end

          case 0:
            s += "'-> " + r -> ToString() + ", [catched]"
          end

          default:
            s += "|   " + r -> ToString()
          end
        end

        i--
      end
      return s
    end
end

func system_makeexception(Addr, ClassName, Message):
  if ClassName == ERaisedException:
    return Message
  else:
    E ?= new Exception
    E -> ClassName ?= ClassName
    E -> Message ?= Message
    E -> Addr ?= Addr
    E -> TraceBackStack ?= system_traceback_stack
    system_traceback_stack ?= []
    return E
  end
end

class TraceBackRecord:
  var Addr, MethodName, MethodAddr

  init(Addr, MethodName, MethodAddr):
    $Addr ?= Addr
    $MethodName ?= MethodName
    $MethodAddr ?= MethodAddr
  end

  func ToString():
    return "At method '" + $MethodName + "', (#" + $MethodAddr + ")"
  end
end

proc system_traceback(Addr, MethodName, MethodAddr):
  system_traceback_stack.append(new TraceBackRecord(Addr, MethodName, MethodAddr))
end

proc system_reset_traceback():
  system_traceback_stack ?= []
end

EUnknown ?= system_makeexception(0, EUnknownException, "Unknown raised exception")
