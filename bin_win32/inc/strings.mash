// strings.mash

proc s_Len(s):
  push s
  alen
  //strl
  gpm
end


proc s_Del(s, from, count):
  push from
  push count
  push s
  strd
end


func s_Copy(s, from, count):
  r ?= copy(s)
  s_del(r, from + count, s_len(r))
  if from > 0:
    s_del(r, 0, from)
  end
  return r
end


func s_LeftStr(s, count):
  return s_copy(s, 0, count)
end


func s_RightStr(s, count):
  return s_copy(s, s_len(s) - count, count)
end

// String reverse function

func s_Reverse(s):
  t ?= ""
  for c back s:
    t += c
  end
  return t
end

// Pos & PosEx

func s_Pos(sb, s):
  len_s ?= len(s)
  len_sb ?= len(sb)

  founded ?= false

  for(p ?= 0; p < len_s; p++):
    if s[p] == sb[0]:
      founded = true
      t ?= copy(p)

      for c in sb:
        if s[t] <> c:
          founded = false
          break
        end
        t++
      end
    end

    if founded:
      return p
    end
  end

  return -1
end


func s_PosEx(sb, s, num):
  len_s ?= len(s)
  len_sb ?= len(sb)

  founded ?= false

  for(p ?= 0; p < len_s; p++):
    if s[p] == sb[0]:
      founded = true
      t ?= copy(p)

      for c in sb:
        if s[t] <> c:
          founded = false
          break
        end
        t++
      end
    end

    if founded:
      if num > 1:
        num--
        founded = false
      else:
        return p
      end
    end
  end

  return -1
end

// Trim

func s_TrimLeft(s):
  r ?= copy(s)

  while s_len(r) > 0:
    if r[0] == " ":
      s_del(r, 0, 1)
    else:
      break
    end
  end

  return r
end


func s_TrimRight(s):
  r ?= copy(s)

  while s_len(r) > 0:
    if r[s_len(r) - 1] == " ":
      s_del(r, s_len(r) - 1, 1)
    else:
      break
    end
  end

  return r
end


func s_Trim(s):
  r ?= copy(s)
  r = s_trimright(r)
  r = s_trimleft(r)
  return r
end

// Substring replase function

enum s_ReplaceFlags [srfReplaceAll, srfIgnoreCase]

func s_Replace(s, from, to, flags):
  r ?= copy(s)

  s_Replace.DoIt:

    if srfIgnoreCase in flags:
      p ?= s_Pos(StrUpper(from), StrUpper(r))
    else:
      p ?= s_Pos(from, r)
    end

    if p >= 0:
      r = s_Copy(r, 0, p) + to + s_Copy(r, p + s_Len(from), s_Len(r))

      if srfReplaceAll in flags:
        jump s_Replace.DoIt
      end
    end

  return r
end
