////////////////////////////////////////////////////////////////////////////////
// Coroutines
////////////////////////////////////////////////////////////////////////////////

uses <bf>
uses <classes\list>
uses <threads>

class TCoroutine(TThread):
  public:
    var NextCoroutine
    proc Create

    proc Yield, YieldFor
end

proc TCoroutine::Create(Resumed, NextCoroutine):
  $NextCoroutine ?= NextCoroutine
  TThread::Create$(Resumed)
end

proc TCoroutine::Yield():
  $NextCoroutine -> Resume()
  $Suspend()
end

proc TCoroutine::YieldFor(Coroutine):
  Coroutine -> Resume()
  $Suspend()
end

class TQCoroutine(TCoroutine):
  proc Create
end

proc TQCoroutine::Create(Resumed, NextCoroutine, Method):
  $NextCoroutine ?= NextCoroutine
  $Execute ?= Method
  TThread::Create$(Resumed)
end

class TFCoroutine(TCoroutine):
  proc Create
end

proc TFCoroutine::Create(Method):
  $NextCoroutine ?= null
  $Execute ?= Method
  TThread::Create$(false)
end

////////////////////////////////////////////////////////////////////////////////
// TCarousel
////////////////////////////////////////////////////////////////////////////////

class TCarousel:
  protected:
    var Coroutines

  public:
    proc Create, Free, Add, Delete, Run, Stop
end

proc TCarousel::Create():
  $Coroutines ?= new List()
end

proc TCarousel::Free():
  $Stop()

  i ?= 0
  while i < $Coroutines->Size:
    $Coroutines -> Items[i] -> Free()
    i++
  end

  $Coroutines -> Free()
  Free($)
end

proc TCarousel::Add(Coroutine):
  if $Coroutines -> Size > 0:
    $Coroutines -> Items[$Coroutines -> Size - 1] -> NextCoroutine ?= Coroutine
    Coroutine -> NextCoroutine ?= $Coroutines -> Items[0]
    $Coroutines -> Add(Coroutine)
  else:
    $Coroutines -> Add(Coroutine)
  end
end

proc TCarousel::Delete(Index):
  // todo
end

proc TCarousel::Run():
  if $Coroutines -> Size > 0:
    $Coroutines -> Items[0] -> Resume()
  end
end

proc TCarousel::Stop():
  i ?= 0
  while i < $Coroutines->Size:
    $Coroutines -> Items[i] -> Suspend()
    i++
  end
end
