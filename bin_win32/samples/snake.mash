uses <crt>
uses <classes>
uses <threads>

////////////////////////////////////////////////////////////////////////////////

enum SnakeMovingVector [smvLeft, smvRight, smvUp, smvDown]

class Snake:
  public:
    var Body, MovingVector
    proc Create, Free
end

proc Snake::Create():
  $Body ?= new vector()
  $Body->Push_Back(new point(10, 10))
  $Body->Push_Back(new point(11, 10))
  $Body->Push_Back(new point(12, 10))
  $MovingVector ?= new(smvRight)
end

proc Snake::Free():
  $Body->Free()
  Free($MovingVector, $)
end

////////////////////////////////////////////////////////////////////////////////

var snk,
    food,
    score = 0,
    sleeptime = 80,
    ControlThr,
    CritSect = new TCriticalSection(),
    VectorChanged = false,
    GameOver = false

str snake_char  "@"
str food_char   "&"
str border_char "#"

proc PutCh(x, y, char):
  Crt.GotoXY(x, y)
  Print(char)
end

proc DrawBorders():
  for(y ?= 1; y < 23; y++):
    for(x ?= 1; x < 43; x++):
      if y in [1, 22]:
        PutCh(x, y, border_char)
      else:
        if x in [1, 42]:
          PutCh(x, y, border_char)
        end
      end
    end
  end
end

////////////////////////////////////////////////////////////////////////////////

proc RandFood():
  food->set(RandomB(39) + 2, RandomB(19) + 2)
  for(i ?= 1; i < snk->Body->Size(); i++):
    if (food->x == snk->Body->Items[i]->x) &
       (food->y == snk->Body->Items[i]->y):
      RandFood()
      break
    end
  end
end

proc MoveSnake(x, y):
  head ?= snk->Body->Peek_Back()
  newhead ?= new point(head->x + x, head->y + y)

  if newhead->x == food->x & (newhead->y == food->y):
    RandFood()
    PutCh(food->x, food->y, food_char)
    score++
    PutCh(46, 13, "Score: " + I2S(score) + "")
  else:
    tmp ?= snk->Body->Pop_First()
    PutCh(tmp->x, tmp->y, " ")
    tmp->Free()

    for(i ?= 1; i < snk->Body->Size(); i++):
      if newhead->x == snk->Body->Items[i]->x &
         (newhead->y == snk->Body->Items[i]->y):
        GameOver = true
      end
    end

    if newhead->x in [1, 42] | (newhead->y in [1, 22]):
      GameOver = true
    end
  end

  PutCh(food->x, food->y, food_char)
  PutCh(newhead->x, newhead->y, snake_char)
  snk->Body->Push_Back(newhead)
end


proc GameTick():
  switch snk->MovingVector:
    case smvLeft:
      MoveSnake(-1, 0)
      break
    end

    case smvRight:
      MoveSnake(1, 0)
      break
    end

    case smvUp:
      MoveSnake(0, -1)
      break
    end

    case smvDown:
      MoveSnake(0, 1)
      break
    end
  end
end

////////////////////////////////////////////////////////////////////////////////

proc ControlThread():
  while true:
    if ~VectorChanged:
      k ?= Crt.ReadKey()

      switch StrUpper(k):
        case "W":
          if snk->MovingVector == smvDown:
            break
          end
          snk->MovingVector = smvUp
        end

        case "S":
          if snk->MovingVector == smvUp:
            break
          end
          snk->MovingVector = smvDown
        end

        case "A":
          if snk->MovingVector == smvRight:
            break
          end
          snk->MovingVector = smvLeft
        end

        case "D":
          if snk->MovingVector == smvLeft:
            break
          end
          snk->MovingVector = smvRight
        end
      end

      CritSect->Enter()
      VectorChanged = true
      CritSect->Leave()
    end

    Sleep(100)
    while GameOver:
      Sleep(100)
    end
    gc()
  end
end

////////////////////////////////////////////////////////////////////////////////

proc Main():
  snk ?= new snake()
  food ?= new point(0, 0)
  Randomize()

  Crt.TextBackground(Crt.White)
  Crt.ClrScr()

  Crt.TextColor(Crt.Black)
  Crt.TextBackground(Crt.Black)
  DrawBorders()

  Crt.TextBackground(Crt.White)

  PutCh(snk->body->items[1]->x,
        snk->body->items[1]->y,
        snake_char)

  PutCh(snk->body->items[2]->x,
        snk->body->items[2]->y,
        snake_char)

  PutCh(snk->body->items[3]->x,
        snk->body->items[3]->y,
        snake_char)

  food->set(RandomB(39) + 2, RandomB(19) + 2)
  PutCh(food->x, food->y, food_char)

  PutCh(46, 10, "[MASH LANG!]")
  PutCh(46, 11, "[SNAKE]")
  PutCh(46, 13, "Score: 0")

  ControlThr ?= Async(ControlThread)

  while ~GameOver:
    tm1 ?= TickCnt()
    Crt.CursorOff()
    if VectorChanged:
      CritSect->Enter()
      VectorChanged = false
      CritSect->Leave()
    end
    Sleep(sleeptime)
    GameTick()
    Crt.TextColor(Crt.White)
    PutCh(46, 2, "FPS: " + 1000 \ (TickCnt() - tm1) + "   ")
    Crt.TextColor(Crt.Black)
    gc()
  end

  Crt.TextColor(Crt.White)
  Crt.TextBackground(Crt.Black)
  Crt.ClrScr()
  Crt.CursorOn()

  PutCh(1, 1, "Game over!")
  PutCh(1, 2, "Score: " + I2S(score) + "")

  Crt.ReadKey()
  GameOver ?= false
end
